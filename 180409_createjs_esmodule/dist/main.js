/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@createjs/core/src/events/Event.js":
/*!*********************************************************!*\
  !*** ./node_modules/@createjs/core/src/events/Event.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * @license Event\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Contains properties and methods shared by all events for use with {@link core.EventDispatcher}.\n * Note that Event objects are often reused, so you should never\n * rely on an event object's state outside of the call stack it was received in.\n *\n * @memberof core\n * @example\n * const evt = new Event(\"myEvent\");\n * const dispatcher = new EventDispatcher();\n * dispatcher.on(\"myEvent\", event => console.log(event.type));\n * dispatcher.dispatchEvent(evt); // logs \"myEvent\"\n *\n * @param {string} type The event type.\n * @param {boolean} [bubbles=false] Indicates whether the event will bubble through the display list.\n * @param {boolean} [cancelable=false] Indicates whether the default behaviour of this event can be cancelled.\n */\nclass Event {\n\n\tconstructor (type, bubbles = false, cancelable = false) {\n\t\t/**\n\t\t * The type of event.\n\t\t * @type string\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * The object that generated an event.\n\t\t *\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.target = null;\n\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t *\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t */\n\t\tthis.currentTarget = null;\n\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:\n\t\t * <OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t *\n\t\t * @type number\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.eventPhase = 0;\n\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t *\n\t\t * @type boolean\n\t\t * @readonly\n\t\t */\n\t\tthis.bubbles = bubbles;\n\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via {@link core.Event#preventDefault}.\n\t\t *\n\t\t * @type boolean\n\t\t * @readonly\n\t\t */\n\t\tthis.cancelable = cancelable;\n\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t *\n\t\t * @type number\n\t\t * @readonly\n\t\t */\n\t\tthis.timeStamp = new Date().getTime();\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#preventDefault} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.defaultPrevented = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#stopPropagation} or {@link core.Event#stopImmediatePropagation} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.propagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#stopImmediatePropagation} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.immediatePropagationStopped = false;\n\n\t\t/**\n\t\t * Indicates if {@link core.Event#remove} has been called on this event.\n\t\t *\n\t\t * @type boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.removed = false;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#defaultPrevented} to true if the event is cancelable.\n\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t * cancel the default behaviour associated with the event.\n\t * @return {core.Event} this, chainable\n\t */\n\tpreventDefault () {\n\t\tthis.defaultPrevented = this.cancelable;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#propagationStopped} to true.\n\t * Mirrors the DOM event standard.\n\t * @return {core.Event} this, chainable\n\t */\n\tstopPropagation () {\n\t\tthis.propagationStopped = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets {@link core.Event#propagationStopped} and {@link core.Event#immediatePropagationStopped} to true.\n\t * Mirrors the DOM event standard.\n\t * @return {core.Event} this, chainable\n\t */\n\tstopImmediatePropagation () {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t *\n\t * @example\n\t * myBtn.addEventListener(\"click\", event => {\n\t *   event.remove(); // removes this listener.\n\t * });\n\t *\n\t * @return {core.Event} this, chainable\n\t */\n\tremove () {\n\t\tthis.removed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a clone of the Event instance.\n\t *\n\t * @return {core.Event} a clone of the Event instance.\n\t */\n\tclone () {\n\t\tconst event = new Event(this.type, this.bubbles, this.cancelable);\n\t\tfor (let n in this) {\n\t\t\tif (this.hasOwnProperty(n)) {\n\t\t\t\tevent[n] = this[n];\n\t\t\t}\n\t\t}\n\t\treturn event;\n\t}\n\n\t/**\n\t * Provides a return {core.Event} this, chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {core.Event} this, chainable\n\t */\n\tset (props) {\n\t\tfor (let n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t *\n\t * @return {string} A string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name} (type=${this.type})]`;\n\t}\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Event);\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/core/src/events/Event.js?");

/***/ }),

/***/ "./node_modules/@createjs/core/src/events/EventDispatcher.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@createjs/core/src/events/EventDispatcher.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Event */ \"./node_modules/@createjs/core/src/events/Event.js\");\n/**\n * @license EventDispatcher\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n\n/**\n * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n *\n * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\n * EventDispatcher {@link core.EventDispatcher.initialize} method.\n *\n * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\n * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\n * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n *\n * EventDispatcher also exposes a {@link core.EventDispatcher#on} method, which makes it easier\n * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The\n * {@link core.EventDispatcher#off} method is merely an alias to {@link core.EventDispatcher#removeEventListener}.\n *\n * Another addition to the DOM Level 2 model is the {@link core.EventDispatcher#removeAllEventListeners}\n * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also\n * includes a {@link core.Event#remove} method which removes the active listener.\n *\n * @memberof core\n * @example\n * // add EventDispatcher capabilities to the \"MyClass\" class.\n * EventDispatcher.initialize(MyClass.prototype);\n *\n * // Add an event.\n * instance.addEventListener(\"eventName\", event => console.log(event.target + \" was clicked.\"));\n *\n * // scope (\"this\") can be be a challenge with events.\n * // using the {@link core.EventDispatcher#on} method to subscribe to events simplifies this.\n * instance.addEventListener(\"click\", event => console.log(instance === this)); // false, scope is ambiguous.\n * instance.on(\"click\", event => console.log(instance === this)); // true, `on` uses dispatcher scope by default.\n */\nclass EventDispatcher {\n\n\t/**\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\n\t *\n\t * @static\n\t * @example\n\t * EventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t * EventDispatcher.initialize(myInstance); // add to a specific instance\n\t *\n\t * @param {Object} target The target object to inject EventDispatcher methods into.\n\t */\n\tstatic initialize (target) {\n\t\tconst p = EventDispatcher.prototype;\n\t\ttarget.addEventListener = p.addEventListener;\n\t\ttarget.on = p.on;\n\t\ttarget.removeEventListener = target.off = p.removeEventListener;\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\n\t\ttarget.hasEventListener = p.hasEventListener;\n\t\ttarget.dispatchEvent = p.dispatchEvent;\n\t\ttarget._dispatchEvent = p._dispatchEvent;\n\t\ttarget.willTrigger = p.willTrigger;\n\t}\n\n\tconstructor () {\n\t\t/**\n\t\t * @private\n\t\t * @default null\n\t\t * @type Object\n\t\t */\n\t\tthis._listeners = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @default null\n\t\t * @type Object\n\t\t */\n\t\tthis._captureListeners = null;\n\t}\n\n\t/**\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\n\t * multiple callbacks getting fired.\n\t *\n\t * @example\n\t * displayObject.addEventListener(\"click\", event => console.log('clicked', event));\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function|Object} Returns the listener for chaining or assignment.\n\t */\n\taddEventListener (type, listener, useCapture = false) {\n\t\tlet listeners;\n\t\tif (useCapture) {\n\t\t\tlisteners = this._captureListeners = this._captureListeners || {};\n\t\t} else {\n\t\t\tlisteners = this._listeners = this._listeners || {};\n\t\t}\n\t\tlet arr = listeners[type];\n\t\tif (arr) {\n\t\t\tthis.removeEventListener(type, listener, useCapture);\n\t\t\tarr = listeners[type]; // remove may have deleted the array\n\t\t}\n\t\tif (arr) { arr.push(listener);  }\n\t\telse { listeners[type] = [listener]; }\n\t\treturn listener;\n\t}\n\n\t/**\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\n\t *\n\t * This method works by creating an anonymous wrapper function and subscribing it with `addEventListener`.\n\t * The wrapper function is returned for use with `removeEventListener` (or `off`).\n\t *\n\t * To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n\t * {@link core.Event#remove}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\n\t * to `on` with the same params will create multiple listeners.\n\t *\n\t * @example\n\t * const listener = myBtn.on(\"click\", handleClick, null, false, { count: 3 });\n\t * function handleClick (evt, data) {\n\t *   data.count -= 1;\n\t *   console.log(this == myBtn); // true - scope defaults to the dispatcher\n\t *   if (data.count == 0) {\n\t *     alert(\"clicked 3 times!\");\n\t *     myBtn.off(\"click\", listener);\n\t *     // alternately: evt.remove();\n\t *   }\n\t * }\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.\n\t * @param {Object} [scope=null] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\n\t * @param {boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\n\t * @param {*} [data={}] Arbitrary data that will be included as the second parameter when the listener is called.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\n\t */\n\ton (type, listener, scope = null, once = false, data = {}, useCapture = false) {\n\t\tif (listener.handleEvent) {\n\t\t\tscope = scope || listener;\n\t\t\tlistener = listener.handleEvent;\n\t\t}\n\t\tscope = scope || this;\n\t\treturn this.addEventListener(type, evt => {\n\t\t\tlistener.call(scope, evt, data);\n\t\t\tonce && evt.remove();\n\t\t}, useCapture);\n\t}\n\n\t/**\n\t * Removes the specified event listener.\n\t *\n\t * You must pass the exact function reference used when the event was added. If a proxy\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\n\t * closure will not work.\n\t *\n\t * @example\n\t * displayObject.removeEventListener(\"click\", handleClick);\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener The listener function or object.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t */\n\tremoveEventListener (type, listener, useCapture = false) {\n\t\tconst listeners = useCapture ? this._captureListeners : this._listeners;\n\t\tif (!listeners) { return; }\n\t\tconst arr = listeners[type];\n\t\tif (!arr) { return; }\n\t\tconst l = arr.length;\n\t\tfor (let i = 0; i < l; i++) {\n\t\t\tif (arr[i] === listener) {\n\t\t\t\tif (l === 1) { delete(listeners[type]); } // allows for faster checks.\n\t\t\t\telse { arr.splice(i, 1); }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n\t * `on` method.\n\t *\n\t * To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See\n\t * {@link core.EventDispatcher#on} for an example.\n\t *\n\t * @param {string} type The string type of the event.\n\t * @param {Function|Object} listener The listener function or object.\n\t * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\n\t */\n\toff (type, listener, useCapture = false) {\n\t\tthis.removeEventListener(type, listener, useCapture);\n\t}\n\n\t/**\n\t * Removes all listeners for the specified type, or all listeners of all types.\n\t *\n\t * @example\n\t * // remove all listeners\n\t * displayObject.removeAllEventListeners();\n\t *\n\t * // remove all click listeners\n\t * displayObject.removeAllEventListeners(\"click\");\n\t *\n\t * @param {string} [type=null] The string type of the event. If omitted, all listeners for all types will be removed.\n\t */\n\tremoveAllEventListeners (type = null) {\n\t\tif (type) {\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\n\t\t} else {\n\t\t\tthis._listeners = this._captureListeners = null;\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the specified event to all listeners.\n\t *\n\t * @example\n\t * // use a string event\n\t * this.dispatchEvent(\"complete\")\n\t *\n\t * // use an Event instance\n\t * const event = new createjs.Event(\"progress\");\n\t * this.dispatchEvent(event);\n\t *\n\t * @param {Object|Event|string} eventObj An object with a \"type\" property, or a string type.\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\n\t * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\n\t * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\n\t * @param {boolean} [bubbles=false] Specifies the `bubbles` value when a string was passed to eventObj.\n\t * @param {boolean} [cancelable=false] Specifies the `cancelable` value when a string was passed to eventObj.\n\t * @return {boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\n\t */\n\tdispatchEvent (eventObj, bubbles = false, cancelable = false) {\n\t\tif (typeof eventObj === \"string\") {\n\t\t\t// skip everything if there's no listeners and it doesn't bubble:\n\t\t\tconst listeners = this._listeners;\n\t\t\tif (!bubbles && (!listeners || !listeners[eventObj])) { return true; }\n\t\t\teventObj = new _Event__WEBPACK_IMPORTED_MODULE_0__[\"default\"](eventObj, bubbles, cancelable);\n\t\t} else if (eventObj.target && eventObj.clone) {\n\t\t\t// redispatching an active event object, so clone it:\n\t\t\teventObj = eventObj.clone();\n\t\t}\n\n\t\t// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\n\n\t\tif (!eventObj.bubbles || !this.parent) {\n\t\t\tthis._dispatchEvent(eventObj, 2);\n\t\t} else {\n\t\t\tlet top = this;\n\t\t\tconst list = [top];\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\n\t\t\tconst l = list.length;\n\t\t\tlet i;\n\n\t\t\t// capture & atTarget\n\t\t\tfor (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\n\t\t\t}\n\t\t\t// bubbling\n\t\t\tfor (i = 1; i < l && !eventObj.propagationStopped; i++) {\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\n\t\t\t}\n\t\t}\n\t\treturn !eventObj.defaultPrevented;\n\t}\n\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type.\n\t *\n\t * @param {string} type The string type of the event.\n\t * @return {boolean} Returns true if there is at least one listener for the specified event.\n\t */\n\thasEventListener (type) {\n\t\tconst listeners = this._listeners, captureListeners = this._captureListeners;\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\n\t}\n\n\t/**\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\n\t * specified type is dispatched from this object, it will trigger at least one listener.\n\t *\n\t * This is similar to {@link core.EventDispatcher#hasEventListener}, but it searches the entire\n\t * event flow for a listener, not just this object.\n\t *\n\t * @param {string} type The string type of the event.\n\t * @return {boolean} Returns `true` if there is at least one listener for the specified event.\n\t */\n\twillTrigger (type) {\n\t\tlet o = this;\n\t\twhile (o) {\n\t\t\tif (o.hasEventListener(type)) { return true; }\n\t\t\to = o.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return {String} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name + this.name ? ` ${this.name}` : \"\"}]`;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object|Event|string} eventObj\n\t * @param {Object} eventPhase\n\t */\n\t_dispatchEvent (eventObj, eventPhase) {\n\t\tconst listeners = eventPhase === 1 ? this._captureListeners : this._listeners;\n\t\tif (eventObj && listeners) {\n\t\t\tlet arr = listeners[eventObj.type];\n\t\t\tlet l;\n\t\t\tif (!arr || (l = arr.length) === 0) { return; }\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\n\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\n\t\t\teventObj.removed = false;\n\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\n\t\t\tfor (let i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {\n\t\t\t\tlet o = arr[i];\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\n\t\t\t\telse { o(eventObj); }\n\t\t\t\tif (eventObj.removed) {\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase === 1);\n\t\t\t\t\teventObj.removed = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (EventDispatcher);\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/core/src/events/EventDispatcher.js?");

/***/ }),

/***/ "./node_modules/@createjs/core/src/utils/Ticker.js":
/*!*********************************************************!*\
  !*** ./node_modules/@createjs/core/src/utils/Ticker.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./node_modules/@createjs/core/src/events/EventDispatcher.js\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/Event */ \"./node_modules/@createjs/core/src/events/Event.js\");\n/**\n * @license Ticker\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n\n\n/**\n * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n * event to be notified when a set time interval has elapsed.\n *\n * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n * can not be instantiated.\n *\n * @todo Pass timingMode, maxDelta, paused values as instantiation arguments?\n *\n * @memberof core\n * @example\n * Ticker.addEventListener(\"tick\", event => {\n *   // Actions carried out each tick (aka frame)\n *   if (!event.paused) {\n *     // Actions carried out when the Ticker is not paused.\n *   }\n * });\n * @example\n * // Ticker export explanation\n * import Ticker, { Ticker as TickerClass, getTicker } from \"@createjs/core\";\n * Ticker.name, Ticker.RAF // -> createjs.global, undefined\n * TickerClass.RAF // -> raf\n * Ticker === getTicker(\"createjs.global\") // -> true\n *\n * @extends core.EventDispatcher\n * @param {string} name The name assigned to this instance.\n */\nclass Ticker extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n\t/**\n\t * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n\t * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n\t * dispatches the tick when the time is within a certain threshold.\n\t *\n\t * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n\t * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n\t * gaining the benefits of that API (screen synch, background throttling).\n\t *\n\t * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n\t * framerates of 10, 12, 15, 20, and 30 work well.\n\t *\n\t * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t *\n\t * @static\n\t * @type {string}\n\t * @default \"synched\"\n\t * @readonly\n\t */\n\tstatic get RAF_SYNCHED () { return \"synched\"; }\n\n\t/**\n\t * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n\t * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n\t * You can leverage {@link core.Ticker#getTime} and the {@link core.Ticker#event:tick}\n\t * event object's \"delta\" properties to make this easier.\n\t *\n\t * Falls back on {@link core.Ticker.TIMEOUT} if the requestAnimationFrame API is not supported.\n\t *\n\t * @static\n\t * @type {string}\n\t * @default \"raf\"\n\t * @readonly\n\t */\n\tstatic get RAF () { return \"raf\"; }\n\n\t/**\n\t * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n\t * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n\t *\n\t * @static\n\t * @type {string}\n\t * @default \"timeout\"\n\t * @readonly\n\t */\n\tstatic get TIMEOUT () { return \"timeout\"; }\n\n\tconstructor (name) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The name of this instance.\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use.\n\t\t *\n\t\t * @see {@link core.Ticker.TIMEOUT}\n\t\t * @see {@link core.Ticker.RAF}\n\t\t * @see {@link core.Ticker.RAF_SYNCHED}\n\t\t *\n\t\t * @type {string}\n\t\t * @default Ticker.TIMEOUT\n\t\t */\n\t\tthis.timingMode = Ticker.TIMEOUT;\n\n\t\t/**\n\t\t * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n\t\t * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n\t\t * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n\t\t * (ex. maxDelta=50 when running at 40fps).\n\t\t *\n\t\t * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n\t\t * when using both delta and other values.\n\t\t *\n\t\t * If 0, there is no maximum.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.maxDelta = 0;\n\n\t\t/**\n\t\t * When the ticker is paused, all listeners will still receive a tick event, but the `paused` property\n\t\t * of the event will be `true`. Also, while paused the `runTime` will not increase.\n\t\t *\n\t\t * @example\n\t\t * Ticker.addEventListener(\"tick\", event => console.log(event.paused, Ticker.getTime(false), Ticker.getTime(true)));\n\t\t * Ticker.paused = true;\n\t\t *\n\t\t * @see {@link core.Ticker#event:tick}\n\t\t * @see {@link core.Ticker#getTime}\n\t\t * @see {@link core.Ticker#getEventTime}\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.paused = false;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis._inited = false;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._startTime = 0;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._pausedTime = 0;\n\n\t\t/**\n\t\t * The number of ticks that have passed.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._ticks = 0;\n\n\t\t/**\n\t\t * The number of ticks that have passed while Ticker has been paused.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default\n\t\t */\n\t\tthis._pausedTicks = 0;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default\n\t\t */\n\t\tthis._interval = 50;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default\n\t\t */\n\t\tthis._lastTime = 0;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Array}\n\t\t * @default null\n\t\t */\n\t\tthis._times = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Array}\n\t\t * @default null\n\t\t */\n\t\tthis._tickTimes = null;\n\n\t\t/**\n\t\t * Stores the timeout or requestAnimationFrame id.\n\t\t *\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis._timerId = null;\n\n\t\t/**\n\t\t * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n\t\t * if that property changed and a tick hasn't fired.\n\t\t *\n\t\t * @private\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis._raf = true;\n\t}\n\n\t/**\n\t * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\t * Note that actual time between ticks may be more than specified depending on CPU load.\n\t * This property is ignored if the ticker is using the `RAF` timing mode.\n\t *\n\t * @type {number}\n\t */\n\tget interval () { return this._interval; }\n\tset interval (interval) {\n\t\tthis._interval = interval;\n\t\tif (!this._inited) { return; }\n\t\tthis._setupTick();\n\t}\n\n\t/**\n\t * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n\t * `framerate == 1000/interval`.\n\t *\n\t * @type {number}\n\t */\n\tget framerate () { return 1000 / this._interval; }\n\tset framerate (framerate) { this.interval = 1000 / framerate; }\n\n\t/**\n\t * Starts the tick. This is called automatically when the first listener is added.\n\t */\n\tinit () {\n\t\tif (this._inited) { return; }\n\t\tthis._inited = true;\n\t\tthis._times = [];\n\t\tthis._tickTimes = [];\n\t\tthis._startTime = this._getTime();\n\t\tthis._times.push(this._lastTime = 0);\n\t\tthis._setupTick();\n\t}\n\n\t/**\n\t * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n\t */\n\treset () {\n\t\tif (this._raf) {\n\t\t\tlet f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n\t\t\tf && f(this._timerId);\n\t\t} else {\n\t\t\tclearTimeout(this._timerId);\n\t\t}\n\t\tthis.removeAllEventListeners(\"tick\");\n\t\tthis._timerId = this._times = this._tickTimes = null;\n\t\tthis._startTime = this._lastTime = this._ticks = 0;\n\t\tthis._inited = false;\n\t}\n\n\t/**\n\t * Init the Ticker instance if it hasn't been already.\n\t */\n\taddEventListener (type, listener, useCapture) {\n\t\t!this._inited && this.init();\n\t\treturn super.addEventListener(type, listener, useCapture);\n\t}\n\n\t/**\n\t * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n\t * because it only measures the time spent within the tick execution stack.\n\t *\n\t * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between\n\t * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that\n\t * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\t *\n\t * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n\t * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n\t * other than the tick is using ~80ms (another script, DOM rendering, etc).\n\t *\n\t * @param {number} [ticks=null] The number of previous ticks over which to measure the average time spent in a tick.\n\t * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n\t * @return {number} The average time spent in a tick in milliseconds.\n\t */\n\tgetMeasuredTickTime (ticks = null) {\n\t\tconst times = this._tickTimes;\n\t\tif (!times || times.length < 1) { return -1; }\n\t\t// by default, calculate average for the past ~1 second:\n\t\tticks = Math.min(times.length, ticks || (this.framerate | 0));\n\t\treturn times.reduce((a, b) => a + b, 0) / ticks;\n\t}\n\n\t/**\n\t * Returns the actual frames / ticks per second.\n\t *\n\t * @param {number} [ticks=null] The number of previous ticks over which to measure the actual frames / ticks per second.\n\t * Defaults to the number of ticks per second.\n\t * @return {number} The actual frames / ticks per second. Depending on performance, this may differ\n\t * from the target frames per second.\n\t */\n\tgetMeasuredFPS (ticks = null) {\n\t\tconst times = this._times;\n\t\tif (!times || times.length < 2) { return -1; }\n\t\t// by default, calculate fps for the past ~1 second:\n\t\tticks = Math.min(times.length - 1, ticks || (this.framerate | 0));\n\t\treturn 1000 / ((times[0] - times[ticks]) / ticks);\n\t}\n\n\t/**\n\t * Returns the number of milliseconds that have elapsed since Ticker was initialized via {@link core.Ticker#init}.\n\t * Returns -1 if Ticker has not been initialized. For example, you could use\n\t * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n\t *\n\t * @param {boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n\t * If false, the value returned will be total time elapsed since the first tick event listener was added.\n\t * @return {number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n\t */\n\tgetTime (runTime = false) {\n\t\treturn this._startTime ? this._getTime() - (runTime ? this._pausedTime : 0) : -1;\n\t}\n\n\t/**\n\t * Similar to {@link core.Ticker#getTime}, but returns the time on the most recent {@link core.Ticker#event:tick}\n\t * event object.\n\t *\n\t * @param {boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n\t * @returns {number} The time or runTime property from the most recent tick event or -1.\n\t */\n\tgetEventTime (runTime = false) {\n\t\treturn this._startTime ? (this._lastTime || this._startTime) - (runTime ? this._pausedTime : 0) : -1;\n\t}\n\n\t/**\n\t * Returns the number of ticks that have been broadcast by Ticker.\n\t *\n\t * @param {boolean} [pauseable=false] Indicates whether to include ticks that would have been broadcast\n\t * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n\t * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n\t * value.\n\t * @return {number} of ticks that have been broadcast.\n\t */\n\tgetTicks (pauseable = false) {\n\t\treturn this._ticks - (pauseable ? this._pausedTicks : 0);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleSynch () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\n\t\t// run if enough time has elapsed, with a little bit of flexibility to be early:\n\t\tif (this._getTime() - this._lastTime >= (this._interval - 1) * 0.97) {\n\t\t\tthis._tick();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleRAF () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\t\tthis._tick();\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTimeout () {\n\t\tthis._timerId = null;\n\t\tthis._setupTick();\n\t\tthis._tick();\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_setupTick () {\n\t\tif (this._timerId != null) { return; } // avoid duplicates\n\t\tconst mode = this.timingMode || (this._raf && Ticker.RAF);\n\t\tif (mode === Ticker.RAF_SYNCHED || mode === Ticker.RAF) {\n\t\t\tconst f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\tif (f) {\n\t\t\t\tthis._timerId = f(mode === Ticker.RAF ? this._handleRAF.bind(this) : this._handleSynch.bind(this));\n\t\t\t\tthis._raf = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis._raf = false;\n\t\tthis._timerId = setTimeout(this._handleTimeout.bind(this), this._interval);\n\t}\n\n\t/**\n\t * @private\n\t * @emits core.Ticker#event:tick\n\t */\n\t_tick () {\n\t\tconst paused = this.paused, time = this._getTime(), elapsedTime = time - this._lastTime;\n\t\tthis._lastTime = time;\n\t\tthis._ticks++;\n\n\t\tif (paused) {\n\t\t\tthis._pausedTicks++;\n\t\t\tthis._pausedTime += elapsedTime;\n\t\t}\n\n\t\tif (this.hasEventListener(\"tick\")) {\n\t\t\tconst event = new _events_Event__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"tick\");\n\t\t\tconst maxDelta = this.maxDelta;\n\t\t\tevent.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;\n\t\t\tevent.paused = paused;\n\t\t\tevent.time = time;\n\t\t\tevent.runTime = time - this._pausedTime;\n\t\t\tthis.dispatchEvent(event);\n\t\t}\n\n\t\tthis._tickTimes.unshift(this._getTime() - time);\n\t\twhile (this._tickTimes.length > 100) { this._tickTimes.pop(); }\n\n\t\tthis._times.unshift(time);\n\t\twhile (this._times.length > 100) { this._times.pop(); }\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_getTime () {\n\t\tconst now = window.performance && window.performance.now;\n\t\treturn ((now && now.call(performance)) || (new Date().getTime())) - this._startTime;\n\t}\n\n\tstatic on (type, listener, scope, once, data, useCapture) { return _instance.on(type, listener, scope, once, data, useCapture); }\n\tstatic removeEventListener (type, listener, useCapture) { _instance.removeEventListener(type, listener, useCapture); }\n\tstatic off (type, listener, useCapture) { _instance.off(type, listener, useCapture); }\n\tstatic removeAllEventListeners (type) { _instance.removeAllEventListeners(type); }\n\tstatic dispatchEvent (eventObj, bubbles, cancelable) { return _instance.dispatchEvent(eventObj, bubbles, cancelable); }\n\tstatic hasEventListener (type) { return _instance.hasEventListener(type); }\n\tstatic willTrigger (type) { return _instance.willTrigger(type); }\n\tstatic toString () { return _instance.toString(); }\n\tstatic init () { _instance.init(); }\n\tstatic reset () { _instance.reset(); }\n\tstatic addEventListener (type, listener, useCapture) { _instance.addEventListener(type, listener, useCapture); }\n\tstatic getMeasuredTickTime (ticks) { return _instance.getMeasuredTickTime(ticks); }\n\tstatic getMeasuredFPS (ticks) { return _instance.getMeasuredFPS(ticks); }\n\tstatic getTime (runTime) { return _instance.getTime(runTime); }\n\tstatic getEventTime (runTime) { return _instance.getEventTime(runTime); }\n\tstatic getTicks (pauseable) { return _instance.getTicks(pauseable); }\n\n\tstatic get interval () { return _instance.interval; }\n\tstatic set interval (interval) { _instance.interval = interval; }\n\tstatic get framerate () { return _instance.framerate; }\n\tstatic set framerate (framerate) { _instance.framerate = framerate; }\n\tstatic get name () { return _instance.name; }\n\tstatic set name (name) { _instance.name = name; }\n\tstatic get timingMode () { return _instance.timingMode; }\n\tstatic set timingMode (timingMode) { _instance.timingMode = timingMode; }\n\tstatic get maxDelta () { return _instance.maxDelta; }\n\tstatic set maxDelta (maxDelta) { _instance.maxDelta = maxDelta; }\n\tstatic get paused () { return _instance.paused; }\n\tstatic set paused (paused) { _instance.paused = paused; }\n\n}\n\n/**\n * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused.\n *\n * @example\n * Ticker.addEventListener(\"tick\", event => console.log(\"Paused:\", event.paused, event.delta));\n *\n * @event core.Ticker#tick\n * @type {Object}\n * @property {Object} target The object that dispatched the event.\n * @property {string} type The event type.\n * @property {boolean} paused Indicates whether the ticker is currently paused.\n * @property {number} delta The time elapsed in ms since the last tick.\n * @property {number} time The total time in ms since Ticker was initialized.\n * @property {number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n * you could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n * @since 0.6.0\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Ticker);\n\n// the default Ticker instance\nconst _instance = new Ticker(\"createjs.global\");\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/core/src/utils/Ticker.js?");

/***/ }),

/***/ "./node_modules/@createjs/easeljs/dist/easeljs.module.js":
/*!***************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/dist/easeljs.module.js ***!
  \***************************************************************/
/*! exports provided: StageGL, Stage, Container, DisplayObject, Bitmap, BitmapText, DOMElement, Graphics, MovieClip, Shadow, Shape, Sprite, SpriteSheet, Text, MouseEvent, AlphaMapFilter, AlphaMaskFilter, BitmapCache, BlurFilter, ColorFilter, ColorMatrix, ColorMatrixFilter, Filter, DisplayProps, Matrix2D, Point, Rectangle, ButtonHelper, Touch, SpriteSheetBuilder, SpriteSheetUtils, UID, WebGLInspector, Event, EventDispatcher, Ticker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StageGL\", function() { return StageGL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stage\", function() { return Stage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Container\", function() { return Container; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DisplayObject\", function() { return DisplayObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bitmap\", function() { return Bitmap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitmapText\", function() { return BitmapText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMElement\", function() { return DOMElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Graphics\", function() { return Graphics; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MovieClip\", function() { return MovieClip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shadow\", function() { return Shadow$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shape\", function() { return Shape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sprite\", function() { return Sprite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpriteSheet\", function() { return SpriteSheet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Text\", function() { return Text; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MouseEvent\", function() { return MouseEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AlphaMapFilter\", function() { return AlphaMapFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AlphaMaskFilter\", function() { return AlphaMaskFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitmapCache\", function() { return BitmapCache; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BlurFilter\", function() { return BlurFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorFilter\", function() { return ColorFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorMatrix\", function() { return ColorMatrix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorMatrixFilter\", function() { return ColorMatrixFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Filter\", function() { return Filter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DisplayProps\", function() { return DisplayProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Matrix2D\", function() { return Matrix2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return Point; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rectangle\", function() { return Rectangle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ButtonHelper\", function() { return ButtonHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Touch\", function() { return Touch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpriteSheetBuilder\", function() { return SpriteSheetBuilder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpriteSheetUtils\", function() { return SpriteSheetUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UID\", function() { return UID; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLInspector\", function() { return WebGLInspector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Event\", function() { return Event; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventDispatcher\", function() { return EventDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ticker\", function() { return Ticker; });\n/* harmony import */ var _createjs_tweenjs_src_Tween__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/tweenjs/src/Tween */ \"./node_modules/@createjs/tweenjs/src/Tween.js\");\n/* harmony import */ var _createjs_tweenjs_src_Timeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @createjs/tweenjs/src/Timeline */ \"./node_modules/@createjs/tweenjs/src/Timeline.js\");\n/**\n * @license\n * EaselJS\n * Visit https://createjs.com for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n\n\nclass StageGL {\n  constructor() {\n    throw new Error(`\\n\\t\\t\\tStageGL is not currently supported on the EaselJS 2.0 branch.\\n\\t\\t\\tEnd of Q1 2018 is targetted for StageGL support.\\n\\t\\t\\tFollow @CreateJS on Twitter for updates.\\n\\t\\t`);\n  }\n}\n\nclass Event {\n  constructor(type, bubbles = false, cancelable = false) {\n    this.type = type;\n    this.target = null;\n    this.currentTarget = null;\n    this.eventPhase = 0;\n    this.bubbles = bubbles;\n    this.cancelable = cancelable;\n    this.timeStamp = new Date().getTime();\n    this.defaultPrevented = false;\n    this.propagationStopped = false;\n    this.immediatePropagationStopped = false;\n    this.removed = false;\n  }\n  preventDefault() {\n    this.defaultPrevented = this.cancelable;\n    return this;\n  }\n  stopPropagation() {\n    this.propagationStopped = true;\n    return this;\n  }\n  stopImmediatePropagation() {\n    this.immediatePropagationStopped = this.propagationStopped = true;\n    return this;\n  }\n  remove() {\n    this.removed = true;\n    return this;\n  }\n  clone() {\n    const event = new Event(this.type, this.bubbles, this.cancelable);\n    for (let n in this) {\n      if (this.hasOwnProperty(n)) {\n        event[n] = this[n];\n      }\n    }\n    return event;\n  }\n  set(props) {\n    for (let n in props) {\n      this[n] = props[n];\n    }\n    return this;\n  }\n  toString() {\n    return `[${this.constructor.name} (type=${this.type})]`;\n  }\n}\n\nclass EventDispatcher {\n  static initialize(target) {\n    const p = EventDispatcher.prototype;\n    target.addEventListener = p.addEventListener;\n    target.on = p.on;\n    target.removeEventListener = target.off = p.removeEventListener;\n    target.removeAllEventListeners = p.removeAllEventListeners;\n    target.hasEventListener = p.hasEventListener;\n    target.dispatchEvent = p.dispatchEvent;\n    target._dispatchEvent = p._dispatchEvent;\n    target.willTrigger = p.willTrigger;\n  }\n  constructor() {\n    this._listeners = null;\n    this._captureListeners = null;\n  }\n  addEventListener(type, listener, useCapture = false) {\n    let listeners;\n    if (useCapture) {\n      listeners = this._captureListeners = this._captureListeners || {};\n    } else {\n      listeners = this._listeners = this._listeners || {};\n    }\n    let arr = listeners[type];\n    if (arr) {\n      this.removeEventListener(type, listener, useCapture);\n      arr = listeners[type];\n    }\n    if (arr) {\n      arr.push(listener);\n    } else {\n      listeners[type] = [ listener ];\n    }\n    return listener;\n  }\n  on(type, listener, scope = null, once = false, data = {}, useCapture = false) {\n    if (listener.handleEvent) {\n      scope = scope || listener;\n      listener = listener.handleEvent;\n    }\n    scope = scope || this;\n    return this.addEventListener(type, evt => {\n      listener.call(scope, evt, data);\n      once && evt.remove();\n    }, useCapture);\n  }\n  removeEventListener(type, listener, useCapture = false) {\n    const listeners = useCapture ? this._captureListeners : this._listeners;\n    if (!listeners) {\n      return;\n    }\n    const arr = listeners[type];\n    if (!arr) {\n      return;\n    }\n    const l = arr.length;\n    for (let i = 0; i < l; i++) {\n      if (arr[i] === listener) {\n        if (l === 1) {\n          delete listeners[type];\n        } else {\n          arr.splice(i, 1);\n        }\n        break;\n      }\n    }\n  }\n  off(type, listener, useCapture = false) {\n    this.removeEventListener(type, listener, useCapture);\n  }\n  removeAllEventListeners(type = null) {\n    if (type) {\n      if (this._listeners) {\n        delete this._listeners[type];\n      }\n      if (this._captureListeners) {\n        delete this._captureListeners[type];\n      }\n    } else {\n      this._listeners = this._captureListeners = null;\n    }\n  }\n  dispatchEvent(eventObj, bubbles = false, cancelable = false) {\n    if (typeof eventObj === \"string\") {\n      const listeners = this._listeners;\n      if (!bubbles && (!listeners || !listeners[eventObj])) {\n        return true;\n      }\n      eventObj = new Event(eventObj, bubbles, cancelable);\n    } else if (eventObj.target && eventObj.clone) {\n      eventObj = eventObj.clone();\n    }\n    try {\n      eventObj.target = this;\n    } catch (e) {}\n    if (!eventObj.bubbles || !this.parent) {\n      this._dispatchEvent(eventObj, 2);\n    } else {\n      let top = this;\n      const list = [ top ];\n      while (top.parent) {\n        list.push(top = top.parent);\n      }\n      const l = list.length;\n      let i;\n      for (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {\n        list[i]._dispatchEvent(eventObj, 1 + (i == 0));\n      }\n      for (i = 1; i < l && !eventObj.propagationStopped; i++) {\n        list[i]._dispatchEvent(eventObj, 3);\n      }\n    }\n    return !eventObj.defaultPrevented;\n  }\n  hasEventListener(type) {\n    const listeners = this._listeners, captureListeners = this._captureListeners;\n    return !!(listeners && listeners[type] || captureListeners && captureListeners[type]);\n  }\n  willTrigger(type) {\n    let o = this;\n    while (o) {\n      if (o.hasEventListener(type)) {\n        return true;\n      }\n      o = o.parent;\n    }\n    return false;\n  }\n  toString() {\n    return `[${this.constructor.name + this.name ? ` ${this.name}` : \"\"}]`;\n  }\n  _dispatchEvent(eventObj, eventPhase) {\n    const listeners = eventPhase === 1 ? this._captureListeners : this._listeners;\n    if (eventObj && listeners) {\n      let arr = listeners[eventObj.type];\n      let l;\n      if (!arr || (l = arr.length) === 0) {\n        return;\n      }\n      try {\n        eventObj.currentTarget = this;\n      } catch (e) {}\n      try {\n        eventObj.eventPhase = eventPhase;\n      } catch (e) {}\n      eventObj.removed = false;\n      arr = arr.slice();\n      for (let i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {\n        let o = arr[i];\n        if (o.handleEvent) {\n          o.handleEvent(eventObj);\n        } else {\n          o(eventObj);\n        }\n        if (eventObj.removed) {\n          this.off(eventObj.type, o, eventPhase === 1);\n          eventObj.removed = false;\n        }\n      }\n    }\n  }\n}\n\nlet _nextID = 0;\n\nclass UID {\n  constructor() {\n    throw \"UID cannot be instantiated\";\n  }\n  static get _nextID() {\n    return _nextID;\n  }\n  static set _nextID(nextID) {\n    _nextID = nextID;\n  }\n  static get() {\n    return UID._nextID++;\n  }\n}\n\nclass Point {\n  constructor(x = 0, y = 0) {\n    this.setValues(x, y);\n  }\n  setValues(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  copy(point) {\n    this.x = point.x;\n    this.y = point.y;\n    return this;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  toString() {\n    return `[${this.constructor.name} (x=${this.x} y=${this.y})]`;\n  }\n}\n\nclass Matrix2D {\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.setValues(a, b, c, d, tx, ty);\n  }\n  setValues(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  }\n  append(a, b, c, d, tx, ty) {\n    let a1 = this.a;\n    let b1 = this.b;\n    let c1 = this.c;\n    let d1 = this.d;\n    if (a != 1 || b != 0 || c != 0 || d != 1) {\n      this.a = a1 * a + c1 * b;\n      this.b = b1 * a + d1 * b;\n      this.c = a1 * c + c1 * d;\n      this.d = b1 * c + d1 * d;\n    }\n    this.tx = a1 * tx + c1 * ty + this.tx;\n    this.ty = b1 * tx + d1 * ty + this.ty;\n    return this;\n  }\n  prepend(a, b, c, d, tx, ty) {\n    let a1 = this.a;\n    let c1 = this.c;\n    let tx1 = this.tx;\n    this.a = a * a1 + c * this.b;\n    this.b = b * a1 + d * this.b;\n    this.c = a * c1 + c * this.d;\n    this.d = b * c1 + d * this.d;\n    this.tx = a * tx1 + c * this.ty + tx;\n    this.ty = b * tx1 + d * this.ty + ty;\n    return this;\n  }\n  appendMatrix(matrix) {\n    return this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  }\n  prependMatrix(matrix) {\n    return this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  }\n  appendTransform(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    let r, cos, sin;\n    if (rotation % 360) {\n      r = rotation * Matrix2D.DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    if (skewX || skewY) {\n      skewX *= Matrix2D.DEG_TO_RAD;\n      skewY *= Matrix2D.DEG_TO_RAD;\n      this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n    } else {\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n    if (regX || regY) {\n      this.tx -= regX * this.a + regY * this.c;\n      this.ty -= regX * this.b + regY * this.d;\n    }\n    return this;\n  }\n  prependTransform(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    let r, cos, sin;\n    if (rotation % 360) {\n      r = rotation * Matrix2D.DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    if (regX || regY) {\n      this.tx -= regX;\n      this.ty -= regY;\n    }\n    if (skewX || skewY) {\n      skewX *= Matrix2D.DEG_TO_RAD;\n      skewY *= Matrix2D.DEG_TO_RAD;\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n      this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n    } else {\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n    return this;\n  }\n  rotate(angle) {\n    angle *= Matrix2D.DEG_TO_RAD;\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    let a1 = this.a;\n    let b1 = this.b;\n    this.a = a1 * cos + this.c * sin;\n    this.b = b1 * cos + this.d * sin;\n    this.c = -a1 * sin + this.c * cos;\n    this.d = -b1 * sin + this.d * cos;\n    return this;\n  }\n  skew(skewX, skewY) {\n    skewX *= Matrix2D.DEG_TO_RAD;\n    skewY *= Matrix2D.DEG_TO_RAD;\n    this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\n    return this;\n  }\n  scale(x, y) {\n    this.a *= x;\n    this.b *= x;\n    this.c *= y;\n    this.d *= y;\n    return this;\n  }\n  translate(x, y) {\n    this.tx += this.a * x + this.c * y;\n    this.ty += this.b * x + this.d * y;\n    return this;\n  }\n  identity() {\n    this.a = this.d = 1;\n    this.b = this.c = this.tx = this.ty = 0;\n    return this;\n  }\n  invert() {\n    let a1 = this.a;\n    let b1 = this.b;\n    let c1 = this.c;\n    let d1 = this.d;\n    let tx1 = this.tx;\n    let n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  }\n  isIdentity() {\n    return this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;\n  }\n  equals(matrix) {\n    return this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;\n  }\n  transformPoint(x, y, pt = new Point()) {\n    pt.x = x * this.a + y * this.c + this.tx;\n    pt.y = x * this.b + y * this.d + this.ty;\n    return pt;\n  }\n  decompose(target = {}) {\n    target.x = this.tx;\n    target.y = this.ty;\n    target.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);\n    target.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);\n    let skewX = Math.atan2(-this.c, this.d);\n    let skewY = Math.atan2(this.b, this.a);\n    let delta = Math.abs(1 - skewX / skewY);\n    if (delta < 1e-5) {\n      target.rotation = skewY / Matrix2D.DEG_TO_RAD;\n      if (this.a < 0 && this.d >= 0) {\n        target.rotation += target.rotation <= 0 ? 180 : -180;\n      }\n      target.skewX = target.skewY = 0;\n    } else {\n      target.skewX = skewX / Matrix2D.DEG_TO_RAD;\n      target.skewY = skewY / Matrix2D.DEG_TO_RAD;\n    }\n    return target;\n  }\n  copy(matrix) {\n    return this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  }\n  clone() {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n  }\n  toString() {\n    return `[${this.constructor.name} (a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty})]`;\n  }\n}\n\n{\n  Matrix2D.DEG_TO_RAD = Math.PI / 180;\n  Matrix2D.identity = new Matrix2D();\n}\n\nclass DisplayProps {\n  constructor(visible = true, alpha = 1, shadow, compositeOperation, matrix) {\n    this.setValues(visible, alpha, shadow, compositeOperation, matrix);\n  }\n  setValues(visible = true, alpha = 1, shadow, compositeOperation, matrix) {\n    this.visible = visible;\n    this.alpha = alpha;\n    this.shadow = shadow;\n    this.compositeOperation = compositeOperation;\n    this.matrix = matrix || this.matrix && this.matrix.identity() || new Matrix2D();\n    return this;\n  }\n  append(visible, alpha, shadow, compositeOperation, matrix) {\n    this.alpha *= alpha;\n    this.shadow = shadow || this.shadow;\n    this.compositeOperation = compositeOperation || this.compositeOperation;\n    this.visible = this.visible && visible;\n    matrix && this.matrix.appendMatrix(matrix);\n    return this;\n  }\n  prepend(visible, alpha, shadow, compositeOperation, matrix) {\n    this.alpha *= alpha;\n    this.shadow = this.shadow || shadow;\n    this.compositeOperation = this.compositeOperation || compositeOperation;\n    this.visible = this.visible && visible;\n    matrix && this.matrix.prependMatrix(matrix);\n    return this;\n  }\n  identity() {\n    this.visible = true;\n    this.alpha = 1;\n    this.shadow = this.compositeOperation = null;\n    this.matrix.identity();\n    return this;\n  }\n  clone() {\n    return new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());\n  }\n}\n\nclass Rectangle {\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.setValues(x, y, width, height);\n  }\n  setValues(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n  extend(x, y, width = 0, height = 0) {\n    if (x + width > this.x + this.width) {\n      this.width = x + width - this.x;\n    }\n    if (y + height > this.y + this.height) {\n      this.height = y + height - this.y;\n    }\n    if (x < this.x) {\n      this.width += this.x - x;\n      this.x = x;\n    }\n    if (y < this.y) {\n      this.height += this.y - y;\n      this.y = y;\n    }\n    return this;\n  }\n  pad(top, left, bottom, right) {\n    this.x -= left;\n    this.y -= top;\n    this.width += left + right;\n    this.height += top + bottom;\n    return this;\n  }\n  copy(rectangle) {\n    return this.setValues(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n  }\n  contains(x, y, width = 0, height = 0) {\n    return x >= this.x && x + width <= this.x + this.width && y >= this.y && y + height <= this.y + this.height;\n  }\n  union(rect) {\n    return this.clone().extend(rect.x, rect.y, rect.width, rect.height);\n  }\n  intersection(rect) {\n    let x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height;\n    if (this.x > x1) {\n      x1 = this.x;\n    }\n    if (this.y > y1) {\n      y1 = this.y;\n    }\n    if (this.x + this.width < x2) {\n      x2 = this.x + this.width;\n    }\n    if (this.y + this.height < y2) {\n      y2 = this.y + this.height;\n    }\n    return x2 <= x1 || y2 <= y1 ? null : new Rectangle(x1, y1, x2 - x1, y2 - y1);\n  }\n  intersects(rect) {\n    return rect.x <= this.x + this.width && this.x <= rect.x + rect.width && rect.y <= this.y + this.height && this.y <= rect.y + rect.height;\n  }\n  isEmpty() {\n    return this.width <= 0 || this.height <= 0;\n  }\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n  toString() {\n    return `[${this.constructor.name} (x=${this.x} y=${this.y} width=${this.width} height=${this.height})]`;\n  }\n}\n\nclass Filter {\n  constructor() {\n    this.usesContext = false;\n    this._multiPass = null;\n    this.VTX_SHADER_BODY = null;\n    this.FRAG_SHADER_BODY = null;\n  }\n  getBounds(rect) {\n    return rect;\n  }\n  shaderParamSetup(gl, stage, shaderProgram) {}\n  applyFilter(ctx, x, y, width, height, targetCtx, targetX, targetY) {\n    targetCtx = targetCtx || ctx;\n    if (targetX == null) {\n      targetX = x;\n    }\n    if (targetY == null) {\n      targetY = y;\n    }\n    try {\n      let imageData = ctx.getImageData(x, y, width, height);\n      if (this._applyFilter(imageData)) {\n        targetCtx.putImageData(imageData, targetX, targetY);\n        return true;\n      }\n    } catch (e) {}\n    return false;\n  }\n  toString() {\n    return `[${this.constructor.name}]`;\n  }\n  clone() {\n    return new Filter();\n  }\n  _applyFilter(imageData) {\n    return true;\n  }\n}\n\nclass BitmapCache extends Filter {\n  constructor() {\n    super();\n    this.width = undefined;\n    this.height = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.scale = 1;\n    this.offX = 0;\n    this.offY = 0;\n    this.cacheID = 0;\n    this._filterOffX = 0;\n    this._filterOffY = 0;\n    this._cacheDataURLID = 0;\n    this._cacheDataURL = null;\n    this._drawWidth = 0;\n    this._drawHeight = 0;\n    this._boundRect = new Rectangle();\n  }\n  static getFilterBounds(target, output = new Rectangle()) {\n    let filters = target.filters;\n    let filterCount = filters && filters.length;\n    if (!!filterCount <= 0) {\n      return output;\n    }\n    for (let i = 0; i < filterCount; i++) {\n      let f = filters[i];\n      if (!f || !f.getBounds) {\n        continue;\n      }\n      let test = f.getBounds();\n      if (!test) {\n        continue;\n      }\n      if (i == 0) {\n        output.setValues(test.x, test.y, test.width, test.height);\n      } else {\n        output.extend(test.x, test.y, test.width, test.height);\n      }\n    }\n    return output;\n  }\n  define(target, x = 0, y = 0, width = 1, height = 1, scale = 1, options) {\n    if (!target) {\n      throw \"No symbol to cache\";\n    }\n    this._options = options;\n    this._useWebGL = options !== undefined;\n    this.target = target;\n    this.width = width >= 1 ? width : 1;\n    this.height = height >= 1 ? height : 1;\n    this.x = x;\n    this.y = y;\n    this.scale = scale;\n    this.update();\n  }\n  update(compositeOperation) {\n    if (!this.target) {\n      throw \"define() must be called before update()\";\n    }\n    let filterBounds = BitmapCache.getFilterBounds(this.target);\n    let surface = this.target.cacheCanvas;\n    this._drawWidth = Math.ceil(this.width * this.scale) + filterBounds.width;\n    this._drawHeight = Math.ceil(this.height * this.scale) + filterBounds.height;\n    if (!surface || this._drawWidth != surface.width || this._drawHeight != surface.height) {\n      this._updateSurface();\n    }\n    this._filterOffX = filterBounds.x;\n    this._filterOffY = filterBounds.y;\n    this.offX = this.x * this.scale + this._filterOffX;\n    this.offY = this.y * this.scale + this._filterOffY;\n    this._drawToCache(compositeOperation);\n    this.cacheID = this.cacheID ? this.cacheID + 1 : 1;\n  }\n  release() {\n    let stage = this.target.stage;\n    if (this._useWebGL && this._webGLCache) {\n      if (!this._webGLCache.isCacheControlled) {\n        if (this.__lastRT) {\n          this.__lastRT = undefined;\n        }\n        if (this.__rtA) {\n          this._webGLCache._killTextureObject(this.__rtA);\n        }\n        if (this.__rtB) {\n          this._webGLCache._killTextureObject(this.__rtB);\n        }\n        if (this.target && this.target.cacheCanvas) {\n          this._webGLCache._killTextureObject(this.target.cacheCanvas);\n        }\n      }\n      this._webGLCache = false;\n    } else if (stage instanceof StageGL) {\n      stage.releaseTexture(this.target.cacheCanvas);\n    }\n    this.target = this.target.cacheCanvas = null;\n    this.cacheID = this._cacheDataURLID = this._cacheDataURL = undefined;\n    this.width = this.height = this.x = this.y = this.offX = this.offY = 0;\n    this.scale = 1;\n  }\n  getCacheDataURL() {\n    let cacheCanvas = this.target && this.target.cacheCanvas;\n    if (!cacheCanvas) {\n      return null;\n    }\n    if (this.cacheID != this._cacheDataURLID) {\n      this._cacheDataURLID = this.cacheID;\n      this._cacheDataURL = cacheCanvas.toDataURL ? cacheCanvas.toDataURL() : null;\n    }\n    return this._cacheDataURL;\n  }\n  draw(ctx) {\n    if (!this.target) {\n      return false;\n    }\n    ctx.drawImage(this.target.cacheCanvas, this.x + this._filterOffX / this.scale, this.y + this._filterOffY / this.scale, this._drawWidth / this.scale, this._drawHeight / this.scale);\n    return true;\n  }\n  getBounds() {\n    const scale = this.scale;\n    return this._boundRect.setValue(this._filterOffX / scale, this._filterOffY / scale, this.width / scale, this.height / scale);\n  }\n  _updateSurface() {\n    let surface;\n    if (!this._useWebGL) {\n      surface = this.target.cacheCanvas;\n      if (!surface) {\n        surface = this.target.cacheCanvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n      }\n      surface.width = this._drawWidth;\n      surface.height = this._drawHeight;\n      return;\n    }\n    if (!this._webGLCache) {\n      if (this._options.useGL === \"stage\") {\n        if (!(this.target.stage != null && this.target.stage.isWebGL)) {\n          throw `Cannot use 'stage' for cache because the object's parent stage is ${this.target.stage != null ? \"non WebGL.\" : \"not set, please addChild to the correct stage.\"}`;\n        }\n        this.target.cacheCanvas = true;\n        this._webGLCache = this.target.stage;\n      } else if (this._options.useGL === \"new\") {\n        this.target.cacheCanvas = document.createElement(\"canvas\");\n        this._webGLCache = new StageGL(this.target.cacheCanvas, {\n          antialias: true,\n          transparent: true,\n          autoPurge: -1\n        });\n        this._webGLCache.isCacheControlled = true;\n      } else {\n        throw \"Invalid option provided to useGL, expected ['stage', 'new', StageGL, undefined], got \" + this._options.useGL;\n      }\n    }\n    let stageGL = this._webGLCache;\n    surface = this.target.cacheCanvas;\n    if (stageGL.isCacheControlled) {\n      surface.width = this._drawWidth;\n      surface.height = this._drawHeight;\n      stageGL.updateViewport(this._drawWidth, this._drawHeight);\n    }\n    if (this.target.filters) {\n      stageGL.getTargetRenderTexture(this.target, this._drawWidth, this._drawHeight);\n      stageGL.getTargetRenderTexture(this.target, this._drawWidth, this._drawHeight);\n    } else if (!stageGL.isCacheControlled) {\n      stageGL.getTargetRenderTexture(this.target, this._drawWidth, this._drawHeight);\n    }\n  }\n  _drawToCache(compositeOperation) {\n    let target = this.target;\n    let surface = target.cacheCanvas;\n    let webGL = this._webGLCache;\n    if (!this._useWebGL || !webGL) {\n      let ctx = surface.getContext(\"2d\");\n      if (!compositeOperation) {\n        ctx.clearRect(0, 0, this._drawWidth + 1, this._drawHeight + 1);\n      }\n      ctx.save();\n      ctx.globalCompositeOperation = compositeOperation;\n      ctx.setTransform(this.scale, 0, 0, this.scale, -this._filterOffX, -this._filterOffY);\n      ctx.translate(-this.x, -this.y);\n      target.draw(ctx, true);\n      ctx.restore();\n      if (target.filters && target.filters.length) {\n        this._applyFilters(target);\n      }\n      surface._invalid = true;\n      return;\n    }\n    this._webGLCache.cacheDraw(target, target.filters, this);\n    surface = this.target.cacheCanvas;\n    surface.width = this._drawWidth;\n    surface.height = this._drawHeight;\n    surface._invalid = true;\n  }\n  _applyFilters() {\n    let surface = this.target.cacheCanvas;\n    let filters = this.target.filters;\n    let w = this._drawWidth;\n    let h = this._drawHeight;\n    let data = surface.getContext(\"2d\").getImageData(0, 0, w, h);\n    let l = filters.length;\n    for (let i = 0; i < l; i++) {\n      filters[i]._applyFilter(data);\n    }\n    surface.getContext(\"2d\").putImageData(data, 0, 0);\n  }\n}\n\nclass DisplayObject extends EventDispatcher {\n  constructor() {\n    super();\n    this.alpha = 1;\n    this.cacheCanvas = null;\n    this.bitmapCache = null;\n    this.id = UID.get();\n    this.mouseEnabled = true;\n    this.tickEnabled = true;\n    this.name = null;\n    this.parent = null;\n    this.regX = 0;\n    this.regY = 0;\n    this.rotation = 0;\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.skewX = 0;\n    this.skewY = 0;\n    this.shadow = null;\n    this.visible = true;\n    this.x = 0;\n    this.y = 0;\n    this.transformMatrix = null;\n    this.compositeOperation = null;\n    this.snapToPixel = true;\n    this.filters = null;\n    this.mask = null;\n    this.hitArea = null;\n    this.cursor = null;\n    this._props = new DisplayProps();\n    this._rectangle = new Rectangle();\n    this._bounds = null;\n    this._webGLRenderStyle = DisplayObject._StageGL_NONE;\n  }\n  get stage() {\n    let o = this;\n    while (o.parent) {\n      o = o.parent;\n    }\n    if (/^\\[Stage(GL)?(\\s\\(name=\\w+\\))?\\]$/.test(o.toString())) {\n      return o;\n    }\n    return null;\n  }\n  get scale() {\n    return this.scaleX;\n  }\n  set scale(value) {\n    this.scaleX = this.scaleY = value;\n  }\n  isVisible() {\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n  }\n  draw(ctx, ignoreCache = false) {\n    return this.drawCache(ctx, ignoreCache);\n  }\n  drawCache(ctx, ignoreCache = false) {\n    let cache = this.bitmapCache;\n    if (cache && !ignoreCache) {\n      return cache.draw(ctx);\n    }\n    return false;\n  }\n  updateContext(ctx) {\n    let o = this, mask = o.mask, mtx = o._props.matrix;\n    if (mask && mask.graphics && !mask.graphics.isEmpty()) {\n      mask.getMatrix(mtx);\n      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n      mask.graphics.drawAsPath(ctx);\n      ctx.clip();\n      mtx.invert();\n      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n    }\n    this.getMatrix(mtx);\n    let tx = mtx.tx, ty = mtx.ty;\n    if (DisplayObject._snapToPixelEnabled && o.snapToPixel) {\n      tx = tx + (tx < 0 ? -.5 : .5) | 0;\n      ty = ty + (ty < 0 ? -.5 : .5) | 0;\n    }\n    ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, tx, ty);\n    ctx.globalAlpha *= o.alpha;\n    if (o.compositeOperation) {\n      ctx.globalCompositeOperation = o.compositeOperation;\n    }\n    if (o.shadow) {\n      this._applyShadow(ctx, o.shadow);\n    }\n  }\n  cache(x, y, width, height, scale = 1, options) {\n    if (!this.bitmapCache) {\n      this.bitmapCache = new BitmapCache();\n    }\n    this.bitmapCache.define(this, x, y, width, height, scale, options);\n  }\n  updateCache(compositeOperation) {\n    if (!this.bitmapCache) {\n      throw \"cache() must be called before updateCache()\";\n    }\n    this.bitmapCache.update(compositeOperation);\n  }\n  uncache() {\n    if (this.bitmapCache) {\n      this.bitmapCache.release();\n      this.bitmapCache = undefined;\n    }\n  }\n  getCacheDataURL() {\n    return this.bitmapCache ? this.bitmapCache.getDataURL() : null;\n  }\n  localToGlobal(x, y, pt = new Point()) {\n    return this.getConcatenatedMatrix(this._props.matrix).transformPoint(x, y, pt);\n  }\n  globalToLocal(x, y, pt = new Point()) {\n    return this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x, y, pt);\n  }\n  localToLocal(x, y, target, pt) {\n    pt = this.localToGlobal(x, y, pt);\n    return target.globalToLocal(pt.x, pt.y, pt);\n  }\n  setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, regX = 0, regY = 0) {\n    this.x = x;\n    this.y = y;\n    this.scaleX = scaleX;\n    this.scaleY = scaleY;\n    this.rotation = rotation;\n    this.skewX = skewX;\n    this.skewY = skewY;\n    this.regX = regX;\n    this.regY = regY;\n    return this;\n  }\n  getMatrix(matrix) {\n    let o = this, mtx = matrix && matrix.identity() || new Matrix2D();\n    return o.transformMatrix ? mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n  }\n  getConcatenatedMatrix(matrix) {\n    let o = this, mtx = this.getMatrix(matrix);\n    while (o = o.parent) {\n      mtx.prependMatrix(o.getMatrix(o._props.matrix));\n    }\n    return mtx;\n  }\n  getConcatenatedDisplayProps(props) {\n    props = props ? props.identity() : new DisplayProps();\n    let o = this, mtx = o.getMatrix(props.matrix);\n    do {\n      props.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation);\n      if (o != this) {\n        mtx.prependMatrix(o.getMatrix(o._props.matrix));\n      }\n    } while (o = o.parent);\n    return props;\n  }\n  hitTest(x, y) {\n    let ctx = DisplayObject._hitTestContext;\n    ctx.setTransform(1, 0, 0, 1, -x, -y);\n    this.draw(ctx);\n    let hit = this._testHit(ctx);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, 2, 2);\n    return hit;\n  }\n  set(props) {\n    for (let n in props) {\n      this[n] = props[n];\n    }\n    return this;\n  }\n  getBounds() {\n    if (this._bounds) {\n      return this._rectangle.copy(this._bounds);\n    }\n    let cacheCanvas = this.cacheCanvas;\n    if (cacheCanvas) {\n      let scale = this._cacheScale;\n      return this._rectangle.setValues(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width / scale, cacheCanvas.height / scale);\n    }\n    return null;\n  }\n  getTransformedBounds() {\n    return this._getBounds();\n  }\n  setBounds(x, y, width, height) {\n    if (x == null) {\n      this._bounds = x;\n    }\n    this._bounds = (this._bounds || new Rectangle()).setValues(x, y, width, height);\n  }\n  clone() {\n    return this._cloneProps(new DisplayObject());\n  }\n  toString() {\n    return `[${this.constructor.name}${this.name ? ` (name=${this.name})` : \"\"}]`;\n  }\n  _cloneProps(o) {\n    o.alpha = this.alpha;\n    o.mouseEnabled = this.mouseEnabled;\n    o.tickEnabled = this.tickEnabled;\n    o.name = this.name;\n    o.regX = this.regX;\n    o.regY = this.regY;\n    o.rotation = this.rotation;\n    o.scaleX = this.scaleX;\n    o.scaleY = this.scaleY;\n    o.shadow = this.shadow;\n    o.skewX = this.skewX;\n    o.skewY = this.skewY;\n    o.visible = this.visible;\n    o.x = this.x;\n    o.y = this.y;\n    o.compositeOperation = this.compositeOperation;\n    o.snapToPixel = this.snapToPixel;\n    o.filters = this.filters == null ? null : this.filters.slice(0);\n    o.mask = this.mask;\n    o.hitArea = this.hitArea;\n    o.cursor = this.cursor;\n    o._bounds = this._bounds;\n    return o;\n  }\n  _applyShadow(ctx, shadow = Shadow.identity) {\n    shadow = shadow;\n    ctx.shadowColor = shadow.color;\n    ctx.shadowOffsetX = shadow.offsetX;\n    ctx.shadowOffsetY = shadow.offsetY;\n    ctx.shadowBlur = shadow.blur;\n  }\n  _tick(evtObj) {\n    let ls = this._listeners;\n    if (ls && ls[\"tick\"]) {\n      evtObj.target = null;\n      evtObj.propagationStopped = evtObj.immediatePropagationStopped = false;\n      this.dispatchEvent(evtObj);\n    }\n  }\n  _testHit(ctx) {\n    try {\n      return ctx.getImageData(0, 0, 1, 1).data[3] > 1;\n    } catch (e) {\n      if (!DisplayObject.suppressCrossDomainErrors) {\n        throw \"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.\";\n      }\n      return false;\n    }\n  }\n  _getBounds(matrix, ignoreTransform) {\n    return this._transformBounds(this.getBounds(), matrix, ignoreTransform);\n  }\n  _transformBounds(bounds, matrix, ignoreTransform) {\n    if (!bounds) {\n      return bounds;\n    }\n    let {x: x, y: y, width: width, height: height} = bounds;\n    let mtx = this._props.matrix;\n    mtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n    if (x || y) {\n      mtx.appendTransform(0, 0, 1, 1, 0, 0, 0, -x, -y);\n    }\n    if (matrix) {\n      mtx.prependMatrix(matrix);\n    }\n    let x_a = width * mtx.a, x_b = width * mtx.b;\n    let y_c = height * mtx.c, y_d = height * mtx.d;\n    let tx = mtx.tx, ty = mtx.ty;\n    let minX = tx, maxX = tx, minY = ty, maxY = ty;\n    if ((x = x_a + tx) < minX) {\n      minX = x;\n    } else if (x > maxX) {\n      maxX = x;\n    }\n    if ((x = x_a + y_c + tx) < minX) {\n      minX = x;\n    } else if (x > maxX) {\n      maxX = x;\n    }\n    if ((x = y_c + tx) < minX) {\n      minX = x;\n    } else if (x > maxX) {\n      maxX = x;\n    }\n    if ((y = x_b + ty) < minY) {\n      minY = y;\n    } else if (y > maxY) {\n      maxY = y;\n    }\n    if ((y = x_b + y_d + ty) < minY) {\n      minY = y;\n    } else if (y > maxY) {\n      maxY = y;\n    }\n    if ((y = y_d + ty) < minY) {\n      minY = y;\n    } else if (y > maxY) {\n      maxY = y;\n    }\n    return bounds.setValues(minX, minY, maxX - minX, maxY - minY);\n  }\n  _hasMouseEventListener() {\n    let evts = DisplayObject._MOUSE_EVENTS;\n    for (let i = 0, l = evts.length; i < l; i++) {\n      if (this.hasEventListener(evts[i])) {\n        return true;\n      }\n    }\n    return !!this.cursor;\n  }\n}\n\n{\n  let canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n  if (canvas.getContext) {\n    DisplayObject._hitTestCanvas = canvas;\n    DisplayObject._hitTestContext = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  }\n  DisplayObject._MOUSE_EVENTS = [ \"click\", \"dblclick\", \"mousedown\", \"mouseout\", \"mouseover\", \"pressmove\", \"pressup\", \"rollout\", \"rollover\" ];\n  DisplayObject.suppressCrossDomainErrors = false;\n  DisplayObject.snapToPixelEnabled = false;\n  DisplayObject._StageGL_NONE = 0;\n  DisplayObject._StageGL_SPRITE = 1;\n  DisplayObject._StageGL_BITMAP = 2;\n}\n\nclass Container extends DisplayObject {\n  constructor() {\n    super();\n    this.children = [];\n    this.mouseChildren = true;\n    this.tickChildren = true;\n  }\n  get numChildren() {\n    return this.children.length;\n  }\n  isVisible() {\n    let hasContent = this.cacheCanvas || this.children.length;\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  }\n  draw(ctx, ignoreCache = false) {\n    if (super.draw(ctx, ignoreCache)) {\n      return true;\n    }\n    let list = this.children.slice();\n    for (let i = 0, l = list.length; i < l; i++) {\n      let child = list[i];\n      if (!child.isVisible()) {\n        continue;\n      }\n      ctx.save();\n      child.updateContext(ctx);\n      child.draw(ctx);\n      ctx.restore();\n    }\n    return true;\n  }\n  addChild(...children) {\n    const l = children.length;\n    if (l === 0) {\n      return null;\n    }\n    let child = children[0];\n    if (l > 1) {\n      for (let i = 0; i < l; i++) {\n        child = this.addChild(children[i]);\n      }\n      return child;\n    }\n    let parent = child.parent, silent = parent === this;\n    parent && parent._removeChildAt(parent.children.indexOf(child), silent);\n    child.parent = this;\n    this.children.push(child);\n    if (!silent) {\n      child.dispatchEvent(\"added\");\n    }\n    return child;\n  }\n  addChildAt(...children) {\n    const l = children.length;\n    if (l === 0) {\n      return null;\n    }\n    let index = children.pop();\n    if (index < 0 || index > this.children.length) {\n      return children[l - 2];\n    }\n    if (l > 2) {\n      for (let i = 0; i < l - 1; i++) {\n        this.addChildAt(children[i], index++);\n      }\n      return children[l - 2];\n    }\n    let child = children[0];\n    let parent = child.parent, silent = parent === this;\n    parent && parent._removeChildAt(parent.children.indexOf(child), silent);\n    child.parent = this;\n    this.children.splice(index++, 0, child);\n    if (!silent) {\n      child.dispatchEvent(\"added\");\n    }\n    return child;\n  }\n  removeChild(...children) {\n    const l = children.length;\n    if (l === 0) {\n      return true;\n    }\n    if (l > 1) {\n      let good = true;\n      for (let i = 0; i < l; i++) {\n        good = good && this.removeChild(children[i]);\n      }\n      return good;\n    }\n    return this._removeChildAt(this.children.indexOf(children[0]));\n  }\n  removeChildAt(...indexes) {\n    const l = indexes.length;\n    if (l === 0) {\n      return true;\n    }\n    if (l > 1) {\n      indexes.sort((a, b) => b - a);\n      let good = true;\n      for (let i = 0; i < l; i++) {\n        good = good && this._removeChildAt(indexes[i]);\n      }\n      return good;\n    }\n    return this._removeChildAt(indexes[0]);\n  }\n  removeAllChildren() {\n    let kids = this.children;\n    while (kids.length) {\n      this._removeChildAt(0);\n    }\n  }\n  getChildAt(index) {\n    return this.children[index];\n  }\n  getChildByName(name) {\n    let kids = this.children;\n    const l = kids.length;\n    for (let i = 0; i < l; i++) {\n      if (kids[i].name === name) {\n        return kids[i];\n      }\n    }\n    return null;\n  }\n  sortChildren(sortFunction) {\n    this.children.sort(sortFunction);\n  }\n  getChildIndex(child) {\n    return this.children.indexOf(child);\n  }\n  swapChildrenAt(index1, index2) {\n    let kids = this.children;\n    let o1 = kids[index1];\n    let o2 = kids[index2];\n    if (!o1 || !o2) {\n      return;\n    }\n    kids[index1] = o2;\n    kids[index2] = o1;\n  }\n  swapChildren(child1, child2) {\n    let kids = this.children;\n    const l = kids.length;\n    let index1, index2;\n    for (var i = 0; i < l; i++) {\n      if (kids[i] === child1) {\n        index1 = i;\n      }\n      if (kids[i] === child2) {\n        index2 = i;\n      }\n      if (index1 != null && index2 != null) {\n        break;\n      }\n    }\n    if (i === l) {\n      return;\n    }\n    kids[index1] = child2;\n    kids[index2] = child1;\n  }\n  setChildIndex(child, index) {\n    let kids = this.children;\n    const l = kids.length;\n    if (child.parent != this || index < 0 || index >= l) {\n      return;\n    }\n    for (var i = 0; i < l; i++) {\n      if (kids[i] === child) {\n        break;\n      }\n    }\n    if (i === l || i === index) {\n      return;\n    }\n    kids.splice(i, 1);\n    kids.splice(index, 0, child);\n  }\n  contains(child) {\n    while (child) {\n      if (child === this) {\n        return true;\n      }\n      child = child.parent;\n    }\n    return false;\n  }\n  hitTest(x, y) {\n    return this.getObjectUnderPoint(x, y) != null;\n  }\n  getObjectsUnderPoint(x, y, mode = 0) {\n    let arr = [];\n    let pt = this.localToGlobal(x, y);\n    this._getObjectsUnderPoint(pt.x, pt.y, arr, mode > 0, mode === 1);\n    return arr;\n  }\n  getObjectUnderPoint(x, y, mode = 0) {\n    let pt = this.localToGlobal(x, y);\n    return this._getObjectsUnderPoint(pt.x, pt.y, null, mode > 0, mode === 1);\n  }\n  getBounds() {\n    return this._getBounds(null, true);\n  }\n  getTransformedBounds() {\n    return this._getBounds();\n  }\n  clone(recursive = false) {\n    let o = this._cloneProps(new Container());\n    if (recursive) {\n      this._cloneChildren(o);\n    }\n    return o;\n  }\n  _tick(evtObj) {\n    if (this.tickChildren) {\n      for (let i = this.children.length - 1; i >= 0; i--) {\n        let child = this.children[i];\n        if (child.tickEnabled && child._tick) {\n          child._tick(evtObj);\n        }\n      }\n    }\n    super._tick(evtObj);\n  }\n  _cloneChildren(o) {\n    if (o.children.length) {\n      o.removeAllChildren();\n    }\n    let arr = o.children;\n    const l = this.children.length;\n    for (let i = 0; i < l; i++) {\n      let clone = this.children[i].clone(true);\n      clone.parent = o;\n      arr.push(clone);\n    }\n  }\n  _removeChildAt(index, silent = false) {\n    if (index < 0 || index > this.children.length - 1) {\n      return false;\n    }\n    let child = this.children[index];\n    if (child) {\n      child.parent = null;\n    }\n    this.children.splice(index, 1);\n    if (!silent) {\n      child.dispatchEvent(\"removed\");\n    }\n    return true;\n  }\n  _getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth = 0) {\n    if (!currentDepth && !this._testMask(this, x, y)) {\n      return null;\n    }\n    let mtx, ctx = DisplayObject._hitTestContext;\n    activeListener = activeListener || mouse && this._hasMouseEventListener();\n    let children = this.children;\n    const l = children.length;\n    for (let i = l - 1; i >= 0; i--) {\n      let child = children[i];\n      let hitArea = child.hitArea;\n      if (!child.visible || !hitArea && !child.isVisible() || mouse && !child.mouseEnabled) {\n        continue;\n      }\n      if (!hitArea && !this._testMask(child, x, y)) {\n        continue;\n      }\n      if (!hitArea && child instanceof Container) {\n        let result = child._getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth + 1);\n        if (!arr && result) {\n          return mouse && !this.mouseChildren ? this : result;\n        }\n      } else {\n        if (mouse && !activeListener && !child._hasMouseEventListener()) {\n          continue;\n        }\n        let props = child.getConcatenatedDisplayProps(child._props);\n        mtx = props.matrix;\n        if (hitArea) {\n          mtx.appendMatrix(hitArea.getMatrix(hitArea._props.matrix));\n          props.alpha = hitArea.alpha;\n        }\n        ctx.globalAlpha = props.alpha;\n        ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx - x, mtx.ty - y);\n        (hitArea || child).draw(ctx);\n        if (!this._testHit(ctx)) {\n          continue;\n        }\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.clearRect(0, 0, 2, 2);\n        if (arr) {\n          arr.push(child);\n        } else {\n          return mouse && !this.mouseChildren ? this : child;\n        }\n      }\n    }\n    return null;\n  }\n  _testMask(target, x, y) {\n    let mask = target.mask;\n    if (!mask || !mask.graphics || mask.graphics.isEmpty()) {\n      return true;\n    }\n    let mtx = this._props.matrix, parent = target.parent;\n    mtx = parent ? parent.getConcatenatedMatrix(mtx) : mtx.identity();\n    mtx = mask.getMatrix(mask._props.matrix).prependMatrix(mtx);\n    let ctx = DisplayObject._hitTestContext;\n    ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx - x, mtx.ty - y);\n    mask.graphics.drawAsPath(ctx);\n    ctx.fillStyle = \"#000\";\n    ctx.fill();\n    if (!this._testHit(ctx)) {\n      return false;\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, 2, 2);\n    return true;\n  }\n  _getBounds(matrix, ignoreTransform) {\n    let bounds = super.getBounds();\n    if (bounds) {\n      return this._transformBounds(bounds, matrix, ignoreTransform);\n    }\n    let mtx = this._props.matrix;\n    mtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\n    if (matrix) {\n      mtx.prependMatrix(matrix);\n    }\n    const l = this.children.length;\n    let rect = null;\n    for (let i = 0; i < l; i++) {\n      let child = this.children[i];\n      if (!child.visible || !(bounds = child._getBounds(mtx))) {\n        continue;\n      }\n      if (rect) {\n        rect.extend(bounds.x, bounds.y, bounds.width, bounds.height);\n      } else {\n        rect = bounds.clone();\n      }\n    }\n    return rect;\n  }\n}\n\nclass MouseEvent extends Event {\n  constructor(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY, relatedTarget) {\n    super(type, bubbles, cancelable);\n    this.stageX = stageX;\n    this.stageY = stageY;\n    this.rawX = rawX == null ? stageX : rawX;\n    this.rawY = rawY == null ? stageY : rawY;\n    this.nativeEvent = nativeEvent;\n    this.pointerID = pointerID;\n    this.primary = !!primary;\n    this.relatedTarget = relatedTarget;\n  }\n  get localX() {\n    return this.currentTarget.globalToLocal(this.rawX, this.rawY).x;\n  }\n  get localY() {\n    return this.currentTarget.globalToLocal(this.rawX, this.rawY).y;\n  }\n  get isTouch() {\n    return this.pointerID !== -1;\n  }\n  clone() {\n    return new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);\n  }\n  toString() {\n    return `[${this.constructor.name} (type=${this.type} stageX=${this.stageX} stageY=${this.stageY})]`;\n  }\n}\n\nclass Stage extends Container {\n  constructor(canvas) {\n    super();\n    this.autoClear = true;\n    this.canvas = typeof canvas === \"string\" ? document.getElementById(canvas) : canvas;\n    this.mouseX = 0;\n    this.mouseY = 0;\n    this.drawRect = null;\n    this.snapToPixelEnabled = false;\n    this.mouseInBounds = false;\n    this.tickOnUpdate = true;\n    this.mouseMoveOutside = false;\n    this.preventSelection = true;\n    this._pointerData = {};\n    this._pointerCount = 0;\n    this._primaryPointerID = null;\n    this._mouseOverIntervalID = null;\n    this._nextStage = null;\n    this._prevStage = null;\n    this.enableDOMEvents(true);\n  }\n  get nextStage() {\n    return this._nextStage;\n  }\n  set nextStage(stage) {\n    if (this._nextStage) {\n      this._nextStage._prevStage = null;\n    }\n    if (stage) {\n      stage._prevStage = this;\n    }\n    this._nextStage = stage;\n  }\n  update(props) {\n    if (!this.canvas) {\n      return;\n    }\n    if (this.tickOnUpdate) {\n      this.tick(props);\n    }\n    if (this.dispatchEvent(\"drawstart\", false, true) === false) {\n      return;\n    }\n    DisplayObject._snapToPixelEnabled = this.snapToPixelEnabled;\n    let r = this.drawRect, ctx = this.canvas.getContext(\"2d\");\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    if (this.autoClear) {\n      if (r) {\n        ctx.clearRect(r.x, r.y, r.width, r.height);\n      } else {\n        ctx.clearRect(0, 0, this.canvas.width + 1, this.canvas.height + 1);\n      }\n    }\n    ctx.save();\n    if (this.drawRect) {\n      ctx.beginPath();\n      ctx.rect(r.x, r.y, r.width, r.height);\n      ctx.clip();\n    }\n    this.updateContext(ctx);\n    this.draw(ctx, false);\n    ctx.restore();\n    this.dispatchEvent(\"drawend\");\n  }\n  tick(props) {\n    if (!this.tickEnabled || this.dispatchEvent(\"tickstart\", false, true) === false) {\n      return;\n    }\n    let evtObj = new Event(\"tick\");\n    if (props) {\n      for (let n in props) {\n        if (props.hasOwnProperty(n)) {\n          evtObj[n] = props[n];\n        }\n      }\n    }\n    this._tick(evtObj);\n    this.dispatchEvent(\"tickend\");\n  }\n  handleEvent(evt) {\n    if (evt.type === \"tick\") {\n      this.update(evt);\n    }\n  }\n  clear() {\n    if (!this.canvas) {\n      return;\n    }\n    let ctx = this.canvas.getContext(\"2d\");\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, this.canvas.width + 1, this.canvas.height + 1);\n  }\n  toDataURL(backgroundColor, mimeType = \"image/png\") {\n    let data, ctx = this.canvas.getContext(\"2d\"), w = this.canvas.width, h = this.canvas.height;\n    if (backgroundColor) {\n      data = ctx.getImageData(0, 0, w, h);\n      var compositeOperation = ctx.globalCompositeOperation;\n      ctx.globalCompositeOperation = \"destination-over\";\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(0, 0, w, h);\n    }\n    let dataURL = this.canvas.toDataURL(mimeType);\n    if (backgroundColor) {\n      ctx.putImageData(data, 0, 0);\n      ctx.globalCompositeOperation = compositeOperation;\n    }\n    return dataURL;\n  }\n  enableMouseOver(frequency = 20) {\n    if (this._mouseOverIntervalID) {\n      clearInterval(this._mouseOverIntervalID);\n      this._mouseOverIntervalID = null;\n      if (frequency === 0) {\n        this._testMouseOver(true);\n      }\n    }\n    if (frequency <= 0) {\n      return;\n    }\n    this._mouseOverIntervalID = setInterval(() => this._testMouseOver(), 1e3 / Math.min(50, frequency));\n  }\n  enableDOMEvents(enable = true) {\n    let ls = this._eventListeners;\n    if (!enable && ls) {\n      for (let n in ls) {\n        let o = ls[n];\n        o.t.removeEventListener(n, o.f, false);\n      }\n      this._eventListeners = null;\n    } else if (enable && !ls && this.canvas) {\n      let t = window.addEventListener ? window : document;\n      ls = this._eventListeners = {\n        mouseup: {\n          t: t,\n          f: e => this._handleMouseUp(e)\n        },\n        mousemove: {\n          t: t,\n          f: e => this._handleMouseMove(e)\n        },\n        dblclick: {\n          t: this.canvas,\n          f: e => this._handleDoubleClick(e)\n        },\n        mousedown: {\n          t: this.canvas,\n          f: e => this._handleMouseDown(e)\n        }\n      };\n      for (let n in ls) {\n        let o = ls[n];\n        o.t.addEventListener && o.t.addEventListener(n, o.f, false);\n      }\n    }\n  }\n  clone() {\n    throw \"Stage cannot be cloned.\";\n  }\n  _getElementRect(e) {\n    let bounds;\n    try {\n      bounds = e.getBoundingClientRect();\n    } catch (err) {\n      bounds = {\n        top: e.offsetTop,\n        left: e.offsetLeft,\n        width: e.offsetWidth,\n        height: e.offsetHeight\n      };\n    }\n    let offX = (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || document.body.clientLeft || 0);\n    let offY = (window.pageYOffset || document.scrollTop || 0) - (document.clientTop || document.body.clientTop || 0);\n    let styles = window.getComputedStyle ? getComputedStyle(e, null) : e.currentStyle;\n    let padL = parseInt(styles.paddingLeft) + parseInt(styles.borderLeftWidth);\n    let padT = parseInt(styles.paddingTop) + parseInt(styles.borderTopWidth);\n    let padR = parseInt(styles.paddingRight) + parseInt(styles.borderRightWidth);\n    let padB = parseInt(styles.paddingBottom) + parseInt(styles.borderBottomWidth);\n    return {\n      left: bounds.left + offX + padL,\n      right: bounds.right + offX - padR,\n      top: bounds.top + offY + padT,\n      bottom: bounds.bottom + offY - padB\n    };\n  }\n  _getPointerData(id) {\n    let data = this._pointerData[id];\n    if (!data) {\n      data = this._pointerData[id] = {\n        x: 0,\n        y: 0\n      };\n    }\n    return data;\n  }\n  _handleMouseMove(e = window.event) {\n    this._handlePointerMove(-1, e, e.pageX, e.pageY);\n  }\n  _handlePointerMove(id, e, pageX, pageY, owner) {\n    if (this._prevStage && owner === undefined) {\n      return;\n    }\n    if (!this.canvas) {\n      return;\n    }\n    let nextStage = this._nextStage, o = this._getPointerData(id);\n    let inBounds = o.inBounds;\n    this._updatePointerPosition(id, e, pageX, pageY);\n    if (inBounds || o.inBounds || this.mouseMoveOutside) {\n      if (id === -1 && o.inBounds === !inBounds) {\n        this._dispatchMouseEvent(this, inBounds ? \"mouseleave\" : \"mouseenter\", false, id, o, e);\n      }\n      this._dispatchMouseEvent(this, \"stagemousemove\", false, id, o, e);\n      this._dispatchMouseEvent(o.target, \"pressmove\", true, id, o, e);\n    }\n    nextStage && nextStage._handlePointerMove(id, e, pageX, pageY, null);\n  }\n  _updatePointerPosition(id, e, pageX, pageY) {\n    let rect = this._getElementRect(this.canvas);\n    pageX -= rect.left;\n    pageY -= rect.top;\n    let w = this.canvas.width;\n    let h = this.canvas.height;\n    pageX /= (rect.right - rect.left) / w;\n    pageY /= (rect.bottom - rect.top) / h;\n    let o = this._getPointerData(id);\n    if (o.inBounds = pageX >= 0 && pageY >= 0 && pageX <= w - 1 && pageY <= h - 1) {\n      o.x = pageX;\n      o.y = pageY;\n    } else if (this.mouseMoveOutside) {\n      o.x = pageX < 0 ? 0 : pageX > w - 1 ? w - 1 : pageX;\n      o.y = pageY < 0 ? 0 : pageY > h - 1 ? h - 1 : pageY;\n    }\n    o.posEvtObj = e;\n    o.rawX = pageX;\n    o.rawY = pageY;\n    if (id === this._primaryPointerID || id === -1) {\n      this.mouseX = o.x;\n      this.mouseY = o.y;\n      this.mouseInBounds = o.inBounds;\n    }\n  }\n  _handleMouseUp(e) {\n    this._handlePointerUp(-1, e, false);\n  }\n  _handlePointerUp(id, e, clear, owner) {\n    let nextStage = this._nextStage, o = this._getPointerData(id);\n    if (this._prevStage && owner === undefined) {\n      return;\n    }\n    let target = null, oTarget = o.target;\n    if (!owner && (oTarget || nextStage)) {\n      target = this._getObjectsUnderPoint(o.x, o.y, null, true);\n    }\n    if (o.down) {\n      this._dispatchMouseEvent(this, \"stagemouseup\", false, id, o, e, target);\n      o.down = false;\n    }\n    if (target === oTarget) {\n      this._dispatchMouseEvent(oTarget, \"click\", true, id, o, e);\n    }\n    this._dispatchMouseEvent(oTarget, \"pressup\", true, id, o, e);\n    if (clear) {\n      if (id == this._primaryPointerID) {\n        this._primaryPointerID = null;\n      }\n      delete this._pointerData[id];\n    } else {\n      o.target = null;\n    }\n    nextStage && nextStage._handlePointerUp(id, e, clear, owner || target && this);\n  }\n  _handleMouseDown(e) {\n    this._handlePointerDown(-1, e, e.pageX, e.pageY);\n  }\n  _handlePointerDown(id, e, pageX, pageY, owner) {\n    if (this.preventSelection) {\n      e.preventDefault();\n    }\n    if (this._primaryPointerID == null || id === -1) {\n      this._primaryPointerID = id;\n    }\n    if (pageY != null) {\n      this._updatePointerPosition(id, e, pageX, pageY);\n    }\n    let target = null, nextStage = this._nextStage, o = this._getPointerData(id);\n    if (!owner) {\n      target = o.target = this._getObjectsUnderPoint(o.x, o.y, null, true);\n    }\n    if (o.inBounds) {\n      this._dispatchMouseEvent(this, \"stagemousedown\", false, id, o, e, target);\n      o.down = true;\n    }\n    this._dispatchMouseEvent(target, \"mousedown\", true, id, o, e);\n    nextStage && nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);\n  }\n  _testMouseOver(clear, owner, eventTarget) {\n    if (this._prevStage && owner === undefined) {\n      return;\n    }\n    let nextStage = this._nextStage;\n    if (!this._mouseOverIntervalID) {\n      nextStage && nextStage._testMouseOver(clear, owner, eventTarget);\n      return;\n    }\n    let o = this._getPointerData(-1);\n    if (!o || !clear && this.mouseX === this._mouseOverX && this.mouseY === this._mouseOverY && this.mouseInBounds) {\n      return;\n    }\n    let e = o.posEvtObj;\n    let isEventTarget = eventTarget || e && e.target === this.canvas;\n    let target = null, common = -1, cursor = \"\";\n    if (!owner && (clear || this.mouseInBounds && isEventTarget)) {\n      target = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);\n      this._mouseOverX = this.mouseX;\n      this._mouseOverY = this.mouseY;\n    }\n    let oldList = this._mouseOverTarget || [];\n    let oldTarget = oldList[oldList.length - 1];\n    let list = this._mouseOverTarget = [];\n    let t = target;\n    while (t) {\n      list.unshift(t);\n      if (!cursor) {\n        cursor = t.cursor;\n      }\n      t = t.parent;\n    }\n    this.canvas.style.cursor = cursor;\n    if (!owner && eventTarget) {\n      eventTarget.canvas.style.cursor = cursor;\n    }\n    for (let i = 0, l = list.length; i < l; i++) {\n      if (list[i] != oldList[i]) {\n        break;\n      }\n      common = i;\n    }\n    if (oldTarget != target) {\n      this._dispatchMouseEvent(oldTarget, \"mouseout\", true, -1, o, e, target);\n    }\n    for (let i = oldList.length - 1; i > common; i--) {\n      this._dispatchMouseEvent(oldList[i], \"rollout\", false, -1, o, e, target);\n    }\n    for (let i = list.length - 1; i > common; i--) {\n      this._dispatchMouseEvent(list[i], \"rollover\", false, -1, o, e, oldTarget);\n    }\n    if (oldTarget != target) {\n      this._dispatchMouseEvent(target, \"mouseover\", true, -1, o, e, oldTarget);\n    }\n    nextStage && nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);\n  }\n  _handleDoubleClick(e, owner) {\n    let target = null, nextStage = this._nextStage, o = this._getPointerData(-1);\n    if (!owner) {\n      target = this._getObjectsUnderPoint(o.x, o.y, null, true);\n      this._dispatchMouseEvent(target, \"dblclick\", true, -1, o, e);\n    }\n    nextStage && nextStage._handleDoubleClick(e, owner || target && this);\n  }\n  _dispatchMouseEvent(target, type, bubbles, pointerId, o, nativeEvent, relatedTarget) {\n    if (!target || !bubbles && !target.hasEventListener(type)) {\n      return;\n    }\n    let evt = new MouseEvent(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId === this._primaryPointerID || pointerId === -1, o.rawX, o.rawY, relatedTarget);\n    target.dispatchEvent(evt);\n  }\n}\n\nclass VideoBuffer {\n  constructor(video) {\n    this.readyState = video.readyState;\n    this._video = video;\n    this._canvas = null;\n    this._lastTime = -1;\n    if (this.readyState < 2) {\n      video.addEventListener(\"canplaythrough\", this._videoReady.bind(this));\n    }\n  }\n  getImage() {\n    if (this.readyState < 2) {\n      return;\n    }\n    let canvas = this._canvas, video = this._video;\n    if (!canvas) {\n      canvas = this._canvas = document.createElement(\"canvas\");\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n    }\n    if (video.readyState >= 2 && video.currentTime !== this._lastTime) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      this._lastTime = video.currentTime;\n    }\n    return canvas;\n  }\n  _videoReady() {\n    this.readyState = 2;\n  }\n}\n\nclass Bitmap extends DisplayObject {\n  constructor(imageOrUri) {\n    super();\n    if (typeof imageOrUri === \"string\") {\n      this.image = document.createElement(\"img\");\n      this.image.src = imageOrUri;\n    } else {\n      this.image = imageOrUri;\n    }\n    this.sourceRect = null;\n    this._webGLRenderStyle = DisplayObject._StageGL_BITMAP;\n  }\n  isVisible() {\n    let image = this.image;\n    let hasContent = this.cacheCanvas || image && (image.naturalWidth || image.getContext || image.readyState >= 2);\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  }\n  draw(ctx, ignoreCache = false) {\n    if (super.draw(ctx, ignoreCache)) {\n      return true;\n    }\n    let img = this.image, rect = this.sourceRect;\n    if (img instanceof VideoBuffer) {\n      img = img.getImage();\n    }\n    if (img == null) {\n      return true;\n    }\n    if (rect) {\n      let x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height, x = 0, y = 0, w = img.width, h = img.height;\n      if (x1 < 0) {\n        x -= x1;\n        x1 = 0;\n      }\n      if (x2 > w) {\n        x2 = w;\n      }\n      if (y1 < 0) {\n        y -= y1;\n        y1 = 0;\n      }\n      if (y2 > h) {\n        y2 = h;\n      }\n      ctx.drawImage(img, x1, y1, x2 - x1, y2 - y1, x, y, x2 - x1, y2 - y1);\n    } else {\n      ctx.drawImage(img, 0, 0);\n    }\n    return true;\n  }\n  getBounds() {\n    let rect = super.getBounds();\n    if (rect) {\n      return rect;\n    }\n    let image = this.image, o = this.sourceRect || image;\n    let hasContent = image && (image.naturalWidth || image.getContext || image.readyState >= 2);\n    return hasContent ? this._rectangle.setValues(0, 0, o.width, o.height) : null;\n  }\n  clone(node) {\n    let img = this.image;\n    if (img != null && node != null) {\n      img = img.cloneNode();\n    }\n    let bmp = new Bitmap(img);\n    if (this.sourceRect) {\n      bmp.sourceRect = this.sourceRect.clone();\n    }\n    this._cloneProps(bmp);\n    return bmp;\n  }\n}\n\nclass Sprite extends DisplayObject {\n  constructor(spriteSheet, frameOrAnimation) {\n    super();\n    this.currentFrame = 0;\n    this.currentAnimation = null;\n    this.paused = true;\n    this.spriteSheet = spriteSheet;\n    this.currentAnimationFrame = 0;\n    this.framerate = 0;\n    this._animation = null;\n    this._currentFrame = null;\n    this._skipAdvance = false;\n    this._webGLRenderStyle = DisplayObject._StageGL_SPRITE;\n    if (frameOrAnimation != null) {\n      this.gotoAndPlay(frameOrAnimation);\n    }\n  }\n  isVisible() {\n    let hasContent = this.cacheCanvas || this.spriteSheet.complete;\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  }\n  draw(ctx, ignoreCache) {\n    if (super.draw(ctx, ignoreCache)) {\n      return true;\n    }\n    this._normalizeFrame();\n    let o = this.spriteSheet.getFrame(this._currentFrame | 0);\n    if (!o) {\n      return false;\n    }\n    let rect = o.rect;\n    if (rect.width && rect.height) {\n      ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height);\n    }\n    return true;\n  }\n  play() {\n    this.paused = false;\n  }\n  stop() {\n    this.paused = true;\n  }\n  gotoAndPlay(frameOrAnimation) {\n    this.paused = false;\n    this._skipAdvance = true;\n    this._goto(frameOrAnimation);\n  }\n  gotoAndStop(frameOrAnimation) {\n    this.paused = true;\n    this._goto(frameOrAnimation);\n  }\n  advance(time) {\n    let fps = this.framerate || this.spriteSheet.framerate;\n    let t = fps && time != null ? time / (1e3 / fps) : 1;\n    this._normalizeFrame(t);\n  }\n  getBounds() {\n    return super.getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);\n  }\n  clone() {\n    return this._cloneProps(new Sprite(this.spriteSheet));\n  }\n  _cloneProps(o) {\n    super._cloneProps(o);\n    o.currentFrame = this.currentFrame;\n    o.currentAnimation = this.currentAnimation;\n    o.paused = this.paused;\n    o.currentAnimationFrame = this.currentAnimationFrame;\n    o.framerate = this.framerate;\n    o._animation = this._animation;\n    o._currentFrame = this._currentFrame;\n    o._skipAdvance = this._skipAdvance;\n    return o;\n  }\n  _tick(evtObj) {\n    if (!this.paused) {\n      if (!this._skipAdvance) {\n        this.advance(evtObj && evtObj.delta);\n      }\n      this._skipAdvance = false;\n    }\n    super._tick(evtObj);\n  }\n  _normalizeFrame(frameDelta = 0) {\n    let animation = this._animation;\n    let paused = this.paused;\n    let frame = this._currentFrame;\n    if (animation) {\n      let speed = animation.speed || 1;\n      let animFrame = this.currentAnimationFrame;\n      let l = animation.frames.length;\n      if (animFrame + frameDelta * speed >= l) {\n        let next = animation.next;\n        if (this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {\n          return;\n        } else if (next) {\n          return this._goto(next, frameDelta - (l - animFrame) / speed);\n        } else {\n          this.paused = true;\n          animFrame = animation.frames.length - 1;\n        }\n      } else {\n        animFrame += frameDelta * speed;\n      }\n      this.currentAnimationFrame = animFrame;\n      this._currentFrame = animation.frames[animFrame | 0];\n    } else {\n      frame = this._currentFrame += frameDelta;\n      let l = this.spriteSheet.getNumFrames();\n      if (frame >= l && l > 0) {\n        if (!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {\n          if ((this._currentFrame -= l) >= l) {\n            return this._normalizeFrame();\n          }\n        }\n      }\n    }\n    frame = this._currentFrame | 0;\n    if (this.currentFrame != frame) {\n      this.currentFrame = frame;\n      this.dispatchEvent(\"change\");\n    }\n  }\n  _dispatchAnimationEnd(animation, frame, paused, next, end) {\n    let name = animation ? animation.name : null;\n    if (this.hasEventListener(\"animationend\")) {\n      let evt = new Event(\"animationend\");\n      evt.name = name;\n      evt.next = next;\n      this.dispatchEvent(evt);\n    }\n    let changed = this._animation != animation || this._currentFrame != frame;\n    if (!changed && !paused && this.paused) {\n      this.currentAnimationFrame = end;\n      changed = true;\n    }\n    return changed;\n  }\n  _goto(frameOrAnimation, frame) {\n    this.currentAnimationFrame = 0;\n    if (isNaN(frameOrAnimation)) {\n      let data = this.spriteSheet.getAnimation(frameOrAnimation);\n      if (data) {\n        this._animation = data;\n        this.currentAnimation = frameOrAnimation;\n        this._normalizeFrame(frame);\n      }\n    } else {\n      this.currentAnimation = this._animation = null;\n      this._currentFrame = frameOrAnimation;\n      this._normalizeFrame();\n    }\n  }\n}\n\nlet _maxPoolSize = 100;\n\nlet _spritePool = [];\n\nclass BitmapText extends Container {\n  constructor(text = \"\", spriteSheet = null) {\n    super();\n    this.text = text;\n    this.spriteSheet = spriteSheet;\n    this.lineHeight = 0;\n    this.letterSpacing = 0;\n    this.spaceWidth = 0;\n    this._oldProps = {\n      text: 0,\n      spriteSheet: 0,\n      lineHeight: 0,\n      letterSpacing: 0,\n      spaceWidth: 0\n    };\n    this._oldStage = null;\n    this._drawAction = null;\n  }\n  static get maxPoolSize() {\n    return _maxPoolSize;\n  }\n  static set maxPoolSize(maxPoolSize) {\n    _maxPoolSize = maxPoolSize;\n  }\n  static get _spritePool() {\n    return _spritePool;\n  }\n  draw(ctx, ignoreCache) {\n    if (this.drawCache(ctx, ignoreCache)) {\n      return;\n    }\n    this._updateState();\n    super.draw(ctx, ignoreCache);\n  }\n  getBounds() {\n    this._updateText();\n    return super.getBounds();\n  }\n  isVisible() {\n    let hasContent = this.cacheCanvas || this.spriteSheet && this.spriteSheet.complete && this.text;\n    return !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);\n  }\n  clone() {\n    return this._cloneProps(new BitmapText(this.text, this.spriteSheet));\n  }\n  addChild() {}\n  addChildAt() {}\n  removeChild() {}\n  removeChildAt() {}\n  removeAllChildren() {}\n  _updateState() {\n    this._updateText();\n  }\n  _cloneProps(o) {\n    super._cloneProps(o);\n    o.lineHeight = this.lineHeight;\n    o.letterSpacing = this.letterSpacing;\n    o.spaceWidth = this.spaceWidth;\n    return o;\n  }\n  _getFrameIndex(character, spriteSheet) {\n    let c, o = spriteSheet.getAnimation(character);\n    if (!o) {\n      character != (c = character.toUpperCase()) || character != (c = character.toLowerCase()) || (c = null);\n      if (c) {\n        o = spriteSheet.getAnimation(c);\n      }\n    }\n    return o && o.frames[0];\n  }\n  _getFrame(character, spriteSheet) {\n    let index = this._getFrameIndex(character, spriteSheet);\n    return index == null ? index : spriteSheet.getFrame(index);\n  }\n  _getLineHeight(ss) {\n    let frame = this._getFrame(\"1\", ss) || this._getFrame(\"T\", ss) || this._getFrame(\"L\", ss) || ss.getFrame(0);\n    return frame ? frame.rect.height : 1;\n  }\n  _getSpaceWidth(ss) {\n    let frame = this._getFrame(\"1\", ss) || this._getFrame(\"l\", ss) || this._getFrame(\"e\", ss) || this._getFrame(\"a\", ss) || ss.getFrame(0);\n    return frame ? frame.rect.width : 1;\n  }\n  _tick(evtObj) {\n    let stage = this.stage;\n    stage && stage.on(\"drawstart\", this._updateText, this, true);\n    super._tick(evtObj);\n  }\n  _updateText() {\n    let x = 0, y = 0, o = this._oldProps, change = false, spaceW = this.spaceWidth, lineH = this.lineHeight, ss = this.spriteSheet;\n    let pool = BitmapText._spritePool, kids = this.children, childIndex = 0, numKids = kids.length, sprite;\n    for (let n in o) {\n      if (o[n] != this[n]) {\n        o[n] = this[n];\n        change = true;\n      }\n    }\n    if (!change) {\n      return;\n    }\n    let hasSpace = !!this._getFrame(\" \", ss);\n    if (!hasSpace && !spaceW) {\n      spaceW = this._getSpaceWidth(ss);\n    }\n    if (!lineH) {\n      lineH = this._getLineHeight(ss);\n    }\n    for (let i = 0, l = this.text.length; i < l; i++) {\n      let character = this.text.charAt(i);\n      if (character === \" \" && !hasSpace) {\n        x += spaceW;\n        continue;\n      } else if (character === \"\\n\" || character === \"\\r\") {\n        if (character === \"\\r\" && this.text.charAt(i + 1) === \"\\n\") {\n          i++;\n        }\n        x = 0;\n        y += lineH;\n        continue;\n      }\n      let index = this._getFrameIndex(character, ss);\n      if (index == null) {\n        continue;\n      }\n      if (childIndex < numKids) {\n        sprite = kids[childIndex];\n      } else {\n        kids.push(sprite = pool.length ? pool.pop() : new Sprite());\n        sprite.parent = this;\n        numKids++;\n      }\n      sprite.spriteSheet = ss;\n      sprite.gotoAndStop(index);\n      sprite.x = x;\n      sprite.y = y;\n      childIndex++;\n      x += sprite.getBounds().width + this.letterSpacing;\n    }\n    while (numKids > childIndex) {\n      pool.push(sprite = kids.pop());\n      sprite.parent = null;\n      numKids--;\n    }\n    if (pool.length > BitmapText.maxPoolSize) {\n      pool.length = BitmapText.maxPoolSize;\n    }\n  }\n}\n\nclass DOMElement extends DisplayObject {\n  constructor(htmlElement) {\n    super();\n    if (typeof htmlElement === \"string\") {\n      htmlElement = document.getElementById(htmlElement);\n    }\n    this.mouseEnabled = false;\n    let style = htmlElement.style;\n    style.position = \"absolute\";\n    style.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = \"0% 0%\";\n    this.htmlElement = htmlElement;\n    this._oldProps = null;\n    this._oldStage = null;\n    this._drawAction = null;\n  }\n  isVisible() {\n    return this.htmlElement != null;\n  }\n  draw(ctx, ignoreCache) {\n    return true;\n  }\n  cache() {}\n  uncache() {}\n  updateCache() {}\n  hitTest() {}\n  localToGlobal() {}\n  globalToLocal() {}\n  localToLocal() {}\n  clone() {\n    throw \"DOMElement cannot be cloned.\";\n  }\n  _tick(evtObj) {\n    let stage = this.stage;\n    if (stage != null && stage !== this._oldStage) {\n      this._drawAction && stage.off(\"drawend\", this._drawAction);\n      this._drawAction = stage.on(\"drawend\", this._handleDrawEnd, this);\n      this._oldStage = stage;\n    }\n    super._tick(evtObj);\n  }\n  _handleDrawEnd(evt) {\n    let o = this.htmlElement;\n    if (!o) {\n      return;\n    }\n    let style = o.style;\n    let props = this.getConcatenatedDisplayProps(this._props), mtx = props.matrix;\n    let visibility = props.visible ? \"visible\" : \"hidden\";\n    if (visibility != style.visibility) {\n      style.visibility = visibility;\n    }\n    if (!props.visible) {\n      return;\n    }\n    let oldProps = this._oldProps, oldMtx = oldProps && oldProps.matrix;\n    let n = 1e4;\n    if (!oldMtx || !oldMtx.equals(mtx)) {\n      let str = \"matrix(\" + (mtx.a * n | 0) / n + \",\" + (mtx.b * n | 0) / n + \",\" + (mtx.c * n | 0) / n + \",\" + (mtx.d * n | 0) / n + \",\" + (mtx.tx + .5 | 0);\n      style.transform = style.WebkitTransform = style.OTransform = style.msTransform = str + \",\" + (mtx.ty + .5 | 0) + \")\";\n      style.MozTransform = str + \"px,\" + (mtx.ty + .5 | 0) + \"px)\";\n      if (!oldProps) {\n        oldProps = this._oldProps = new DisplayProps(true, null);\n      }\n      oldProps.matrix.copy(mtx);\n    }\n    if (oldProps.alpha != props.alpha) {\n      style.opacity = \"\" + (props.alpha * n | 0) / n;\n      oldProps.alpha = props.alpha;\n    }\n  }\n}\n\nclass Graphics {\n  constructor() {\n    this.command = null;\n    this._stroke = null;\n    this._strokeStyle = null;\n    this._oldStrokeStyle = null;\n    this._strokeDash = null;\n    this._oldStrokeDash = null;\n    this._strokeIgnoreScale = false;\n    this._fill = null;\n    this._instructions = [];\n    this._commitIndex = 0;\n    this._activeInstructions = [];\n    this._dirty = false;\n    this._storeIndex = 0;\n    this.curveTo = this.quadraticCurveTo;\n    this.drawRect = this.rect;\n    this.mt = this.moveTo;\n    this.lt = this.lineTo;\n    this.at = this.arcTo;\n    this.bt = this.bezierCurveTo;\n    this.qt = this.quadraticCurveTo;\n    this.a = this.arc;\n    this.r = this.rect;\n    this.cp = this.closePath;\n    this.c = this.clear;\n    this.f = this.beginFill;\n    this.lf = this.beginLinearGradientFill;\n    this.rf = this.beginRadialGradientFill;\n    this.bf = this.beginBitmapFill;\n    this.ef = this.endFill;\n    this.ss = this.setStrokeStyle;\n    this.sd = this.setStrokeDash;\n    this.s = this.beginStroke;\n    this.ls = this.beginLinearGradientStroke;\n    this.rs = this.beginRadialGradientStroke;\n    this.bs = this.beginBitmapStroke;\n    this.es = this.endStroke;\n    this.dr = this.drawRect;\n    this.rr = this.drawRoundRect;\n    this.rc = this.drawRoundRectComplex;\n    this.dc = this.drawCircle;\n    this.de = this.drawEllipse;\n    this.dp = this.drawPolyStar;\n    this.p = this.decodePath;\n    this.clear();\n  }\n  static getRGB(r, g, b, alpha) {\n    if (r != null && b == null) {\n      alpha = g;\n      b = r & 255;\n      g = r >> 8 & 255;\n      r = r >> 16 & 255;\n    }\n    if (alpha == null) {\n      return `rgb(${r},${g},${b})`;\n    } else {\n      return `rgba(${r},${g},${b},${alpha})`;\n    }\n  }\n  static getHSL(hue, saturation, lightness, alpha) {\n    if (alpha == null) {\n      return `hsl(${hue % 360},${saturation}%,${lightness}%)`;\n    } else {\n      return `hsl(${hue % 360},${saturation}%,${lightness}%,${alpha})`;\n    }\n  }\n  get instructions() {\n    this._updateInstructions();\n    return this._instructions;\n  }\n  isEmpty() {\n    return !(this._instructions.length || this._activeInstructions.length);\n  }\n  draw(ctx, data) {\n    this._updateInstructions();\n    let instr = this._instructions;\n    const l = instr.length;\n    for (let i = this._storeIndex; i < l; i++) {\n      instr[i].exec(ctx, data);\n    }\n  }\n  drawAsPath(ctx) {\n    this._updateInstructions();\n    let instr, instrs = this._instructions;\n    const l = instrs.length;\n    for (let i = this._storeIndex; i < l; i++) {\n      if ((instr = instrs[i]).path !== false) {\n        instr.exec(ctx);\n      }\n    }\n  }\n  moveTo(x, y) {\n    return this.append(new MoveTo(x, y), true);\n  }\n  lineTo(x, y) {\n    return this.append(new LineTo(x, y));\n  }\n  arcTo(x1, y1, x2, y2, radius) {\n    return this.append(new ArcTo(x1, y1, x2, y2, radius));\n  }\n  arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n    return this.append(new Arc(x, y, radius, startAngle, endAngle, anticlockwise));\n  }\n  quadraticCurveTo(cpx, cpy, x, y) {\n    return this.append(new QuadraticCurveTo(cpx, cpy, x, y));\n  }\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    return this.append(new BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));\n  }\n  rect(x, y, w, h) {\n    return this.append(new Rect(x, y, w, h));\n  }\n  closePath() {\n    return this._activeInstructions.length ? this.append(new ClosePath()) : this;\n  }\n  clear() {\n    this._instructions.length = this._activeInstructions.length = this._commitIndex = 0;\n    this._strokeStyle = this._oldStrokeStyle = this._stroke = this._fill = this._strokeDash = this._oldStrokeDash = null;\n    this._dirty = this._strokeIgnoreScale = false;\n    return this;\n  }\n  beginFill(color) {\n    return this._setFill(color ? new Fill(color) : null);\n  }\n  beginLinearGradientFill(colors, ratios, x0, y0, x1, y1) {\n    return this._setFill(new Fill().linearGradient(colors, ratios, x0, y0, x1, y1));\n  }\n  beginRadialGradientFill(colors, ratios, x0, y0, r0, x1, y1, r1) {\n    return this._setFill(new Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n  }\n  beginBitmapFill(image, repetition, matrix) {\n    return this._setFill(new Fill(null, matrix).bitmap(image, repetition));\n  }\n  endFill() {\n    return this.beginFill();\n  }\n  setStrokeStyle(thickness, caps = 0, joints = 0, miterLimit = 10, ignoreScale = false) {\n    this._updateInstructions(true);\n    this._strokeStyle = this.command = new StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale);\n    if (this._stroke) {\n      this._stroke.ignoreScale = ignoreScale;\n    }\n    this._strokeIgnoreScale = ignoreScale;\n    return this;\n  }\n  setStrokeDash(segments, offset = 0) {\n    this._updateInstructions(true);\n    this._strokeDash = this.command = new StrokeDash(segments, offset);\n    return this;\n  }\n  beginStroke(color) {\n    return this._setStroke(color ? new Stroke(color) : null);\n  }\n  beginLinearGradientStroke(colors, ratios, x0, y0, x1, y1) {\n    return this._setStroke(new Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));\n  }\n  beginRadialGradientStroke(colors, ratios, x0, y0, r0, x1, y1, r1) {\n    return this._setStroke(new Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n  }\n  beginBitmapStroke(image, repetition = \"repeat\") {\n    return this._setStroke(new Stroke().bitmap(image, repetition));\n  }\n  endStroke() {\n    return this.beginStroke();\n  }\n  drawRoundRect(x, y, w, h, radius) {\n    return this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);\n  }\n  drawRoundRectComplex(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n    return this.append(new RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));\n  }\n  drawCircle(x, y, radius) {\n    return this.append(new Circle(x, y, radius));\n  }\n  drawEllipse(x, y, w, h) {\n    return this.append(new Ellipse(x, y, w, h));\n  }\n  drawPolyStar(x, y, radius, sides, pointSize, angle) {\n    return this.append(new PolyStar(x, y, radius, sides, pointSize, angle));\n  }\n  append(command, clean) {\n    this._activeInstructions.push(command);\n    this.command = command;\n    if (!clean) {\n      this._dirty = true;\n    }\n    return this;\n  }\n  decodePath(str) {\n    let instructions = [ this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath ];\n    let paramCount = [ 2, 2, 4, 6, 0 ];\n    let i = 0;\n    const l = str.length;\n    let params = [];\n    let x = 0, y = 0;\n    let base64 = Graphics.BASE_64;\n    while (i < l) {\n      let c = str.charAt(i);\n      let n = base64[c];\n      let fi = n >> 3;\n      let f = instructions[fi];\n      if (!f || n & 3) {\n        throw `bad path data (@${i}):c`;\n      }\n      const pl = paramCount[fi];\n      if (!fi) {\n        x = y = 0;\n      }\n      params.length = 0;\n      i++;\n      let charCount = (n >> 2 & 1) + 2;\n      for (let p = 0; p < pl; p++) {\n        let num = base64[str.charAt(i)];\n        let sign = num >> 5 ? -1 : 1;\n        num = (num & 31) << 6 | base64[str.charAt(i + 1)];\n        if (charCount === 3) {\n          num = num << 6 | base64[str.charAt(i + 2)];\n        }\n        num = sign * num / 10;\n        if (p % 2) {\n          x = num += x;\n        } else {\n          y = num += y;\n        }\n        params[p] = num;\n        i += charCount;\n      }\n      f.apply(this, params);\n    }\n    return this;\n  }\n  store() {\n    this._updateInstructions(true);\n    this._storeIndex = this._instructions.length;\n    return this;\n  }\n  unstore() {\n    this._storeIndex = 0;\n    return this;\n  }\n  clone() {\n    let o = new Graphics();\n    o.command = this.command;\n    o._stroke = this._stroke;\n    o._strokeStyle = this._strokeStyle;\n    o._strokeDash = this._strokeDash;\n    o._strokeIgnoreScale = this._strokeIgnoreScale;\n    o._fill = this._fill;\n    o._instructions = this._instructions.slice();\n    o._commitIndex = this._commitIndex;\n    o._activeInstructions = this._activeInstructions.slice();\n    o._dirty = this._dirty;\n    o._storeIndex = this._storeIndex;\n    return o;\n  }\n  toString() {\n    return `[${this.constructor.name}]`;\n  }\n  _updateInstructions(commit) {\n    let instr = this._instructions, active = this._activeInstructions, commitIndex = this._commitIndex;\n    if (this._dirty && active.length) {\n      instr.length = commitIndex;\n      instr.push(Graphics.beginCmd);\n      const l = active.length, ll = instr.length;\n      instr.length = ll + l;\n      for (let i = 0; i < l; i++) {\n        instr[i + ll] = active[i];\n      }\n      if (this._fill) {\n        instr.push(this._fill);\n      }\n      if (this._stroke) {\n        if (this._strokeDash !== this._oldStrokeDash) {\n          instr.push(this._strokeDash);\n        }\n        if (this._strokeStyle !== this._oldStrokeStyle) {\n          instr.push(this._strokeStyle);\n        }\n        if (commit) {\n          this._oldStrokeDash = this._strokeDash;\n          this._oldStrokeStyle = this._strokeStyle;\n        }\n        instr.push(this._stroke);\n      }\n      this._dirty = false;\n    }\n    if (commit) {\n      active.length = 0;\n      this._commitIndex = instr.length;\n    }\n  }\n  _setFill(fill) {\n    this._updateInstructions(true);\n    this.command = this._fill = fill;\n    return this;\n  }\n  _setStroke(stroke) {\n    this._updateInstructions(true);\n    if (this.command = this._stroke = stroke) {\n      stroke.ignoreScale = this._strokeIgnoreScale;\n    }\n    return this;\n  }\n  static get LineTo() {\n    return LineTo;\n  }\n  static get MoveTo() {\n    return MoveTo;\n  }\n  static get ArcTo() {\n    return ArcTo;\n  }\n  static get Arc() {\n    return Arc;\n  }\n  static get QuadraticCurveTo() {\n    return QuadraticCurveTo;\n  }\n  static get BezierCurveTo() {\n    return BezierCurveTo;\n  }\n  static get Rect() {\n    return Rect;\n  }\n  static get ClosePath() {\n    return ClosePath;\n  }\n  static get BeginPath() {\n    return BeginPath;\n  }\n  static get Fill() {\n    return Fill;\n  }\n  static get Stroke() {\n    return Stroke;\n  }\n  static get StrokeStyle() {\n    return StrokeStyle;\n  }\n  static get StrokeDash() {\n    return StrokeDash;\n  }\n  static get RoundRect() {\n    return RoundRect;\n  }\n  static get Circle() {\n    return Circle;\n  }\n  static get Ellipse() {\n    return Ellipse;\n  }\n  static get PolyStar() {\n    return PolyStar;\n  }\n}\n\nclass LineTo {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  exec(ctx) {\n    ctx.lineTo(this.x, this.y);\n  }\n}\n\nclass MoveTo {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  exec(ctx) {\n    ctx.moveTo(this.x, this.y);\n  }\n}\n\nclass ArcTo {\n  constructor(x1, y1, x2, y2, radius) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.radius = radius;\n  }\n  exec(ctx) {\n    ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);\n  }\n}\n\nclass Arc {\n  constructor(x, y, radius, startAngle, endAngle, anticlockwise) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    this.anticlockwise = !!anticlockwise;\n  }\n  exec(ctx) {\n    ctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise);\n  }\n}\n\nclass QuadraticCurveTo {\n  constructor(cpx, cpy, x, y) {\n    this.cpx = cpx;\n    this.cpy = cpy;\n    this.x = x;\n    this.y = y;\n  }\n  exec(ctx) {\n    ctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y);\n  }\n}\n\nclass BezierCurveTo {\n  constructor(cp1x, cp1y, cp2x, cp2y, x, y) {\n    this.cp1x = cp1x;\n    this.cp1y = cp1y;\n    this.cp2x = cp2x;\n    this.cp2y = cp2y;\n    this.x = x;\n    this.y = y;\n  }\n  exec(ctx) {\n    ctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y);\n  }\n}\n\nclass Rect {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n  exec(ctx) {\n    ctx.rect(this.x, this.y, this.w, this.h);\n  }\n}\n\nclass ClosePath {\n  constructor() {}\n  exec(ctx) {\n    ctx.closePath();\n  }\n}\n\nclass BeginPath {\n  constructor() {}\n  exec(ctx) {\n    ctx.beginPath();\n  }\n}\n\nclass Fill {\n  constructor(style, matrix) {\n    this.style = style;\n    this.matrix = matrix;\n    this.path = false;\n  }\n  exec(ctx) {\n    if (!this.style) {\n      return;\n    }\n    ctx.fillStyle = this.style;\n    let mtx = this.matrix;\n    if (mtx) {\n      ctx.save();\n      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\n    }\n    ctx.fill();\n    if (mtx) {\n      ctx.restore();\n    }\n  }\n  linearGradient(colors, ratios, x0, y0, x1, y1) {\n    let o = this.style = Graphics._ctx.createLinearGradient(x0, y0, x1, y1);\n    const l = colors.length;\n    for (let i = 0; i < l; i++) {\n      o.addColorStop(ratios[i], colors[i]);\n    }\n    o.props = {\n      colors: colors,\n      ratios: ratios,\n      x0: x0,\n      y0: y0,\n      x1: x1,\n      y1: y1,\n      type: \"linear\"\n    };\n    return this;\n  }\n  radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1) {\n    let o = this.style = Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    const l = colors.length;\n    for (let i = 0; i < l; i++) {\n      o.addColorStop(ratios[i], colors[i]);\n    }\n    o.props = {\n      colors: colors,\n      ratios: ratios,\n      x0: x0,\n      y0: y0,\n      r0: r0,\n      x1: x1,\n      y1: y1,\n      r1: r1,\n      type: \"radial\"\n    };\n    return this;\n  }\n  bitmap(image, repetition = \"\") {\n    if (image.naturalWidth || image.getContext || image.readyState >= 2) {\n      let o = this.style = Graphics._ctx.createPattern(image, repetition);\n      o.props = {\n        image: image,\n        repetition: repetition,\n        type: \"bitmap\"\n      };\n    }\n    return this;\n  }\n}\n\nclass Stroke {\n  constructor(style, ignoreScale) {\n    this.style = style;\n    this.ignoreScale = ignoreScale;\n    this.path = false;\n  }\n  exec(ctx) {\n    if (!this.style) {\n      return;\n    }\n    ctx.strokeStyle = this.style;\n    if (this.ignoreScale) {\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n    }\n    ctx.stroke();\n    if (this.ignoreScale) {\n      ctx.restore();\n    }\n  }\n  linearGradient(...args) {\n    Fill.prototype.linearGradient.apply(this, args);\n  }\n  radialGradient(...args) {\n    Fill.prototype.radialGradient.apply(this, args);\n  }\n  bitmap(...args) {\n    Fill.prototype.bitmap.apply(this, args);\n  }\n}\n\nclass StrokeStyle {\n  constructor(width, caps = \"butt\", joints = \"miter\", miterLimit = 10, ignoreScale = false) {\n    this.width = width;\n    this.caps = caps;\n    this.joints = joints;\n    this.miterLimit = miterLimit;\n    this.ignoreScale = ignoreScale;\n    this.path = false;\n  }\n  exec(ctx) {\n    ctx.lineWidth = this.width;\n    ctx.lineCap = isNaN(this.caps) ? this.caps : Graphics.STROKE_CAPS_MAP[this.caps];\n    ctx.lineJoin = isNaN(this.joints) ? this.joints : Graphics.STROKE_JOINTS_MAP[this.joints];\n    ctx.miterLimit = this.miterLimit;\n    ctx.ignoreScale = this.ignoreScale;\n  }\n}\n\nclass StrokeDash {\n  constructor(segments = StrokeDash.EMPTY_SEGMENTS, offset = 0) {\n    this.segments = segments;\n    this.offset = offset;\n  }\n  static get EMPTY_SEGMENTS() {\n    return _EMPTY_SEGMENTS;\n  }\n  exec(ctx) {\n    if (ctx.setLineDash) {\n      ctx.setLineDash(this.segments);\n      ctx.lineDashOffset = this.offset;\n    }\n  }\n}\n\nclass RoundRect {\n  constructor(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.radiusTL = radiusTL;\n    this.radiusTR = radiusTR;\n    this.radiusBR = radiusBR;\n    this.radiusBL = radiusBL;\n  }\n  exec(ctx) {\n    let max = (w < h ? w : h) / 2;\n    let mTL = 0, mTR = 0, mBR = 0, mBL = 0;\n    let x = this.x, y = this.y, w = this.w, h = this.h;\n    let rTL = this.radiusTL, rTR = this.radiusTR, rBR = this.radiusBR, rBL = this.radiusBL;\n    if (rTL < 0) {\n      rTL *= mTL = -1;\n    }\n    if (rTL > max) {\n      rTL = max;\n    }\n    if (rTR < 0) {\n      rTR *= mTR = -1;\n    }\n    if (rTR > max) {\n      rTR = max;\n    }\n    if (rBR < 0) {\n      rBR *= mBR = -1;\n    }\n    if (rBR > max) {\n      rBR = max;\n    }\n    if (rBL < 0) {\n      rBL *= mBL = -1;\n    }\n    if (rBL > max) {\n      rBL = max;\n    }\n    ctx.moveTo(x + w - rTR, y);\n    ctx.arcTo(x + w + rTR * mTR, y - rTR * mTR, x + w, y + rTR, rTR);\n    ctx.lineTo(x + w, y + h - rBR);\n    ctx.arcTo(x + w + rBR * mBR, y + h + rBR * mBR, x + w - rBR, y + h, rBR);\n    ctx.lineTo(x + rBL, y + h);\n    ctx.arcTo(x - rBL * mBL, y + h + rBL * mBL, x, y + h - rBL, rBL);\n    ctx.lineTo(x, y + rTL);\n    ctx.arcTo(x - rTL * mTL, y - rTL * mTL, x + rTL, y, rTL);\n    ctx.closePath();\n  }\n}\n\nclass Circle {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n  exec(ctx) {\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n  }\n}\n\nclass Ellipse {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n  exec(ctx) {\n    let x = this.x, y = this.y;\n    let w = this.w, h = this.h;\n    let k = .5522848;\n    let ox = w / 2 * k;\n    let oy = h / 2 * k;\n    let xe = x + w;\n    let ye = y + h;\n    let xm = x + w / 2;\n    let ym = y + h / 2;\n    ctx.moveTo(x, ym);\n    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n  }\n}\n\nclass PolyStar {\n  constructor(x, y, radius, sides, pointSize = 0, angle = 0) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.sides = sides;\n    this.pointSize = pointSize;\n    this.angle = angle;\n  }\n  exec(ctx) {\n    let x = this.x, y = this.y;\n    let radius = this.radius;\n    let angle = this.angle / 180 * Math.PI;\n    let sides = this.sides;\n    let ps = 1 - this.pointSize;\n    let a = Math.PI / sides;\n    ctx.moveTo(x + Math.cos(angle) * radius, y + Math.sin(angle) * radius);\n    for (let i = 0; i < sides; i++) {\n      angle += a;\n      if (ps != 1) {\n        ctx.lineTo(x + Math.cos(angle) * radius * ps, y + Math.sin(angle) * radius * ps);\n      }\n      angle += a;\n      ctx.lineTo(x + Math.cos(angle) * radius, y + Math.sin(angle) * radius);\n    }\n    ctx.closePath();\n  }\n}\n\n{\n  let canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n  if (canvas.getContext) {\n    Graphics._ctx = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  }\n  Graphics.beginCmd = new BeginPath();\n  Graphics.BASE_64 = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 26,\n    b: 27,\n    c: 28,\n    d: 29,\n    e: 30,\n    f: 31,\n    g: 32,\n    h: 33,\n    i: 34,\n    j: 35,\n    k: 36,\n    l: 37,\n    m: 38,\n    n: 39,\n    o: 40,\n    p: 41,\n    q: 42,\n    r: 43,\n    s: 44,\n    t: 45,\n    u: 46,\n    v: 47,\n    w: 48,\n    x: 49,\n    y: 50,\n    z: 51,\n    0: 52,\n    1: 53,\n    2: 54,\n    3: 55,\n    4: 56,\n    5: 57,\n    6: 58,\n    7: 59,\n    8: 60,\n    9: 61,\n    \"+\": 62,\n    \"/\": 63\n  };\n  Graphics.STROKE_CAPS_MAP = [ \"butt\", \"round\", \"square\" ];\n  Graphics.STROKE_JOINTS_MAP = [ \"miter\", \"round\", \"bevel\" ];\n  Graphics.EMPTY_SEGMENTS = [];\n}\n\nclass MovieClip extends Container {\n  constructor({mode: mode = MovieClip.INDEPENDENT, startPosition: startPosition = 0, loop: loop = -1, paused: paused = false, frameBounds: frameBounds = null, labels: labels = null}) {\n    super();\n    !MovieClip.inited && MovieClip.init();\n    this.mode = mode;\n    this.startPosition = startPosition;\n    this.loop = loop === true ? -1 : loop || 0;\n    this.currentFrame = 0;\n    this.timeline = new _createjs_tweenjs_src_Timeline__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n      useTicks: true,\n      paused: true,\n      mode: mode,\n      startPosition: startPosition,\n      loop: loop,\n      frameBounds: frameBounds,\n      labels: labels\n    });\n    this.paused = paused;\n    this.actionsEnabled = true;\n    this.autoReset = true;\n    this.frameBounds = this.frameBounds || props.frameBounds;\n    this.framerate = null;\n    this._synchOffset = 0;\n    this._rawPosition = -1;\n    this._t = 0;\n    this._managed = {};\n    this._bound_resolveState = this._resolveState.bind(this);\n  }\n  static init() {\n    if (MovieClip.inited) {\n      return;\n    }\n    MovieClipPlugin.install();\n    MovieClip.inited = true;\n  }\n  get labels() {\n    return this.timeline.labels;\n  }\n  get currentLabel() {\n    return this.timeline.getCurrentLabel();\n  }\n  get duration() {\n    return this.timeline.duration;\n  }\n  get totalFrames() {\n    return this.duration;\n  }\n  isVisible() {\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\n  }\n  draw(ctx, ignoreCache) {\n    if (this.drawCache(ctx, ignoreCache)) {\n      return true;\n    }\n    this._updateState();\n    super.draw(ctx, ignoreCache);\n    return true;\n  }\n  play() {\n    this.paused = false;\n  }\n  stop() {\n    this.paused = true;\n  }\n  gotoAndPlay(positionOrLabel) {\n    this.paused = false;\n    this._goto(positionOrLabel);\n  }\n  gotoAndStop(positionOrLabel) {\n    this.paused = true;\n    this._goto(positionOrLabel);\n  }\n  advance(time) {\n    let INDEPENDENT = MovieClip.INDEPENDENT;\n    if (this.mode !== INDEPENDENT) {\n      return;\n    }\n    let o = this, fps = o.framerate;\n    while ((o = o.parent) && fps === null) {\n      if (o.mode === INDEPENDENT) {\n        fps = o._framerate;\n      }\n    }\n    this._framerate = fps;\n    if (this.paused) {\n      return;\n    }\n    let t = fps !== null && fps !== -1 && time !== null ? time / (1e3 / fps) + this._t : 1;\n    let frames = t | 0;\n    this._t = t - frames;\n    while (frames--) {\n      this._updateTimeline(this._rawPosition + 1, false);\n    }\n  }\n  clone() {\n    throw \"MovieClip cannot be cloned.\";\n  }\n  _updateState() {\n    if (this._rawPosition === -1 || this.mode !== MovieClip.INDEPENDENT) {\n      this._updateTimeline(-1);\n    }\n  }\n  _tick(evtObj) {\n    this.advance(evtObj && evtObj.delta);\n    super._tick(evtObj);\n  }\n  _goto(positionOrLabel) {\n    let pos = this.timeline.resolve(positionOrLabel);\n    if (pos == null) {\n      return;\n    }\n    this._t = 0;\n    this._updateTimeline(pos, true);\n  }\n  _reset() {\n    this._rawPosition = -1;\n    this._t = this.currentFrame = 0;\n    this.paused = false;\n  }\n  _updateTimeline(rawPosition, jump) {\n    let synced = this.mode !== MovieClip.INDEPENDENT, tl = this.timeline;\n    if (synced) {\n      rawPosition = this.startPosition + (this.mode === MovieClip.SINGLE_FRAME ? 0 : this._synchOffset);\n    }\n    if (rawPosition < 1) {\n      rawPosition = 0;\n    }\n    if (this._rawPosition === rawPosition && !synced) {\n      return;\n    }\n    this._rawPosition = rawPosition;\n    tl.loop = this.loop;\n    tl.setPosition(rawPosition, synced || !this.actionsEnabled, jump, this._bound_resolveState);\n  }\n  _renderFirstFrame() {\n    const tl = this.timeline, pos = tl.rawPosition;\n    tl.setPosition(0, true, true, this._bound_resolveState);\n    tl.rawPosition = pos;\n  }\n  _resolveState() {\n    let tl = this.timeline;\n    this.currentFrame = tl.position;\n    for (let n in this._managed) {\n      this._managed[n] = 1;\n    }\n    let tweens = tl.tweens;\n    for (let tween of tweens) {\n      let target = tween.target;\n      if (target === this || tween.passive) {\n        continue;\n      }\n      let offset = tween._stepPosition;\n      if (target instanceof DisplayObject) {\n        this._addManagedChild(target, offset);\n      } else {\n        this._setState(target.state, offset);\n      }\n    }\n    let kids = this.children;\n    for (let i = kids.length - 1; i >= 0; i--) {\n      let id = kids[i].id;\n      if (this._managed[id] === 1) {\n        this.removeChildAt(i);\n        delete this._managed[id];\n      }\n    }\n  }\n  _setState(state, offset) {\n    if (!state) {\n      return;\n    }\n    for (let i = state.length - 1; i >= 0; i--) {\n      let o = state[i];\n      let target = o.t;\n      let props = o.p;\n      for (let n in props) {\n        target[n] = props[n];\n      }\n      this._addManagedChild(target, offset);\n    }\n  }\n  _addManagedChild(child, offset) {\n    if (child._off) {\n      return;\n    }\n    this.addChildAt(child, 0);\n    if (child instanceof MovieClip) {\n      child._synchOffset = offset;\n      if (child.mode === MovieClip.INDEPENDENT && child.autoReset && !this._managed[child.id]) {\n        child._reset();\n      }\n    }\n    this._managed[child.id] = 2;\n  }\n  _getBounds(matrix, ignoreTransform) {\n    let bounds = this.getBounds();\n    if (!bounds && this.frameBounds) {\n      bounds = this._rectangle.copy(this.frameBounds[this.currentFrame]);\n    }\n    if (bounds) {\n      return this._transformBounds(bounds, matrix, ignoreTransform);\n    }\n    return super._getBounds(matrix, ignoreTransform);\n  }\n}\n\n{\n  MovieClip.INDEPENDENT = \"independent\";\n  MovieClip.SINGLE_FRAME = \"single\";\n  MovieClip.SYNCHED = \"synched\";\n  MovieClip.inited = false;\n}\n\nclass MovieClipPlugin {\n  constructor() {\n    throw \"MovieClipPlugin cannot be instantiated.\";\n  }\n  static install() {\n    _createjs_tweenjs_src_Tween__WEBPACK_IMPORTED_MODULE_0__[\"default\"].installPlugin(MovieClipPlugin);\n  }\n  static init(tween, prop, value) {\n    return value;\n  }\n  static tween(tween, prop, value, startValues, endValues, ratio, wait, end) {\n    if (!(tween.target instanceof MovieClip)) {\n      return value;\n    }\n    return ratio === 1 ? endValues[prop] : startValues[prop];\n  }\n}\n\n{\n  MovieClipPlugin.priority = 100;\n}\n\nclass Shadow$1 {\n  constructor(color = \"black\", offsetX = 0, offsetY = 0, blur = 0) {\n    this.color = color;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.blur = blur;\n  }\n  toString() {\n    return `[${this.constructor.name}]`;\n  }\n  clone() {\n    return new Shadow$1(this.color, this.offsetX, this.offsetY, this.blur);\n  }\n}\n\n{\n  Shadow$1.identity = new Shadow$1(\"transparent\");\n}\n\nclass Shape extends DisplayObject {\n  constructor(graphics = new Graphics()) {\n    super();\n    this.graphics = graphics;\n  }\n  isVisible() {\n    let hasContent = this.cacheCanvas || this.graphics && !this.graphics.isEmpty();\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  }\n  draw(ctx, ignoreCache = false) {\n    if (super.draw(ctx, ignoreCache)) {\n      return true;\n    }\n    this.graphics.draw(ctx, this);\n    return true;\n  }\n  clone(recursive = false) {\n    let g = recursive && this.graphics ? this.graphics.clone() : this.graphics;\n    return this._cloneProps(new Shape(g));\n  }\n}\n\nclass SpriteSheet extends EventDispatcher {\n  constructor(data) {\n    super();\n    this.complete = true;\n    this.framerate = 0;\n    this._animations = null;\n    this._frames = null;\n    this._images = null;\n    this._data = null;\n    this._loadCount = 0;\n    this._frameHeight = 0;\n    this._frameWidth = 0;\n    this._numFrames = 0;\n    this._regX = 0;\n    this._regY = 0;\n    this._spacing = 0;\n    this._margin = 0;\n    this._parseData(data);\n  }\n  get animations() {\n    return this._animations.slice();\n  }\n  getNumFrames(animation) {\n    if (animation == null) {\n      return this._frames ? this._frames.length : this._numFrames || 0;\n    } else {\n      let data = this._data[animation];\n      if (data == null) {\n        return 0;\n      } else {\n        return data.frames.length;\n      }\n    }\n  }\n  getAnimation(name) {\n    return this._data[name];\n  }\n  getFrame(frameIndex) {\n    let frame;\n    if (this._frames && (frame = this._frames[frameIndex])) {\n      return frame;\n    }\n    return null;\n  }\n  getFrameBounds(frameIndex, rectangle = new Rectangle()) {\n    let frame = this.getFrame(frameIndex);\n    return frame ? rectangle.setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;\n  }\n  toString() {\n    return `[${this.constructor.name}]`;\n  }\n  clone() {\n    throw \"SpriteSheet cannot be cloned.\";\n  }\n  _parseData(data) {\n    if (data == null) {\n      return;\n    }\n    this.framerate = data.framerate || 0;\n    if (data.images) {\n      for (let img of data.images) {\n        let a = this._images = [];\n        let src;\n        if (typeof img === \"string\") {\n          src = img;\n          img = document.createElement(\"img\");\n          img.src = src;\n        }\n        a.push(img);\n        if (!img.getContext && !img.naturalWidth) {\n          this._loadCount++;\n          this.complete = false;\n          img.onload = (() => this._handleImageLoad(src));\n          img.onerror = (() => this._handleImageError(src));\n        }\n      }\n    }\n    if (data.frames != null) {\n      if (Array.isArray(data.frames)) {\n        this._frames = [];\n        for (let arr of data.frames) {\n          this._frames.push({\n            image: this._images[arr[4] ? arr[4] : 0],\n            rect: new Rectangle(arr[0], arr[1], arr[2], arr[3]),\n            regX: arr[5] || 0,\n            regY: arr[6] || 0\n          });\n        }\n      } else {\n        let o = data.frames;\n        this._frameWidth = o.width;\n        this._frameHeight = o.height;\n        this._regX = o.regX || 0;\n        this._regY = o.regY || 0;\n        this._spacing = o.spacing || 0;\n        this._margin = o.margin || 0;\n        this._numFrames = o.count;\n        if (this._loadCount === 0) {\n          this._calculateFrames();\n        }\n      }\n    }\n    this._animations = [];\n    if (data.animations != null) {\n      this._data = {};\n      let o = data.animations;\n      for (let name in o) {\n        let anim = {\n          name: name\n        };\n        let obj = o[name];\n        let a;\n        if (typeof obj === \"number\") {\n          a = anim.frames = [ obj ];\n        } else if (Array.isArray(obj)) {\n          if (obj.length === 1) {\n            anim.frames = [ obj[0] ];\n          } else {\n            anim.speed = obj[3];\n            anim.next = obj[2];\n            a = anim.frames = [];\n            for (let i = obj[0]; i <= obj[1]; i++) {\n              a.push(i);\n            }\n          }\n        } else {\n          anim.speed = obj.speed;\n          anim.next = obj.next;\n          let frames = obj.frames;\n          a = anim.frames = typeof frames === \"number\" ? [ frames ] : frames.slice(0);\n        }\n        if (anim.next === true || anim.next === undefined) {\n          anim.next = name;\n        }\n        if (anim.next === false || a.length < 2 && anim.next === name) {\n          anim.next = null;\n        }\n        if (!anim.speed) {\n          anim.speed = 1;\n        }\n        this._animations.push(name);\n        this._data[name] = anim;\n      }\n    }\n  }\n  _handleImageLoad(src) {\n    if (--this._loadCount === 0) {\n      this._calculateFrames();\n      this.complete = true;\n      this.dispatchEvent(\"complete\");\n    }\n  }\n  _handleImageError(src) {\n    let errorEvent = new Event(\"error\");\n    errorEvent.src = src;\n    this.dispatchEvent(errorEvent);\n    if (--this._loadCount === 0) {\n      this.dispatchEvent(\"complete\");\n    }\n  }\n  _calculateFrames() {\n    if (this._frames || this._frameWidth === 0) {\n      return;\n    }\n    this._frames = [];\n    let maxFrames = this._numFrames || 1e5;\n    let frameCount = 0, frameWidth = this._frameWidth, frameHeight = this._frameHeight;\n    let spacing = this._spacing, margin = this._margin;\n    imgLoop: for (let i = 0, imgs = this._images, l = imgs.length; i < l; i++) {\n      let img = imgs[i], imgW = img.width || img.naturalWidth, imgH = img.height || img.naturalHeight;\n      let y = margin;\n      while (y <= imgH - margin - frameHeight) {\n        let x = margin;\n        while (x <= imgW - margin - frameWidth) {\n          if (frameCount >= maxFrames) {\n            break imgLoop;\n          }\n          frameCount++;\n          this._frames.push({\n            image: img,\n            rect: new Rectangle(x, y, frameWidth, frameHeight),\n            regX: this._regX,\n            regY: this._regY\n          });\n          x += frameWidth + spacing;\n        }\n        y += frameHeight + spacing;\n      }\n    }\n    this._numFrames = frameCount;\n  }\n}\n\nconst _H_OFFSETS = {\n  start: 0,\n  left: 0,\n  center: -.5,\n  end: -1,\n  right: -1\n};\n\nconst _V_OFFSETS = {\n  top: 0,\n  hanging: -.01,\n  middle: -.4,\n  alphabetic: -.8,\n  ideographic: -.85,\n  bottom: -1\n};\n\nclass Text extends DisplayObject {\n  constructor(text, font, color) {\n    super();\n    this.text = text;\n    this.font = font;\n    this.color = color;\n    this.textAlign = \"left\";\n    this.textBaseline = \"top\";\n    this.maxWidth = null;\n    this.outline = 0;\n    this.lineHeight = 0;\n    this.lineWidth = null;\n  }\n  static get H_OFFSETS() {\n    return _H_OFFSETS;\n  }\n  static get V_OFFSETS() {\n    return _V_OFFSETS;\n  }\n  isVisible() {\n    let hasContent = this.cacheCanvas || this.text != null && this.text !== \"\";\n    return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n  }\n  draw(ctx, ignoreCache) {\n    if (super.draw(ctx, ignoreCache)) {\n      return true;\n    }\n    let col = this.color || \"#000\";\n    if (this.outline) {\n      ctx.strokeStyle = col;\n      ctx.lineWidth = this.outline * 1;\n    } else {\n      ctx.fillStyle = col;\n    }\n    this._drawText(this._prepContext(ctx));\n    return true;\n  }\n  getMeasuredWidth() {\n    return this._getMeasuredWidth(this.text);\n  }\n  getMeasuredLineHeight() {\n    return this._getMeasuredWidth(\"M\") * 1.2;\n  }\n  getMeasuredHeight() {\n    return this._drawText(null, {}).height;\n  }\n  getBounds() {\n    let rect = super.getBounds();\n    if (rect) {\n      return rect;\n    }\n    if (this.text == null || this.text === \"\") {\n      return null;\n    }\n    let o = this._drawText(null, {});\n    let w = this.maxWidth && this.maxWidth < o.width ? this.maxWidth : o.width;\n    let x = w * Text.H_OFFSETS[this.textAlign || \"left\"];\n    let lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n    let y = lineHeight * Text.V_OFFSETS[this.textBaseline || \"top\"];\n    return this._rectangle.setValues(x, y, w, o.height);\n  }\n  getMetrics() {\n    let o = {\n      lines: []\n    };\n    o.lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n    o.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline || \"top\"];\n    return this._drawText(null, o, o.lines);\n  }\n  clone() {\n    return this._cloneProps(new Text(this.text, this.font, this.color));\n  }\n  toString() {\n    return `[${this.constructor.name} (text=${this.text.length > 20 ? `${this.text.substr(0, 17)}...` : this.text})]`;\n  }\n  _cloneProps(o) {\n    super._cloneProps(o);\n    o.textAlign = this.textAlign;\n    o.textBaseline = this.textBaseline;\n    o.maxWidth = this.maxWidth;\n    o.outline = this.outline;\n    o.lineHeight = this.lineHeight;\n    o.lineWidth = this.lineWidth;\n    return o;\n  }\n  _prepContext(ctx) {\n    ctx.font = this.font || \"10px sans-serif\";\n    ctx.textAlign = this.textAlign || \"left\";\n    ctx.textBaseline = this.textBaseline || \"top\";\n    ctx.lineJoin = \"miter\";\n    ctx.miterLimit = 2.5;\n    return ctx;\n  }\n  _drawText(ctx, o, lines) {\n    const paint = !!ctx;\n    if (!paint) {\n      ctx = Text._workingContext;\n      ctx.save();\n      this._prepContext(ctx);\n    }\n    let lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n    let maxW = 0, count = 0;\n    let hardLines = String(this.text).split(/(?:\\r\\n|\\r|\\n)/);\n    for (let str of hardLines) {\n      let w = null;\n      if (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {\n        let words = str.split(/(\\s)/);\n        str = words[0];\n        w = ctx.measureText(str).width;\n        const l = words.length;\n        for (let i = 1; i < l; i += 2) {\n          let wordW = ctx.measureText(words[i] + words[i + 1]).width;\n          if (w + wordW > this.lineWidth) {\n            if (paint) {\n              this._drawTextLine(ctx, str, count * lineHeight);\n            }\n            if (lines) {\n              lines.push(str);\n            }\n            if (w > maxW) {\n              maxW = w;\n            }\n            str = words[i + 1];\n            w = ctx.measureText(str).width;\n            count++;\n          } else {\n            str += words[i] + words[i + 1];\n            w += wordW;\n          }\n        }\n      }\n      if (paint) {\n        this._drawTextLine(ctx, str, count * lineHeight);\n      }\n      if (lines) {\n        lines.push(str);\n      }\n      if (o && w == null) {\n        w = ctx.measureText(str).width;\n      }\n      if (w > maxW) {\n        maxW = w;\n      }\n      count++;\n    }\n    if (o) {\n      o.width = maxW;\n      o.height = count * lineHeight;\n    }\n    if (!paint) {\n      ctx.restore();\n    }\n    return o;\n  }\n  _drawTextLine(ctx, text, y) {\n    if (this.outline) {\n      ctx.strokeText(text, 0, y, this.maxWidth || 65535);\n    } else {\n      ctx.fillText(text, 0, y, this.maxWidth || 65535);\n    }\n  }\n  _getMeasuredWidth(text) {\n    let ctx = Text._workingContext;\n    ctx.save();\n    let w = this._prepContext(ctx).measureText(text).width;\n    ctx.restore();\n    return w;\n  }\n}\n\n{\n  let canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n  if (canvas.getContext) {\n    Text._workingContext = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  }\n}\n\nclass AlphaMapFilter extends Filter {\n  constructor(alphaMap) {\n    super();\n    this.alphaMap = alphaMap;\n    this._alphaMap = null;\n    this._mapData = null;\n    this._mapTexture = null;\n    this.FRAG_SHADER_BODY = `\\n\\t\\t\\tuniform sampler2D uAlphaSampler;\\n\\n\\t\\t\\tvoid main (void) {\\n\\t\\t\\t\\tvec4 color = texture2D(uSampler, vRenderCoord);\\n\\t\\t\\t\\tvec4 alphaMap = texture2D(uAlphaSampler, vTextureCoord);\\n\\n\\t\\t\\t\\t// some image formats can have transparent white rgba(1,1,1, 0) when put on the GPU, this means we need a slight tweak\\n\\t\\t\\t\\t// using ceil ensure that the colour will be used so long as it exists but pure transparency will be treated black\\n\\t\\t\\t\\tgl_FragColor = vec4(color.rgb, color.a * (alphaMap.r * ceil(alphaMap.a)));\\n\\t\\t\\t}\\n\\t\\t`;\n  }\n  shaderParamSetup(gl, stage, shaderProgram) {\n    if (!this._mapTexture) {\n      this._mapTexture = gl.createTexture();\n    }\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, this._mapTexture);\n    stage.setTextureParams(gl);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.alphaMap);\n    gl.uniform1i(gl.getUniformLocation(shaderProgram, \"uAlphaSampler\"), 1);\n  }\n  clone() {\n    let o = new AlphaMapFilter(this.alphaMap);\n    o._alphaMap = this._alphaMap;\n    o._mapData = this._mapData;\n    return o;\n  }\n  _applyFilter(imageData) {\n    if (!this.alphaMap) {\n      return true;\n    }\n    if (!this._prepAlphaMap()) {\n      return false;\n    }\n    let data = imageData.data;\n    let map = this._mapData;\n    const l = data.length;\n    for (let i = 0; i < l; i += 4) {\n      data[i + 3] = map[i] || 0;\n    }\n    return true;\n  }\n  _prepAlphaMap() {\n    if (!this.alphaMap) {\n      return false;\n    }\n    if (this.alphaMap === this._alphaMap && this._mapData) {\n      return true;\n    }\n    this._mapData = null;\n    let map = this._alphaMap = this.alphaMap;\n    let canvas = map;\n    let ctx;\n    if (map instanceof HTMLCanvasElement) {\n      ctx = canvas.getContext(\"2d\");\n    } else {\n      canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n      canvas.width = map.width;\n      canvas.height = map.height;\n      ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(map, 0, 0);\n    }\n    try {\n      this._mapData = ctx.getImageData(0, 0, map.width, map.height).data;\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nclass AlphaMaskFilter extends Filter {\n  constructor(mask) {\n    super();\n    this.mask = mask;\n    this.usesContext = true;\n    this.FRAG_SHADER_BODY = `\\n\\t\\t\\tuniform sampler2D uAlphaSampler;\\n\\n\\t\\t\\tvoid main (void) {\\n\\t\\t\\t\\tvec4 color = texture2D(uSampler, vRenderCoord);\\n\\t\\t\\t\\tvec4 alphaMap = texture2D(uAlphaSampler, vTextureCoord);\\n\\n\\t\\t\\t\\tgl_FragColor = vec4(color.rgb, color.a * alphaMap.a);\\n\\t\\t\\t}\\n\\t\\t`;\n  }\n  applyFilter(ctx, x, y, width, height, targetCtx, targetX, targetY) {\n    if (!this.mask) {\n      return true;\n    }\n    targetCtx = targetCtx || ctx;\n    if (targetX == null) {\n      targetX = x;\n    }\n    if (targetY == null) {\n      targetY = y;\n    }\n    targetCtx.save();\n    if (ctx != targetCtx) {\n      return false;\n    }\n    targetCtx.globalCompositeOperation = \"destination-in\";\n    targetCtx.drawImage(this.mask, targetX, targetY);\n    targetCtx.restore();\n    return true;\n  }\n  clone() {\n    return new AlphaMaskFilter(this.mask);\n  }\n  shaderParamSetup(gl, stage, shaderProgram) {\n    if (!this._mapTexture) {\n      this._mapTexture = gl.createTexture();\n    }\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, this._mapTexture);\n    stage.setTextureParams(gl);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.mask);\n    gl.uniform1i(gl.getUniformLocation(shaderProgram, \"uAlphaSampler\"), 1);\n  }\n}\n\nconst _MUL_TABLE = [ 1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1 ];\n\nconst _SHG_TABLE = [ 0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9 ];\n\nclass BlurFilter extends Filter {\n  constructor(blurX = 0, blurY = 0, quality = 1) {\n    super();\n    this._blurX = blurX;\n    this._blurXTable = [];\n    this._lastBlurX = null;\n    this._blurY = blurY;\n    this._blurYTable = [];\n    this._lastBlurY = null;\n    this._quality = isNaN(quality) || quality < 1 ? 1 : quality;\n    this._lastQuality = null;\n    this.quality = this._quality | 0;\n    this.FRAG_SHADER_TEMPLATE = `\\n\\t\\t\\tuniform float xWeight[{{blurX}}];\\n\\t\\t\\tuniform float yWeight[{{blurY}}];\\n\\t\\t\\tuniform vec2 textureOffset;\\n\\t\\t\\tvoid main (void) {\\n\\t\\t\\t\\tvec4 color = vec4(0.0);\\n\\n\\t\\t\\t\\tfloat xAdj = ({{blurX}}.0-1.0)/2.0;\\n\\t\\t\\t\\tfloat yAdj = ({{blurY}}.0-1.0)/2.0;\\n\\t\\t\\t\\tvec2 sampleOffset;\\n\\n\\t\\t\\t\\tfor(int i=0; i<{{blurX}}; i++) {\\n\\t\\t\\t\\t\\tfor(int j=0; j<{{blurY}}; j++) {\\n\\t\\t\\t\\t\\t\\tsampleOffset = vRenderCoord + (textureOffset * vec2(float(i)-xAdj, float(j)-yAdj));\\n\\t\\t\\t\\t\\t\\tcolor += texture2D(uSampler, sampleOffset) * (xWeight[i] * yWeight[j]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = color.rgba;\\n\\t\\t\\t}\\n\\t\\t`;\n  }\n  static get MUL_TABLE() {\n    return _MUL_TABLE;\n  }\n  static get SHG_TABLE() {\n    return _SHG_TABLE;\n  }\n  get blurX() {\n    return this._blurX;\n  }\n  set blurX(blurX) {\n    if (isNaN(blurX) || blurX < 0) {\n      blurX = 0;\n    }\n    this._blurX = blurX;\n  }\n  get blurY() {\n    return this._blurY;\n  }\n  set blurY(blurY) {\n    if (isNaN(blurY) || blurY < 0) {\n      blurY = 0;\n    }\n    this._blurY = blurY;\n  }\n  get quality() {\n    return this._quality;\n  }\n  set quality(quality) {\n    if (isNaN(quality) || quality < 0) {\n      quality = 0;\n    }\n    this._quality = quality | 0;\n  }\n  get _buildShader() {\n    const xChange = this._lastBlurX !== this._blurX;\n    const yChange = this._lastBlurY !== this._blurY;\n    const qChange = this._lastQuality !== this._quality;\n    if (xChange || yChange || qChange) {\n      if (xChange || qChange) {\n        this._blurXTable = this._getTable(this._blurX * this._quality);\n      }\n      if (yChange || qChange) {\n        this._blurYTable = this._getTable(this._blurY * this._quality);\n      }\n      this._updateShader();\n      this._lastBlurX = this._blurX;\n      this._lastBlurY = this._blurY;\n      this._lastQuality = this._quality;\n      return undefined;\n    }\n    return this._compiledShader;\n  }\n  set _builtShader(value) {\n    this._compiledShader;\n  }\n  shaderParamSetup(gl, stage, shaderProgram) {\n    gl.uniform1fv(gl.getUniformLocation(shaderProgram, \"xWeight\"), this._blurXTable);\n    gl.uniform1fv(gl.getUniformLocation(shaderProgram, \"yWeight\"), this._blurYTable);\n    gl.uniform2f(gl.getUniformLocation(shaderProgram, \"textureOffset\"), 2 / (stage._viewportWidth * this._quality), 2 / (stage._viewportHeight * this._quality));\n  }\n  getBounds(rect) {\n    let x = this.blurX | 0, y = this.blurY | 0;\n    if (x <= 0 && y <= 0) {\n      return rect;\n    }\n    let q = Math.pow(this.quality, .2);\n    return (rect || new Rectangle()).pad(y * q + 1, x * q + 1, y * q + 1, x * q + 1);\n  }\n  clone() {\n    return new BlurFilter(this.blurX, this.blurY, this.quality);\n  }\n  _updateShader() {\n    let result = this.FRAG_SHADER_TEMPLATE;\n    result = result.replace(/{{blurX}}/g, this._blurXTable.length.toFixed(0));\n    result = result.replace(/{{blurY}}/g, this._blurYTable.length.toFixed(0));\n    this.FRAG_SHADER_BODY = result;\n  }\n  _getTable(spread) {\n    const EDGE = 4.2;\n    if (spread <= 1) {\n      return [ 1 ];\n    }\n    let result = [];\n    let count = Math.ceil(spread * 2);\n    count += count % 2 ? 0 : 1;\n    let adjust = count / 2 | 0;\n    for (let i = -adjust; i <= adjust; i++) {\n      let x = i / adjust * EDGE;\n      result.push(1 / Math.sqrt(2 * Math.PI) * Math.pow(Math.E, -(Math.pow(x, 2) / 4)));\n    }\n    let factor = result.reduce((a, b) => a + b, 0);\n    return result.map(currentValue => currentValue / factor);\n  }\n  _applyFilter(imageData) {\n    let radiusX = this._blurX >> 1;\n    if (isNaN(radiusX) || radiusX < 0) return false;\n    let radiusY = this._blurY >> 1;\n    if (isNaN(radiusY) || radiusY < 0) return false;\n    if (radiusX === 0 && radiusY === 0) return false;\n    let iterations = this.quality;\n    if (isNaN(iterations) || iterations < 1) iterations = 1;\n    iterations |= 0;\n    if (iterations > 3) iterations = 3;\n    if (iterations < 1) iterations = 1;\n    let px = imageData.data;\n    let x = 0, y = 0, i = 0, p = 0, yp = 0, yi = 0, yw = 0, r = 0, g = 0, b = 0, a = 0, pr = 0, pg = 0, pb = 0, pa = 0;\n    let divx = radiusX + radiusX + 1 | 0;\n    let divy = radiusY + radiusY + 1 | 0;\n    let w = imageData.width | 0;\n    let h = imageData.height | 0;\n    let w1 = w - 1 | 0;\n    let h1 = h - 1 | 0;\n    let rxp1 = radiusX + 1 | 0;\n    let ryp1 = radiusY + 1 | 0;\n    let ssx = {\n      r: 0,\n      b: 0,\n      g: 0,\n      a: 0\n    };\n    let sx = ssx;\n    for (i = 1; i < divx; i++) {\n      sx = sx.n = {\n        r: 0,\n        b: 0,\n        g: 0,\n        a: 0\n      };\n    }\n    sx.n = ssx;\n    let ssy = {\n      r: 0,\n      b: 0,\n      g: 0,\n      a: 0\n    };\n    let sy = ssy;\n    for (i = 1; i < divy; i++) {\n      sy = sy.n = {\n        r: 0,\n        b: 0,\n        g: 0,\n        a: 0\n      };\n    }\n    sy.n = ssy;\n    let si = null;\n    let mtx = BlurFilter.MUL_TABLE[radiusX] | 0;\n    let stx = BlurFilter.SHG_TABLE[radiusX] | 0;\n    let mty = BlurFilter.MUL_TABLE[radiusY] | 0;\n    let sty = BlurFilter.SHG_TABLE[radiusY] | 0;\n    while (iterations-- > 0) {\n      yw = yi = 0;\n      let ms = mtx;\n      let ss = stx;\n      for (y = h; --y > -1; ) {\n        r = rxp1 * (pr = px[yi | 0]);\n        g = rxp1 * (pg = px[yi + 1 | 0]);\n        b = rxp1 * (pb = px[yi + 2 | 0]);\n        a = rxp1 * (pa = px[yi + 3 | 0]);\n        sx = ssx;\n        for (i = rxp1; --i > -1; ) {\n          sx.r = pr;\n          sx.g = pg;\n          sx.b = pb;\n          sx.a = pa;\n          sx = sx.n;\n        }\n        for (i = 1; i < rxp1; i++) {\n          p = yi + ((w1 < i ? w1 : i) << 2) | 0;\n          r += sx.r = px[p];\n          g += sx.g = px[p + 1];\n          b += sx.b = px[p + 2];\n          a += sx.a = px[p + 3];\n          sx = sx.n;\n        }\n        si = ssx;\n        for (x = 0; x < w; x++) {\n          px[yi++] = r * ms >>> ss;\n          px[yi++] = g * ms >>> ss;\n          px[yi++] = b * ms >>> ss;\n          px[yi++] = a * ms >>> ss;\n          p = yw + ((p = x + radiusX + 1) < w1 ? p : w1) << 2;\n          r -= si.r - (si.r = px[p]);\n          g -= si.g - (si.g = px[p + 1]);\n          b -= si.b - (si.b = px[p + 2]);\n          a -= si.a - (si.a = px[p + 3]);\n          si = si.n;\n        }\n        yw += w;\n      }\n      ms = mty;\n      ss = sty;\n      for (x = 0; x < w; x++) {\n        yi = x << 2 | 0;\n        r = ryp1 * (pr = px[yi]) | 0;\n        g = ryp1 * (pg = px[yi + 1 | 0]) | 0;\n        b = ryp1 * (pb = px[yi + 2 | 0]) | 0;\n        a = ryp1 * (pa = px[yi + 3 | 0]) | 0;\n        sy = ssy;\n        for (i = 0; i < ryp1; i++) {\n          sy.r = pr;\n          sy.g = pg;\n          sy.b = pb;\n          sy.a = pa;\n          sy = sy.n;\n        }\n        yp = w;\n        for (i = 1; i <= radiusY; i++) {\n          yi = yp + x << 2;\n          r += sy.r = px[yi];\n          g += sy.g = px[yi + 1];\n          b += sy.b = px[yi + 2];\n          a += sy.a = px[yi + 3];\n          sy = sy.n;\n          if (i < h1) {\n            yp += w;\n          }\n        }\n        yi = x;\n        si = ssy;\n        if (iterations > 0) {\n          for (y = 0; y < h; y++) {\n            p = yi << 2;\n            px[p + 3] = pa = a * ms >>> ss;\n            if (pa > 0) {\n              px[p] = r * ms >>> ss;\n              px[p + 1] = g * ms >>> ss;\n              px[p + 2] = b * ms >>> ss;\n            } else {\n              px[p] = px[p + 1] = px[p + 2] = 0;\n            }\n            p = x + ((p = y + ryp1) < h1 ? p : h1) * w << 2;\n            r -= si.r - (si.r = px[p]);\n            g -= si.g - (si.g = px[p + 1]);\n            b -= si.b - (si.b = px[p + 2]);\n            a -= si.a - (si.a = px[p + 3]);\n            si = si.n;\n            yi += w;\n          }\n        } else {\n          for (y = 0; y < h; y++) {\n            p = yi << 2;\n            px[p + 3] = pa = a * ms >>> ss;\n            if (pa > 0) {\n              pa = 255 / pa;\n              px[p] = (r * ms >>> ss) * pa;\n              px[p + 1] = (g * ms >>> ss) * pa;\n              px[p + 2] = (b * ms >>> ss) * pa;\n            } else {\n              px[p] = px[p + 1] = px[p + 2] = 0;\n            }\n            p = x + ((p = y + ryp1) < h1 ? p : h1) * w << 2;\n            r -= si.r - (si.r = px[p]);\n            g -= si.g - (si.g = px[p + 1]);\n            b -= si.b - (si.b = px[p + 2]);\n            a -= si.a - (si.a = px[p + 3]);\n            si = si.n;\n            yi += w;\n          }\n        }\n      }\n    }\n    return true;\n  }\n}\n\nclass ColorFilter extends Filter {\n  constructor(redMultiplier = 1, greenMultiplier = 1, blueMultiplier = 1, alphaMultiplier = 1, redOffset = 0, greenOffset = 0, blueOffset = 0, alphaOffset = 0) {\n    super();\n    this.redMultiplier = redMultiplier;\n    this.greenMultiplier = greenMultiplier;\n    this.blueMultiplier = blueMultiplier;\n    this.alphaMultiplier = alphaMultiplier;\n    this.redOffset = redOffset;\n    this.greenOffset = greenOffset;\n    this.blueOffset = blueOffset;\n    this.alphaOffset = alphaOffset;\n    this.FRAG_SHADER_BODY = `\\n\\t\\t\\tuniform vec4 uColorMultiplier;\\n\\t\\t\\tuniform vec4 uColorOffset;\\n\\n\\t\\t\\tvoid main (void) {\\n\\t\\t\\t\\tvec4 color = texture2D(uSampler, vRenderCoord);\\n\\n\\t\\t\\t\\tgl_FragColor = (color * uColorMultiplier) + uColorOffset;\\n\\t\\t\\t}\\n\\t\\t`;\n  }\n  shaderParamSetup(gl, stage, shaderProgram) {\n    gl.uniform4f(gl.getUniformLocation(shaderProgram, \"uColorMultiplier\"), this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier);\n    gl.uniform4f(gl.getUniformLocation(shaderProgram, \"uColorOffset\"), this.redOffset / 255, this.greenOffset / 255, this.blueOffset / 255, this.alphaOffset / 255);\n  }\n  clone() {\n    return new ColorFilter(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);\n  }\n  _applyFilter(imageData) {\n    let data = imageData.data;\n    const l = data.length;\n    for (let i = 0; i < l; i += 4) {\n      data[i] = data[i] * this.redMultiplier + this.redOffset;\n      data[i + 1] = data[i + 1] * this.greenMultiplier + this.greenOffset;\n      data[i + 2] = data[i + 2] * this.blueMultiplier + this.blueOffset;\n      data[i + 3] = data[i + 3] * this.alphaMultiplier + this.alphaOffset;\n    }\n    return true;\n  }\n}\n\nconst _DELTA_INDEX = [ 0, .01, .02, .04, .05, .06, .07, .08, .1, .11, .12, .14, .15, .16, .17, .18, .2, .21, .22, .24, .25, .27, .28, .3, .32, .34, .36, .38, .4, .42, .44, .46, .48, .5, .53, .56, .59, .62, .65, .68, .71, .74, .77, .8, .83, .86, .89, .92, .95, .98, 1, 1.06, 1.12, 1.18, 1.24, 1.3, 1.36, 1.42, 1.48, 1.54, 1.6, 1.66, 1.72, 1.78, 1.84, 1.9, 1.96, 2, 2.12, 2.25, 2.37, 2.5, 2.62, 2.75, 2.87, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.3, 4.7, 4.9, 5, 5.5, 6, 6.5, 6.8, 7, 7.3, 7.5, 7.8, 8, 8.4, 8.7, 9, 9.4, 9.6, 9.8, 10 ];\n\nconst _IDENTITY_MATRIX = [ 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ];\n\nconst _LENGTH = 25;\n\nclass ColorMatrix {\n  constructor(brightness, contrast, saturation, hue) {\n    this.setColor(brightness, contrast, saturation, hue);\n  }\n  static get DELTA_INDEX() {\n    return _DELTA_INDEX;\n  }\n  static get IDENTITY_MATRIX() {\n    return _IDENTITY_MATRIX;\n  }\n  static get LENGTH() {\n    return _LENGTH;\n  }\n  setColor(brightness, contrast, saturation, hue) {\n    return this.reset().adjustColor(brightness, contrast, saturation, hue);\n  }\n  reset() {\n    return this.copy(ColorMatrix.IDENTITY_MATRIX);\n  }\n  adjustColor(brightness, contrast, saturation, hue) {\n    this.adjustHue(hue);\n    this.adjustContrast(contrast);\n    this.adjustBrightness(brightness);\n    return this.adjustSaturation(saturation);\n  }\n  adjustBrightness(value) {\n    if (value === 0 || isNaN(value)) {\n      return this;\n    }\n    value = this._cleanValue(value, 255);\n    this._multiplyMatrix([ 1, 0, 0, 0, value, 0, 1, 0, 0, value, 0, 0, 1, 0, value, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);\n    return this;\n  }\n  adjustContrast(value) {\n    if (value === 0 || isNaN(value)) {\n      return this;\n    }\n    value = this._cleanValue(value, 100);\n    let x;\n    if (value < 0) {\n      x = 127 + value / 100 * 127;\n    } else {\n      x = value % 1;\n      if (x === 0) {\n        x = ColorMatrix.DELTA_INDEX[value];\n      } else {\n        x = ColorMatrix.DELTA_INDEX[value << 0] * (1 - x) + ColorMatrix.DELTA_INDEX[(value << 0) + 1] * x;\n      }\n      x = x * 127 + 127;\n    }\n    this._multiplyMatrix([ x / 127, 0, 0, 0, .5 * (127 - x), 0, x / 127, 0, 0, .5 * (127 - x), 0, 0, x / 127, 0, .5 * (127 - x), 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);\n    return this;\n  }\n  adjustSaturation(value) {\n    if (value === 0 || isNaN(value)) {\n      return this;\n    }\n    value = this._cleanValue(value, 100);\n    let x = 1 + (value > 0 ? 3 * value / 100 : value / 100);\n    let lumR = .3086;\n    let lumG = .6094;\n    let lumB = .082;\n    this._multiplyMatrix([ lumR * (1 - x) + x, lumG * (1 - x), lumB * (1 - x), 0, 0, lumR * (1 - x), lumG * (1 - x) + x, lumB * (1 - x), 0, 0, lumR * (1 - x), lumG * (1 - x), lumB * (1 - x) + x, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);\n    return this;\n  }\n  adjustHue(value) {\n    if (value === 0 || isNaN(value)) {\n      return this;\n    }\n    value = this._cleanValue(value, 180) / 180 * Math.PI;\n    let cosVal = Math.cos(value);\n    let sinVal = Math.sin(value);\n    let lumR = .213;\n    let lumG = .715;\n    let lumB = .072;\n    this._multiplyMatrix([ lumR + cosVal * (1 - lumR) + sinVal * -lumR, lumG + cosVal * -lumG + sinVal * -lumG, lumB + cosVal * -lumB + sinVal * (1 - lumB), 0, 0, lumR + cosVal * -lumR + sinVal * .143, lumG + cosVal * (1 - lumG) + sinVal * .14, lumB + cosVal * -lumB + sinVal * -.283, 0, 0, lumR + cosVal * -lumR + sinVal * -(1 - lumR), lumG + cosVal * -lumG + sinVal * lumG, lumB + cosVal * (1 - lumB) + sinVal * lumB, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ]);\n    return this;\n  }\n  concat(matrix) {\n    matrix = this._fixMatrix(matrix);\n    if (matrix.length != ColorMatrix.LENGTH) {\n      return this;\n    }\n    this._multiplyMatrix(matrix);\n    return this;\n  }\n  clone() {\n    return new ColorMatrix().copy(this);\n  }\n  toArray() {\n    let arr = [];\n    const l = ColorMatrix.LENGTH;\n    for (let i = 0; i < l; i++) {\n      arr[i] = this[i];\n    }\n    return arr;\n  }\n  copy(matrix) {\n    const l = ColorMatrix.LENGTH;\n    for (let i = 0; i < l; i++) {\n      this[i] = matrix[i];\n    }\n    return this;\n  }\n  toString() {\n    return `[${this.constructor.name}]`;\n  }\n  _multiplyMatrix(matrix) {\n    let col = [];\n    for (let i = 0; i < 5; i++) {\n      for (let j = 0; j < 5; j++) {\n        col[j] = this[j + i * 5];\n      }\n      for (let j = 0; j < 5; j++) {\n        let val = 0;\n        for (let k = 0; k < 5; k++) {\n          val += matrix[j + k * 5] * col[k];\n        }\n        this[j + i * 5] = val;\n      }\n    }\n  }\n  _cleanValue(value, limit) {\n    return Math.min(limit, Math.max(-limit, value));\n  }\n  _fixMatrix(matrix) {\n    if (matrix instanceof ColorMatrix) {\n      matrix = matrix.toArray();\n    }\n    if (matrix.length < ColorMatrix.LENGTH) {\n      matrix = matrix.slice(0, matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length, ColorMatrix.LENGTH));\n    } else if (matrix.length > ColorMatrix.LENGTH) {\n      matrix = matrix.slice(0, ColorMatrix.LENGTH);\n    }\n    return matrix;\n  }\n}\n\nclass ColorMatrixFilter extends Filter {\n  constructor(matrix) {\n    super();\n    this.matrix = matrix;\n    this.FRAG_SHADER_BODY = `\\n\\t\\t\\tuniform mat4 uColorMatrix;\\n\\t\\t\\tuniform vec4 uColorMatrixOffset;\\n\\n\\t\\t\\tvoid main (void) {\\n\\t\\t\\t\\tvec4 color = texture2D(uSampler, vRenderCoord);\\n\\n\\t\\t\\t\\tmat4 m = uColorMatrix;\\n\\t\\t\\t\\tvec4 newColor = vec4(0,0,0,0);\\n\\t\\t\\t\\tnewColor.r = color.r*m[0][0] + color.g*m[0][1] + color.b*m[0][2] + color.a*m[0][3];\\n\\t\\t\\t\\tnewColor.g = color.r*m[1][0] + color.g*m[1][1] + color.b*m[1][2] + color.a*m[1][3];\\n\\t\\t\\t\\tnewColor.b = color.r*m[2][0] + color.g*m[2][1] + color.b*m[2][2] + color.a*m[2][3];\\n\\t\\t\\t\\tnewColor.a = color.r*m[3][0] + color.g*m[3][1] + color.b*m[3][2] + color.a*m[3][3];\\n\\n\\t\\t\\t\\tgl_FragColor = newColor + uColorMatrixOffset;\\n\\t\\t\\t}\\n\\t\\t`;\n  }\n  shaderParamSetup(gl, stage, shaderProgram) {\n    let mat = this.matrix;\n    let colorMatrix = new Float32Array([ mat[0], mat[1], mat[2], mat[3], mat[5], mat[6], mat[7], mat[8], mat[10], mat[11], mat[12], mat[13], mat[15], mat[16], mat[17], mat[18] ]);\n    gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, \"uColorMatrix\"), false, colorMatrix);\n    gl.uniform4f(gl.getUniformLocation(shaderProgram, \"uColorMatrixOffset\"), mat[4] / 255, mat[9] / 255, mat[14] / 255, mat[19] / 255);\n  }\n  clone() {\n    return new ColorMatrixFilter(this.matrix);\n  }\n  _applyFilter(imageData) {\n    let data = imageData.data;\n    const l = data.length;\n    let r, g, b, a;\n    let mtx = this.matrix;\n    let m0 = mtx[0], m1 = mtx[1], m2 = mtx[2], m3 = mtx[3], m4 = mtx[4];\n    let m5 = mtx[5], m6 = mtx[6], m7 = mtx[7], m8 = mtx[8], m9 = mtx[9];\n    let m10 = mtx[10], m11 = mtx[11], m12 = mtx[12], m13 = mtx[13], m14 = mtx[14];\n    let m15 = mtx[15], m16 = mtx[16], m17 = mtx[17], m18 = mtx[18], m19 = mtx[19];\n    for (let i = 0; i < l; i += 4) {\n      r = data[i];\n      g = data[i + 1];\n      b = data[i + 2];\n      a = data[i + 3];\n      data[i] = r * m0 + g * m1 + b * m2 + a * m3 + m4;\n      data[i + 1] = r * m5 + g * m6 + b * m7 + a * m8 + m9;\n      data[i + 2] = r * m10 + g * m11 + b * m12 + a * m13 + m14;\n      data[i + 3] = r * m15 + g * m16 + b * m17 + a * m18 + m19;\n    }\n    return true;\n  }\n}\n\nclass ButtonHelper {\n  constructor(target, outLabel = \"out\", overLabel = \"over\", downLabel = \"down\", play = false, hitArea, hitLabel) {\n    if (!target.addEventListener) {\n      return;\n    }\n    this.target = target;\n    this.overLabel = overLabel;\n    this.outLabel = outLabel;\n    this.downLabel = downLabel == null;\n    this.play = play;\n    this._isPressed = false;\n    this._isOver = false;\n    this._enabled = false;\n    target.mouseChildren = false;\n    this.enabled = true;\n    this.handleEvent({});\n    if (hitArea) {\n      if (hitLabel) {\n        hitArea.actionsEnabled = false;\n        hitArea.gotoAndStop && hitArea.gotoAndStop(hitLabel);\n      }\n      target.hitArea = hitArea;\n    }\n  }\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(enabled) {\n    if (enabled === this._enabled) {\n      return;\n    }\n    let o = this.target;\n    this._enabled = enabled;\n    if (enabled) {\n      o.cursor = \"pointer\";\n      o.addEventListener(\"rollover\", this);\n      o.addEventListener(\"rollout\", this);\n      o.addEventListener(\"mousedown\", this);\n      o.addEventListener(\"pressup\", this);\n      if (o._reset) {\n        o.__reset = o._reset;\n        o._reset = this._reset;\n      }\n    } else {\n      o.cursor = null;\n      o.removeEventListener(\"rollover\", this);\n      o.removeEventListener(\"rollout\", this);\n      o.removeEventListener(\"mousedown\", this);\n      o.removeEventListener(\"pressup\", this);\n      if (o.__reset) {\n        o._reset = o.__reset;\n        delete o.__reset;\n      }\n    }\n  }\n  toString() {\n    return `[${this.constructor.name}]`;\n  }\n  handleEvent(evt) {\n    let label, t = this.target, type = evt.type;\n    if (type === \"mousedown\") {\n      this._isPressed = true;\n      label = this.downLabel;\n    } else if (type === \"pressup\") {\n      this._isPressed = false;\n      label = this._isOver ? this.overLabel : this.outLabel;\n    } else if (type === \"rollover\") {\n      this._isOver = true;\n      label = this._isPressed ? this.downLabel : this.overLabel;\n    } else {\n      this._isOver = false;\n      label = this._isPressed ? this.overLabel : this.outLabel;\n    }\n    if (this.play) {\n      t.gotoAndPlay && t.gotoAndPlay(label);\n    } else {\n      t.gotoAndStop && t.gotoAndStop(label);\n    }\n  }\n  _reset() {\n    let p = this.paused;\n    this.__reset();\n    this.paused = p;\n  }\n}\n\nclass Touch {\n  constructor() {\n    throw \"Touch cannot be instantiated\";\n  }\n  static isSupported() {\n    return !!(\"ontouchstart\" in window || window.navigator[\"msPointerEnabled\"] && window.navigator[\"msMaxTouchPoints\"] > 0 || window.navigator[\"pointerEnabled\"] && window.navigator[\"maxTouchPoints\"] > 0);\n  }\n  static enable(stage, singleTouch = false, allowDefault = false) {\n    if (!stage || !stage.canvas || !Touch.isSupported()) {\n      return false;\n    }\n    if (stage.__touch) {\n      return true;\n    }\n    stage.__touch = {\n      pointers: {},\n      multitouch: !singleTouch,\n      preventDefault: !allowDefault,\n      count: 0\n    };\n    if (\"ontouchstart\" in window) {\n      Touch._IOS_enable(stage);\n    } else if (window.navigator[\"msPointerEnabled\"] || window.navigator[\"pointerEnabled\"]) {\n      Touch._IE_enable(stage);\n    }\n    return true;\n  }\n  static disable(stage) {\n    if (!stage) {\n      return;\n    }\n    if (\"ontouchstart\" in window) {\n      Touch._IOS_disable(stage);\n    } else if (window.navigator[\"msPointerEnabled\"] || window.navigator[\"pointerEnabled\"]) {\n      Touch._IE_disable(stage);\n    }\n    delete stage.__touch;\n  }\n  static _IOS_enable(stage) {\n    let canvas = stage.canvas;\n    let f = stage.__touch.f = (e => Touch._IOS_handleEvent(stage, e));\n    canvas.addEventListener(\"touchstart\", f, false);\n    canvas.addEventListener(\"touchmove\", f, false);\n    canvas.addEventListener(\"touchend\", f, false);\n    canvas.addEventListener(\"touchcancel\", f, false);\n  }\n  static _IOS_disable(stage) {\n    let canvas = stage.canvas;\n    if (!canvas) {\n      return;\n    }\n    let f = stage.__touch.f;\n    canvas.removeEventListener(\"touchstart\", f, false);\n    canvas.removeEventListener(\"touchmove\", f, false);\n    canvas.removeEventListener(\"touchend\", f, false);\n    canvas.removeEventListener(\"touchcancel\", f, false);\n  }\n  static _IOS_handleEvent(stage, e) {\n    if (!stage) {\n      return;\n    }\n    if (stage.__touch.preventDefault) {\n      e.preventDefault && e.preventDefault();\n    }\n    let touches = e.changedTouches;\n    let type = e.type;\n    const l = touches.length;\n    for (let touch of touches) {\n      let id = touch.identifier;\n      if (touch.target != stage.canvas) {\n        continue;\n      }\n      if (type === \"touchstart\") {\n        this._handleStart(stage, id, e, touch.pageX, touch.pageY);\n      } else if (type === \"touchmove\") {\n        this._handleMove(stage, id, e, touch.pageX, touch.pageY);\n      } else if (type === \"touchend\" || type === \"touchcancel\") {\n        this._handleEnd(stage, id, e);\n      }\n    }\n  }\n  static _IE_enable(stage) {\n    let canvas = stage.canvas;\n    let f = stage.__touch.f = (e => Touch._IE_handleEvent(stage, e));\n    if (window.navigator[\"pointerEnabled\"] === undefined) {\n      canvas.addEventListener(\"MSPointerDown\", f, false);\n      window.addEventListener(\"MSPointerMove\", f, false);\n      window.addEventListener(\"MSPointerUp\", f, false);\n      window.addEventListener(\"MSPointerCancel\", f, false);\n      if (stage.__touch.preventDefault) {\n        canvas.style.msTouchAction = \"none\";\n      }\n    } else {\n      canvas.addEventListener(\"pointerdown\", f, false);\n      window.addEventListener(\"pointermove\", f, false);\n      window.addEventListener(\"pointerup\", f, false);\n      window.addEventListener(\"pointercancel\", f, false);\n      if (stage.__touch.preventDefault) {\n        canvas.style.touchAction = \"none\";\n      }\n    }\n    stage.__touch.activeIDs = {};\n  }\n  static _IE_disable(stage) {\n    let f = stage.__touch.f;\n    if (window.navigator[\"pointerEnabled\"] === undefined) {\n      window.removeEventListener(\"MSPointerMove\", f, false);\n      window.removeEventListener(\"MSPointerUp\", f, false);\n      window.removeEventListener(\"MSPointerCancel\", f, false);\n      if (stage.canvas) {\n        stage.canvas.removeEventListener(\"MSPointerDown\", f, false);\n      }\n    } else {\n      window.removeEventListener(\"pointermove\", f, false);\n      window.removeEventListener(\"pointerup\", f, false);\n      window.removeEventListener(\"pointercancel\", f, false);\n      if (stage.canvas) {\n        stage.canvas.removeEventListener(\"pointerdown\", f, false);\n      }\n    }\n  }\n  static _IE_handleEvent(stage, e) {\n    if (!stage) {\n      return;\n    }\n    if (stage.__touch.preventDefault) {\n      e.preventDefault && e.preventDefault();\n    }\n    let type = e.type;\n    let id = e.pointerId;\n    let ids = stage.__touch.activeIDs;\n    if (type === \"MSPointerDown\" || type === \"pointerdown\") {\n      if (e.srcElement != stage.canvas) {\n        return;\n      }\n      ids[id] = true;\n      this._handleStart(stage, id, e, e.pageX, e.pageY);\n    } else if (ids[id]) {\n      if (type === \"MSPointerMove\" || type === \"pointermove\") {\n        this._handleMove(stage, id, e, e.pageX, e.pageY);\n      } else if (type === \"MSPointerUp\" || type === \"MSPointerCancel\" || type === \"pointerup\" || type === \"pointercancel\") {\n        delete ids[id];\n        this._handleEnd(stage, id, e);\n      }\n    }\n  }\n  static _handleStart(stage, id, e, x, y) {\n    let props = stage.__touch;\n    if (!props.multitouch && props.count) {\n      return;\n    }\n    let ids = props.pointers;\n    if (ids[id]) {\n      return;\n    }\n    ids[id] = true;\n    props.count++;\n    stage._handlePointerDown(id, e, x, y);\n  }\n  static _handleMove(stage, id, e, x, y) {\n    if (!stage.__touch.pointers[id]) {\n      return;\n    }\n    stage._handlePointerMove(id, e, x, y);\n  }\n  static _handleEnd(stage, id, e) {\n    let props = stage.__touch;\n    let ids = props.pointers;\n    if (!ids[id]) {\n      return;\n    }\n    props.count--;\n    stage._handlePointerUp(id, e, true);\n    delete ids[id];\n  }\n}\n\nconst _ERR_DIMENSIONS = \"frame dimensions exceed max spritesheet dimensions\";\n\nconst _ERR_RUNNING = \"a build is already running\";\n\nclass SpriteSheetBuilder extends EventDispatcher {\n  constructor(framerate = 0) {\n    super();\n    this.maxWidth = 2048;\n    this.maxHeight = 2048;\n    this.spriteSheet = null;\n    this.scale = 1;\n    this.padding = 1;\n    this.timeSlice = .3;\n    this.progress = -1;\n    this.framerate = framerate;\n    this._frames = [];\n    this._animations = {};\n    this._data = null;\n    this._nextFrameIndex = 0;\n    this._index = 0;\n    this._timerID = null;\n    this._scale = 1;\n  }\n  static get ERR_DIMENSIONS() {\n    return _ERR_DIMENSIONS;\n  }\n  static get ERR_RUNNING() {\n    return _ERR_RUNNING;\n  }\n  addFrame(source, sourceRect, scale = 1, setupFunction, setupData) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n    let rect = sourceRect || source.bounds || source.nominalBounds || source.getBounds && source.getBounds();\n    if (!rect) {\n      return null;\n    }\n    return this._frames.push({\n      source: source,\n      sourceRect: rect,\n      scale: scale,\n      funct: setupFunction,\n      data: setupData,\n      index: this._frames.length,\n      height: rect.height * scale\n    }) - 1;\n  }\n  addAnimation(name, frames, next, speed) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n    this._animations[name] = {\n      frames: frames,\n      next: next,\n      speed: speed\n    };\n  }\n  addMovieClip(source, sourceRect, scale = 1, setupFunction, setupData, labelFunction) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n    let rects = source.frameBounds;\n    let rect = sourceRect || source.bounds || source.nominalBounds || source.getBounds && source.getBounds();\n    if (!rect && !rects) {\n      return;\n    }\n    let baseFrameIndex = this._frames.length;\n    const duration = source.timeline.duration;\n    for (let i = 0; i < duration; i++) {\n      let r = rects && rects[i] ? rects[i] : rect;\n      this.addFrame(source, r, scale, this._setupMovieClipFrame, {\n        i: i,\n        f: setupFunction,\n        d: setupData\n      });\n    }\n    const labels = source.timeline._labels;\n    let lbls = [];\n    for (let n in labels) {\n      lbls.push({\n        index: labels[n],\n        label: n\n      });\n    }\n    if (lbls.length) {\n      lbls.sort((a, b) => a.index - b.index);\n      for (let i = 0, l = lbls.length; i < l; i++) {\n        let label = lbls[i].label;\n        let start = baseFrameIndex + lbls[i].index;\n        let end = baseFrameIndex + (i === l - 1 ? duration : lbls[i + 1].index);\n        let frames = [];\n        for (let i = start; i < end; i++) {\n          frames.push(i);\n        }\n        if (labelFunction) {\n          label = labelFunction(label, source, start, end);\n          if (!label) {\n            continue;\n          }\n        }\n        this.addAnimation(label, frames, true);\n      }\n    }\n  }\n  build() {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n    this._startBuild();\n    while (this._drawNext()) {}\n    this._endBuild();\n    return this.spriteSheet;\n  }\n  buildAsync(timeSlice) {\n    if (this._data) {\n      throw SpriteSheetBuilder.ERR_RUNNING;\n    }\n    this.timeSlice = timeSlice;\n    this._startBuild();\n    this._timerID = setTimeout(() => this._run(), 50 - Math.max(.01, Math.min(.99, this.timeSlice || .3)) * 50);\n  }\n  stopAsync() {\n    clearTimeout(this._timerID);\n    this._data = null;\n  }\n  clone() {\n    throw \"SpriteSheetBuilder cannot be cloned.\";\n  }\n  toString() {\n    return `[${this.constructor.name}]`;\n  }\n  _startBuild() {\n    let pad = this.padding || 0;\n    this.progress = 0;\n    this.spriteSheet = null;\n    this._index = 0;\n    this._scale = this.scale;\n    let dataFrames = [];\n    this._data = {\n      images: [],\n      frames: dataFrames,\n      framerate: this.framerate,\n      animations: this._animations\n    };\n    let frames = this._frames.slice();\n    frames.sort((a, b) => a.height <= b.height ? -1 : 1);\n    if (frames[frames.length - 1].height + pad * 2 > this.maxHeight) {\n      throw SpriteSheetBuilder.ERR_DIMENSIONS;\n    }\n    let y = 0, x = 0;\n    let img = 0;\n    while (frames.length) {\n      let o = this._fillRow(frames, y, img, dataFrames, pad);\n      if (o.w > x) {\n        x = o.w;\n      }\n      y += o.h;\n      if (!o.h || !frames.length) {\n        let canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n        canvas.width = this._getSize(x, this.maxWidth);\n        canvas.height = this._getSize(y, this.maxHeight);\n        this._data.images[img] = canvas;\n        if (!o.h) {\n          x = y = 0;\n          img++;\n        }\n      }\n    }\n  }\n  _setupMovieClipFrame(source, data) {\n    let ae = source.actionsEnabled;\n    source.actionsEnabled = false;\n    source.gotoAndStop(data.i);\n    source.actionsEnabled = ae;\n    data.f && data.f(source, data.d, data.i);\n  }\n  _getSize(size, max) {\n    let pow = 4;\n    while (Math.pow(2, ++pow) < size) {}\n    return Math.min(max, Math.pow(2, pow));\n  }\n  _fillRow(frames, y, img, dataFrames, pad) {\n    let w = this.maxWidth;\n    let maxH = this.maxHeight;\n    y += pad;\n    let h = maxH - y;\n    let x = pad;\n    let height = 0;\n    for (let i = frames.length - 1; i >= 0; i--) {\n      let frame = frames[i];\n      let sc = this._scale * frame.scale;\n      let rect = frame.sourceRect;\n      let source = frame.source;\n      let rx = Math.floor(sc * rect.x - pad);\n      let ry = Math.floor(sc * rect.y - pad);\n      let rh = Math.ceil(sc * rect.height + pad * 2);\n      let rw = Math.ceil(sc * rect.width + pad * 2);\n      if (rw > w) {\n        throw SpriteSheetBuilder.ERR_DIMENSIONS;\n      }\n      if (rh > h || x + rw > w) {\n        continue;\n      }\n      frame.img = img;\n      frame.rect = new Rectangle(x, y, rw, rh);\n      height = height || rh;\n      frames.splice(i, 1);\n      dataFrames[frame.index] = [ x, y, rw, rh, img, Math.round(-rx + sc * source.regX - pad), Math.round(-ry + sc * source.regY - pad) ];\n      x += rw;\n    }\n    return {\n      w: x,\n      h: height\n    };\n  }\n  _endBuild() {\n    this.spriteSheet = new SpriteSheet(this._data);\n    this._data = null;\n    this.progress = 1;\n    this.dispatchEvent(\"complete\");\n  }\n  _run() {\n    let ts = Math.max(.01, Math.min(.99, this.timeSlice || .3)) * 50;\n    let t = new Date().getTime() + ts;\n    let complete = false;\n    while (t > new Date().getTime()) {\n      if (!this._drawNext()) {\n        complete = true;\n        break;\n      }\n    }\n    if (complete) {\n      this._endBuild();\n    } else {\n      this._timerID = setTimeout(() => this._run(), 50 - ts);\n    }\n    let p = this.progress = this._index / this._frames.length;\n    if (this.hasEventListener(\"progress\")) {\n      let evt = new Event(\"progress\");\n      evt.progress = p;\n      this.dispatchEvent(evt);\n    }\n  }\n  _drawNext() {\n    let frame = this._frames[this._index];\n    let sc = frame.scale * this._scale;\n    let rect = frame.rect;\n    let sourceRect = frame.sourceRect;\n    let canvas = this._data.images[frame.img];\n    let ctx = canvas.getContext(\"2d\");\n    frame.funct && frame.funct(frame.source, frame.data);\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(rect.x, rect.y, rect.width, rect.height);\n    ctx.clip();\n    ctx.translate(Math.ceil(rect.x - sourceRect.x * sc), Math.ceil(rect.y - sourceRect.y * sc));\n    ctx.scale(sc, sc);\n    frame.source.draw(ctx);\n    ctx.restore();\n    return ++this._index < this._frames.length;\n  }\n}\n\nclass SpriteSheetUtils {\n  constructor() {\n    throw \"SpriteSheetUtils cannot be instantiated\";\n  }\n  static extractFrame(spriteSheet, frameOrAnimation) {\n    if (isNaN(frameOrAnimation)) {\n      frameOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];\n    }\n    let data = spriteSheet.getFrame(frameOrAnimation);\n    if (!data) {\n      return null;\n    }\n    let r = data.rect;\n    let canvas = SpriteSheetUtils._workingCanvas;\n    canvas.width = r.width;\n    canvas.height = r.height;\n    SpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);\n    let img = document.createElement(\"img\");\n    img.src = canvas.toDataURL(\"image/png\");\n    return img;\n  }\n  static mergeAlpha(rgbImage, alphaImage, canvas) {\n    if (!canvas) {\n      canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n    }\n    canvas.width = Math.max(alphaImage.width, rgbImage.width);\n    canvas.height = Math.max(alphaImage.height, rgbImage.height);\n    let ctx = canvas.getContext(\"2d\");\n    ctx.save();\n    ctx.drawImage(rgbImage, 0, 0);\n    ctx.globalCompositeOperation = \"destination-in\";\n    ctx.drawImage(alphaImage, 0, 0);\n    ctx.restore();\n    return canvas;\n  }\n  static _flip(spriteSheet, count, h, v) {\n    let imgs = spriteSheet._images;\n    let canvas = SpriteSheetUtils._workingCanvas;\n    let ctx = SpriteSheetUtils._workingContext;\n    const il = imgs.length / count;\n    for (let i = 0; i < il; i++) {\n      let src = imgs[i];\n      src.__tmp = i;\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.clearRect(0, 0, canvas.width + 1, canvas.height + 1);\n      canvas.width = src.width;\n      canvas.height = src.height;\n      ctx.setTransform(h ? -1 : 1, 0, 0, v ? -1 : 1, h ? src.width : 0, v ? src.height : 0);\n      ctx.drawImage(src, 0, 0);\n      let img = document.createElement(\"img\");\n      img.src = canvas.toDataURL(\"image/png\");\n      img.width = src.width || src.naturalWidth;\n      img.height = src.height || src.naturalHeight;\n      imgs.push(img);\n    }\n    let frames = spriteSheet._frames;\n    const fl = frames.length / count;\n    for (let i = 0; i < fl; i++) {\n      let src = frames[i];\n      let rect = src.rect.clone();\n      let img = imgs[src.image.__tmp + il * count];\n      let frame = {\n        image: img,\n        rect: rect,\n        regX: src.regX,\n        regY: src.regY\n      };\n      if (h) {\n        rect.x = (img.width || img.naturalWidth) - rect.x - rect.width;\n        frame.regX = rect.width - src.regX;\n      }\n      if (v) {\n        rect.y = (img.height || img.naturalHeight) - rect.y - rect.height;\n        frame.regY = rect.height - src.regY;\n      }\n      frames.push(frame);\n    }\n    let sfx = `_${h ? \"h\" : \"\"}${v ? \"v\" : \"\"}`;\n    let names = spriteSheet._animations;\n    let data = spriteSheet._data;\n    const al = names.length / count;\n    for (let i = 0; i < al; i++) {\n      let name = names[i];\n      let src = data[name];\n      let anim = {\n        name: name + sfx,\n        speed: src.speed,\n        next: src.next,\n        frames: []\n      };\n      if (src.next) {\n        anim.next += sfx;\n      }\n      let frames = src.frames;\n      for (let i = 0, l = frames.length; i < l; i++) {\n        anim.frames.push(frames[i] + fl * count);\n      }\n      data[anim.name] = anim;\n      names.push(anim.name);\n    }\n  }\n}\n\n{\n  let canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n  if (canvas.getContext) {\n    SpriteSheetUtils._workingCanvas = canvas;\n    SpriteSheetUtils._workingContext = canvas.getContext(\"2d\");\n    canvas.width = canvas.height = 1;\n  }\n}\n\nlet _alternateOutput = null;\n\nclass WebGLInspector extends EventDispatcher {\n  constructor(stage) {\n    super();\n    this._stage = stage;\n  }\n  static get alternateOutput() {\n    return _alternateOutput;\n  }\n  static set alternateOutput(alternateOutput) {\n    _alternateOutput = alternateOutput;\n  }\n  static dispProps(item, prepend = \"\") {\n    let p = `\\tP: ${item.x.toFixed(2)}x${item.y.toFixed(2)}\\t`;\n    let r = `\\tR: ${item.regX.toFixed(2)}x${item.regY.toFixed(2)}\\t`;\n    WebGLInspector._log(prepend, `${item.toString()}\\t`, p, r);\n  }\n  static _log(...info) {\n    if (WebGLInspector.alternateOutput) {\n      WebGLInspector.alternateOutput.log(...info);\n    } else {\n      console.log(...info);\n    }\n  }\n  log(stage) {\n    if (!stage) {\n      stage = this._stage;\n    }\n    WebGLInspector._log(`Batches Per Draw: ${(stage._batchID / stage._drawID).toFixed(4)}`);\n    this.logContextInfo(stage._webGLContext);\n    this.logDepth(stage.children, \"\");\n    this.logTextureFill(stage);\n  }\n  toggleGPUDraw(stage, enabled) {\n    if (!stage) {\n      stage = this._stage;\n    }\n    if (enabled === undefined) {\n      enabled = !!stage._drawBuffers_;\n    }\n    if (enabled && stage._drawBuffers_) {\n      stage._drawBuffers = stage._drawBuffers_;\n      stage._drawBuffers_ = undefined;\n    } else {\n      stage._drawBuffers_ = stage._drawBuffers;\n      stage._drawBuffers = function _inspectorDrawBuffers(gl) {\n        if (this.vocalDebug) {\n          WebGLInspector._log(`BlankDraw[${this._drawID}:${this._batchID}] : ${this.batchReason}`);\n        }\n      };\n    }\n  }\n  logDepth(children, prepend = \"\", logFunc = WebGLInspector._log) {\n    if (!children) {\n      children = this._stage.children;\n    }\n    const l = children.length;\n    for (let i = 0; i < l; i++) {\n      let child = children[i];\n      logFunc(`${prepend}-`, child);\n      if (child.children && child.children.length) {\n        this.logDepth(child.children, `|${prepend}`, logFunc);\n      }\n    }\n  }\n  logContextInfo(gl) {\n    if (!gl) {\n      gl = this._stage._webGLContext;\n    }\n    let data = `\\n\\t\\t\\t== LOG:\\n\\n\\t\\t\\tMax textures per draw: ${gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)}\\n\\n\\t\\t\\tMax textures active: ${gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)}\\n\\n\\t\\t\\t\\n\\n\\t\\t\\tMax texture size: ${gl.getParameter(gl.MAX_TEXTURE_SIZE) / 2}\\n\\n\\t\\t\\tMax cache size: ${gl.getParameter(gl.MAX_RENDERBUFFER_SIZE) / 2}\\n\\n\\t\\t\\t\\n\\n\\t\\t\\tMax attributes per vertex: ${gl.getParameter(gl.MAX_VERTEX_ATTRIBS)}\\n\\n\\t\\t\\tWebGL Version string: ${gl.getParameter(gl.VERSION)}\\n\\n\\t\\t\\t======\\n\\t\\t`;\n    WebGLInspector._log(data);\n  }\n  logTextureFill(stage) {\n    if (!stage) {\n      stage = this._stage;\n    }\n    let dict = stage._textureDictionary;\n    let count = stage._batchTextureCount;\n    WebGLInspector._log(`${textureMax}: ${count}`);\n    let output = [];\n    for (let n in dict) {\n      let str = n.replace(window.location.origin, \"\");\n      let tex = dict[n];\n      let shifted = tex._lastActiveIndex ? tex._lastActiveIndex === tex._activeIndex : false;\n      output.push({\n        src: src,\n        element: tex,\n        shifted: shifted\n      });\n      tex._lastActiveIndex = tex._activeIndex;\n    }\n    output.sort((a, b) => {\n      if (a.element._drawID === stage._drawID) {\n        return 1;\n      }\n      if (a.element._drawID < b.element._drawID) {\n        return -1;\n      }\n      return 0;\n    });\n    const l = output.length;\n    for (let i = 0; i < l; i++) {\n      let out = output[i];\n      let active = out.element._drawID === stage._drawID;\n      WebGLInspector._log(`[${out.src}] ${active ? \"ACTIVE\" : \"stale\"} ${out.shifted ? \"steady\" : \"DRIFT\"}`, out.element);\n    }\n  }\n}\n\n\n\n\n\nvar cjs = window.createjs = window.createjs || {};\n\nvar v = cjs.v = cjs.v || {};\n\nv.easeljs = \"NEXT\";\n//# sourceMappingURL=maps/easeljs.module.js.map\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/easeljs/dist/easeljs.module.js?");

/***/ }),

/***/ "./node_modules/@createjs/tweenjs/dist/tweenjs.module.js":
/*!***************************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/dist/tweenjs.module.js ***!
  \***************************************************************/
/*! exports provided: Ease, Tween, AbstractTween, Timeline, Event, EventDispatcher, Ticker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ease\", function() { return Ease; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tween\", function() { return Tween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractTween\", function() { return AbstractTween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Timeline\", function() { return Timeline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Event\", function() { return Event; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventDispatcher\", function() { return EventDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ticker\", function() { return Ticker; });\n/**\n * @license\n * TweenJS\n * Visit https://createjs.com for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nclass Event {\n  constructor(type, bubbles = false, cancelable = false) {\n    this.type = type;\n    this.target = null;\n    this.currentTarget = null;\n    this.eventPhase = 0;\n    this.bubbles = bubbles;\n    this.cancelable = cancelable;\n    this.timeStamp = new Date().getTime();\n    this.defaultPrevented = false;\n    this.propagationStopped = false;\n    this.immediatePropagationStopped = false;\n    this.removed = false;\n  }\n  preventDefault() {\n    this.defaultPrevented = this.cancelable;\n    return this;\n  }\n  stopPropagation() {\n    this.propagationStopped = true;\n    return this;\n  }\n  stopImmediatePropagation() {\n    this.immediatePropagationStopped = this.propagationStopped = true;\n    return this;\n  }\n  remove() {\n    this.removed = true;\n    return this;\n  }\n  clone() {\n    const event = new Event(this.type, this.bubbles, this.cancelable);\n    for (let n in this) {\n      if (this.hasOwnProperty(n)) {\n        event[n] = this[n];\n      }\n    }\n    return event;\n  }\n  set(props) {\n    for (let n in props) {\n      this[n] = props[n];\n    }\n    return this;\n  }\n  toString() {\n    return `[${this.constructor.name} (type=${this.type})]`;\n  }\n}\n\nclass EventDispatcher {\n  static initialize(target) {\n    const p = EventDispatcher.prototype;\n    target.addEventListener = p.addEventListener;\n    target.on = p.on;\n    target.removeEventListener = target.off = p.removeEventListener;\n    target.removeAllEventListeners = p.removeAllEventListeners;\n    target.hasEventListener = p.hasEventListener;\n    target.dispatchEvent = p.dispatchEvent;\n    target._dispatchEvent = p._dispatchEvent;\n    target.willTrigger = p.willTrigger;\n  }\n  constructor() {\n    this._listeners = null;\n    this._captureListeners = null;\n  }\n  addEventListener(type, listener, useCapture = false) {\n    let listeners;\n    if (useCapture) {\n      listeners = this._captureListeners = this._captureListeners || {};\n    } else {\n      listeners = this._listeners = this._listeners || {};\n    }\n    let arr = listeners[type];\n    if (arr) {\n      this.removeEventListener(type, listener, useCapture);\n      arr = listeners[type];\n    }\n    if (arr) {\n      arr.push(listener);\n    } else {\n      listeners[type] = [ listener ];\n    }\n    return listener;\n  }\n  on(type, listener, scope = null, once = false, data = {}, useCapture = false) {\n    if (listener.handleEvent) {\n      scope = scope || listener;\n      listener = listener.handleEvent;\n    }\n    scope = scope || this;\n    return this.addEventListener(type, evt => {\n      listener.call(scope, evt, data);\n      once && evt.remove();\n    }, useCapture);\n  }\n  removeEventListener(type, listener, useCapture = false) {\n    const listeners = useCapture ? this._captureListeners : this._listeners;\n    if (!listeners) {\n      return;\n    }\n    const arr = listeners[type];\n    if (!arr) {\n      return;\n    }\n    const l = arr.length;\n    for (let i = 0; i < l; i++) {\n      if (arr[i] === listener) {\n        if (l === 1) {\n          delete listeners[type];\n        } else {\n          arr.splice(i, 1);\n        }\n        break;\n      }\n    }\n  }\n  off(type, listener, useCapture = false) {\n    this.removeEventListener(type, listener, useCapture);\n  }\n  removeAllEventListeners(type = null) {\n    if (type) {\n      if (this._listeners) {\n        delete this._listeners[type];\n      }\n      if (this._captureListeners) {\n        delete this._captureListeners[type];\n      }\n    } else {\n      this._listeners = this._captureListeners = null;\n    }\n  }\n  dispatchEvent(eventObj, bubbles = false, cancelable = false) {\n    if (typeof eventObj === \"string\") {\n      const listeners = this._listeners;\n      if (!bubbles && (!listeners || !listeners[eventObj])) {\n        return true;\n      }\n      eventObj = new Event(eventObj, bubbles, cancelable);\n    } else if (eventObj.target && eventObj.clone) {\n      eventObj = eventObj.clone();\n    }\n    try {\n      eventObj.target = this;\n    } catch (e) {}\n    if (!eventObj.bubbles || !this.parent) {\n      this._dispatchEvent(eventObj, 2);\n    } else {\n      let top = this;\n      const list = [ top ];\n      while (top.parent) {\n        list.push(top = top.parent);\n      }\n      const l = list.length;\n      let i;\n      for (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {\n        list[i]._dispatchEvent(eventObj, 1 + (i == 0));\n      }\n      for (i = 1; i < l && !eventObj.propagationStopped; i++) {\n        list[i]._dispatchEvent(eventObj, 3);\n      }\n    }\n    return !eventObj.defaultPrevented;\n  }\n  hasEventListener(type) {\n    const listeners = this._listeners, captureListeners = this._captureListeners;\n    return !!(listeners && listeners[type] || captureListeners && captureListeners[type]);\n  }\n  willTrigger(type) {\n    let o = this;\n    while (o) {\n      if (o.hasEventListener(type)) {\n        return true;\n      }\n      o = o.parent;\n    }\n    return false;\n  }\n  toString() {\n    return `[${this.constructor.name + this.name ? ` ${this.name}` : \"\"}]`;\n  }\n  _dispatchEvent(eventObj, eventPhase) {\n    const listeners = eventPhase === 1 ? this._captureListeners : this._listeners;\n    if (eventObj && listeners) {\n      let arr = listeners[eventObj.type];\n      let l;\n      if (!arr || (l = arr.length) === 0) {\n        return;\n      }\n      try {\n        eventObj.currentTarget = this;\n      } catch (e) {}\n      try {\n        eventObj.eventPhase = eventPhase;\n      } catch (e) {}\n      eventObj.removed = false;\n      arr = arr.slice();\n      for (let i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {\n        let o = arr[i];\n        if (o.handleEvent) {\n          o.handleEvent(eventObj);\n        } else {\n          o(eventObj);\n        }\n        if (eventObj.removed) {\n          this.off(eventObj.type, o, eventPhase === 1);\n          eventObj.removed = false;\n        }\n      }\n    }\n  }\n}\n\nclass AbstractTween extends EventDispatcher {\n  constructor(props) {\n    super();\n    this.ignoreGlobalPause = false;\n    this.loop = 0;\n    this.useTicks = false;\n    this.reversed = false;\n    this.bounce = false;\n    this.timeScale = 1;\n    this.duration = 0;\n    this.position = 0;\n    this.rawPosition = -1;\n    this._paused = true;\n    this._next = null;\n    this._prev = null;\n    this._parent = null;\n    this._labels = null;\n    this._labelList = null;\n    if (props) {\n      this.useTicks = !!props.useTicks;\n      this.ignoreGlobalPause = !!props.ignoreGlobalPause;\n      this.loop = props.loop === true ? -1 : props.loop || 0;\n      this.reversed = !!props.reversed;\n      this.bounce = !!props.bounce;\n      this.timeScale = props.timeScale || 1;\n      props.onChange && this.addEventListener(\"change\", props.onChange);\n      props.onComplete && this.addEventListener(\"complete\", props.onComplete);\n    }\n  }\n  get labels() {\n    let list = this._labelList;\n    if (!list) {\n      list = this._labelList = [];\n      let labels = this._labels;\n      for (let label in labels) {\n        list.push({\n          label: label,\n          position: labels[label]\n        });\n      }\n      list.sort((a, b) => a.position - b.position);\n    }\n    return list;\n  }\n  set labels(labels) {\n    this._labels = labels;\n    this._labelList = null;\n  }\n  get currentLabel() {\n    let labels = this.labels;\n    let pos = this.position;\n    for (let i = 0, l = labels.length; i < l; i++) {\n      if (pos < labels[i].position) {\n        break;\n      }\n    }\n    return i === 0 ? null : labels[i - 1].label;\n  }\n  get paused() {\n    return this._paused;\n  }\n  set paused(paused) {\n    Tween._register(this, paused);\n    this._paused = paused;\n  }\n  advance(delta, ignoreActions = false) {\n    this.setPosition(this.rawPosition + delta * this.timeScale, ignoreActions);\n  }\n  setPosition(rawPosition, ignoreActions = false, jump = false, callback) {\n    const d = this.duration, loopCount = this.loop, prevRawPos = this.rawPosition;\n    let loop = 0, t = 0, end = false;\n    if (rawPosition < 0) {\n      rawPosition = 0;\n    }\n    if (d === 0) {\n      end = true;\n      if (prevRawPos !== -1) {\n        return end;\n      }\n    } else {\n      loop = rawPosition / d | 0;\n      t = rawPosition - loop * d;\n      end = loopCount !== -1 && rawPosition >= loopCount * d + d;\n      if (end) {\n        rawPosition = (t = d) * (loop = loopCount) + d;\n      }\n      if (rawPosition === prevRawPos) {\n        return end;\n      }\n      if (!this.reversed !== !(this.bounce && loop % 2)) {\n        t = d - t;\n      }\n    }\n    this.position = t;\n    this.rawPosition = rawPosition;\n    this._updatePosition(jump, end);\n    if (end) {\n      this.paused = true;\n    }\n    callback && callback(this);\n    if (!ignoreActions) {\n      this._runActions(prevRawPos, rawPosition, jump, !jump && prevRawPos === -1);\n    }\n    this.dispatchEvent(\"change\");\n    if (end) {\n      this.dispatchEvent(\"complete\");\n    }\n  }\n  calculatePosition(rawPosition) {\n    const d = this.duration, loopCount = this.loop;\n    let loop = 0, t = 0;\n    if (d === 0) {\n      return 0;\n    }\n    if (loopCount !== -1 && rawPosition >= loopCount * d + d) {\n      t = d;\n      loop = loopCount;\n    } else if (rawPosition < 0) {\n      t = 0;\n    } else {\n      loop = rawPosition / d | 0;\n      t = rawPosition - loop * d;\n    }\n    return !this.reversed !== !(this.bounce && loop % 2) ? d - t : t;\n  }\n  addLabel(label, position) {\n    if (!this._labels) {\n      this._labels = {};\n    }\n    this._labels[label] = position;\n    const list = this._labelList;\n    if (list) {\n      for (let i = 0, l = list.length; i < l; i++) {\n        if (position < list[i].position) {\n          break;\n        }\n      }\n      list.splice(i, 0, {\n        label: label,\n        position: position\n      });\n    }\n  }\n  gotoAndPlay(positionOrLabel) {\n    this.paused = false;\n    this._goto(positionOrLabel);\n  }\n  gotoAndStop(positionOrLabel) {\n    this.paused = true;\n    this._goto(positionOrLabel);\n  }\n  resolve(positionOrLabel) {\n    const pos = Number(positionOrLabel);\n    return isNaN(pos) ? this._labels && this._labels[positionOrLabel] : pos;\n  }\n  toString() {\n    return `[${this.constructor.name}${this.name ? ` (name=${this.name})` : \"\"}]`;\n  }\n  clone() {\n    throw \"AbstractTween cannot be cloned.\";\n  }\n  _init(props) {\n    if (!props || !props.paused) {\n      this.paused = false;\n    }\n    if (props && props.position != null) {\n      this.setPosition(props.position);\n    }\n  }\n  _goto(positionOrLabel) {\n    const pos = this.resolve(positionOrLabel);\n    if (pos != null) {\n      this.setPosition(pos, false, true);\n    }\n  }\n  _runActions(startRawPos, endRawPos, jump, includeStart) {\n    if (!this._actionHead && !this.tweens) {\n      return;\n    }\n    const d = this.duration, loopCount = this.loop;\n    let reversed = this.reversed, bounce = this.bounce;\n    let loop0, loop1, t0, t1;\n    if (d === 0) {\n      loop0 = loop1 = t0 = t1 = 0;\n      reversed = bounce = false;\n    } else {\n      loop0 = startRawPos / d | 0;\n      loop1 = endRawPos / d | 0;\n      t0 = startRawPos - loop0 * d;\n      t1 = endRawPos - loop1 * d;\n    }\n    if (loopCount !== -1) {\n      if (loop1 > loopCount) {\n        t1 = d;\n        loop1 = loopCount;\n      }\n      if (loop0 > loopCount) {\n        t0 = d;\n        loop0 = loopCount;\n      }\n    }\n    if (jump) {\n      return this._runActionsRange(t1, t1, jump, includeStart);\n    } else if (loop0 === loop1 && t0 === t1 && !jump && !includeStart) {\n      return;\n    } else if (loop0 === -1) {\n      loop0 = t0 = 0;\n    }\n    const dir = startRawPos <= endRawPos;\n    let loop = loop0;\n    do {\n      let rev = !reversed !== !(bounce && loop % 2);\n      let start = loop === loop0 ? t0 : dir ? 0 : d;\n      let end = loop === loop1 ? t1 : dir ? d : 0;\n      if (rev) {\n        start = d - start;\n        end = d - end;\n      }\n      if (bounce && loop !== loop0 && start === end) {} else if (this._runActionsRange(start, end, jump, includeStart || loop !== loop0 && !bounce)) {\n        return true;\n      }\n      includeStart = false;\n    } while (dir && ++loop <= loop1 || !dir && --loop >= loop1);\n  }\n  _runActionsRange(startPos, endPos, jump, includeStart) {\n    throw \"_runActionsRange is abstract and must be overridden by a subclass.\";\n  }\n  _updatePosition(jump, end) {\n    throw \"_updatePosition is abstract and must be overridden by a subclass.\";\n  }\n}\n\nfunction linear(t) {\n  return t;\n}\n\nfunction get(amount) {\n  if (amount < -1) {\n    amount = -1;\n  } else if (amount > 1) {\n    amount = 1;\n  }\n  return function(t) {\n    if (amount == 0) {\n      return t;\n    }\n    if (amount < 0) {\n      return t * (t * -amount + 1 + amount);\n    }\n    return t * ((2 - t) * amount + (1 - amount));\n  };\n}\n\nfunction getPowIn(pow) {\n  return function(t) {\n    return Math.pow(t, pow);\n  };\n}\n\nfunction getPowOut(pow) {\n  return function(t) {\n    return 1 - Math.pow(1 - t, pow);\n  };\n}\n\nfunction getPowInOut(pow) {\n  return function(t) {\n    if ((t *= 2) < 1) return .5 * Math.pow(t, pow);\n    return 1 - .5 * Math.abs(Math.pow(2 - t, pow));\n  };\n}\n\nfunction sineIn(t) {\n  return 1 - Math.cos(t * Math.PI / 2);\n}\n\nfunction sineOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n\nfunction sineInOut(t) {\n  return -.5 * (Math.cos(Math.PI * t) - 1);\n}\n\nfunction getBackIn(amount) {\n  return function(t) {\n    return t * t * ((amount + 1) * t - amount);\n  };\n}\n\nfunction getBackOut(amount) {\n  return function(t) {\n    return --t * t * ((amount + 1) * t + amount) + 1;\n  };\n}\n\nfunction getBackInOut(amount) {\n  amount *= 1.525;\n  return function(t) {\n    if ((t *= 2) < 1) return .5 * (t * t * ((amount + 1) * t - amount));\n    return .5 * ((t -= 2) * t * ((amount + 1) * t + amount) + 2);\n  };\n}\n\nfunction circIn(t) {\n  return -(Math.sqrt(1 - t * t) - 1);\n}\n\nfunction circOut(t) {\n  return Math.sqrt(1 - --t * t);\n}\n\nfunction circInOut(t) {\n  if ((t *= 2) < 1) return -.5 * (Math.sqrt(1 - t * t) - 1);\n  return .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n}\n\nfunction bounceIn(t) {\n  return 1 - Ease.bounceOut(1 - t);\n}\n\nfunction bounceOut(t) {\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  } else if (t < 2 / 2.75) {\n    return 7.5625 * (t -= 1.5 / 2.75) * t + .75;\n  } else if (t < 2.5 / 2.75) {\n    return 7.5625 * (t -= 2.25 / 2.75) * t + .9375;\n  } else {\n    return 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n}\n\nfunction bounceInOut(t) {\n  if (t < .5) return Ease.bounceIn(t * 2) * .5;\n  return Ease.bounceOut(t * 2 - 1) * .5 + .5;\n}\n\nfunction getElasticIn(amplitude, period) {\n  let pi2 = Math.PI * 2;\n  return function(t) {\n    if (t === 0 || t === 1) return t;\n    let s = period / pi2 * Math.asin(1 / amplitude);\n    return -(amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));\n  };\n}\n\nfunction getElasticOut(amplitude, period) {\n  let pi2 = Math.PI * 2;\n  return function(t) {\n    if (t === 0 || t === 1) return t;\n    let s = period / pi2 * Math.asin(1 / amplitude);\n    return amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * pi2 / period) + 1;\n  };\n}\n\nfunction getElasticInOut(amplitude, period) {\n  let pi2 = Math.PI * 2;\n  return function(t) {\n    let s = period / pi2 * Math.asin(1 / amplitude);\n    if ((t *= 2) < 1) return -.5 * (amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));\n    return amplitude * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * pi2 / period) * .5 + 1;\n  };\n}\n\nconst none = linear;\n\nconst quadIn = getPowIn(2);\n\nconst quadOut = getPowOut(2);\n\nconst quadInOut = getPowInOut(2);\n\nconst cubicIn = getPowIn(3);\n\nconst cubicOut = getPowOut(3);\n\nconst cubicInOut = getPowInOut(3);\n\nconst quartIn = getPowIn(4);\n\nconst quartOut = getPowOut(4);\n\nconst quartInOut = getPowInOut(4);\n\nconst quintIn = getPowIn(5);\n\nconst quintOut = getPowOut(5);\n\nconst quintInOut = getPowInOut(5);\n\nconst backIn = getBackIn(1.7);\n\nconst backOut = getBackOut(1.7);\n\nconst backInOut = getBackInOut(1.7);\n\nconst elasticIn = getElasticIn(1, .3);\n\nconst elasticOut = getElasticOut(1, .3);\n\nconst elasticInOut = getElasticInOut(1, .3 * 1.5);\n\nvar Ease = Object.freeze({\n  linear: linear,\n  get: get,\n  getPowIn: getPowIn,\n  getPowOut: getPowOut,\n  getPowInOut: getPowInOut,\n  sineIn: sineIn,\n  sineOut: sineOut,\n  sineInOut: sineInOut,\n  getBackIn: getBackIn,\n  getBackOut: getBackOut,\n  getBackInOut: getBackInOut,\n  circIn: circIn,\n  circOut: circOut,\n  circInOut: circInOut,\n  bounceIn: bounceIn,\n  bounceOut: bounceOut,\n  bounceInOut: bounceInOut,\n  getElasticIn: getElasticIn,\n  getElasticOut: getElasticOut,\n  getElasticInOut: getElasticInOut,\n  none: none,\n  quadIn: quadIn,\n  quadOut: quadOut,\n  quadInOut: quadInOut,\n  cubicIn: cubicIn,\n  cubicOut: cubicOut,\n  cubicInOut: cubicInOut,\n  quartIn: quartIn,\n  quartOut: quartOut,\n  quartInOut: quartInOut,\n  quintIn: quintIn,\n  quintOut: quintOut,\n  quintInOut: quintInOut,\n  backIn: backIn,\n  backOut: backOut,\n  backInOut: backInOut,\n  elasticIn: elasticIn,\n  elasticOut: elasticOut,\n  elasticInOut: elasticInOut\n});\n\nclass Ticker extends EventDispatcher {\n  static get RAF_SYNCHED() {\n    return \"synched\";\n  }\n  static get RAF() {\n    return \"raf\";\n  }\n  static get TIMEOUT() {\n    return \"timeout\";\n  }\n  constructor(name) {\n    super();\n    this.name = name;\n    this.timingMode = Ticker.TIMEOUT;\n    this.maxDelta = 0;\n    this.paused = false;\n    this._inited = false;\n    this._startTime = 0;\n    this._pausedTime = 0;\n    this._ticks = 0;\n    this._pausedTicks = 0;\n    this._interval = 50;\n    this._lastTime = 0;\n    this._times = null;\n    this._tickTimes = null;\n    this._timerId = null;\n    this._raf = true;\n  }\n  get interval() {\n    return this._interval;\n  }\n  set interval(interval) {\n    this._interval = interval;\n    if (!this._inited) {\n      return;\n    }\n    this._setupTick();\n  }\n  get framerate() {\n    return 1e3 / this._interval;\n  }\n  set framerate(framerate) {\n    this.interval = 1e3 / framerate;\n  }\n  init() {\n    if (this._inited) {\n      return;\n    }\n    this._inited = true;\n    this._times = [];\n    this._tickTimes = [];\n    this._startTime = this._getTime();\n    this._times.push(this._lastTime = 0);\n    this._setupTick();\n  }\n  reset() {\n    if (this._raf) {\n      let f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n      f && f(this._timerId);\n    } else {\n      clearTimeout(this._timerId);\n    }\n    this.removeAllEventListeners(\"tick\");\n    this._timerId = this._times = this._tickTimes = null;\n    this._startTime = this._lastTime = this._ticks = 0;\n    this._inited = false;\n  }\n  addEventListener(type, listener, useCapture) {\n    !this._inited && this.init();\n    return super.addEventListener(type, listener, useCapture);\n  }\n  getMeasuredTickTime(ticks = null) {\n    const times = this._tickTimes;\n    if (!times || times.length < 1) {\n      return -1;\n    }\n    ticks = Math.min(times.length, ticks || this.framerate | 0);\n    return times.reduce((a, b) => a + b, 0) / ticks;\n  }\n  getMeasuredFPS(ticks = null) {\n    const times = this._times;\n    if (!times || times.length < 2) {\n      return -1;\n    }\n    ticks = Math.min(times.length - 1, ticks || this.framerate | 0);\n    return 1e3 / ((times[0] - times[ticks]) / ticks);\n  }\n  getTime(runTime = false) {\n    return this._startTime ? this._getTime() - (runTime ? this._pausedTime : 0) : -1;\n  }\n  getEventTime(runTime = false) {\n    return this._startTime ? (this._lastTime || this._startTime) - (runTime ? this._pausedTime : 0) : -1;\n  }\n  getTicks(pauseable = false) {\n    return this._ticks - (pauseable ? this._pausedTicks : 0);\n  }\n  _handleSynch() {\n    this._timerId = null;\n    this._setupTick();\n    if (this._getTime() - this._lastTime >= (this._interval - 1) * .97) {\n      this._tick();\n    }\n  }\n  _handleRAF() {\n    this._timerId = null;\n    this._setupTick();\n    this._tick();\n  }\n  _handleTimeout() {\n    this._timerId = null;\n    this._setupTick();\n    this._tick();\n  }\n  _setupTick() {\n    if (this._timerId != null) {\n      return;\n    }\n    const mode = this.timingMode || this._raf && Ticker.RAF;\n    if (mode === Ticker.RAF_SYNCHED || mode === Ticker.RAF) {\n      const f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n      if (f) {\n        this._timerId = f(mode === Ticker.RAF ? this._handleRAF.bind(this) : this._handleSynch.bind(this));\n        this._raf = true;\n        return;\n      }\n    }\n    this._raf = false;\n    this._timerId = setTimeout(this._handleTimeout.bind(this), this._interval);\n  }\n  _tick() {\n    const paused = this.paused, time = this._getTime(), elapsedTime = time - this._lastTime;\n    this._lastTime = time;\n    this._ticks++;\n    if (paused) {\n      this._pausedTicks++;\n      this._pausedTime += elapsedTime;\n    }\n    if (this.hasEventListener(\"tick\")) {\n      const event = new Event(\"tick\");\n      const maxDelta = this.maxDelta;\n      event.delta = maxDelta && elapsedTime > maxDelta ? maxDelta : elapsedTime;\n      event.paused = paused;\n      event.time = time;\n      event.runTime = time - this._pausedTime;\n      this.dispatchEvent(event);\n    }\n    this._tickTimes.unshift(this._getTime() - time);\n    while (this._tickTimes.length > 100) {\n      this._tickTimes.pop();\n    }\n    this._times.unshift(time);\n    while (this._times.length > 100) {\n      this._times.pop();\n    }\n  }\n  _getTime() {\n    const now = window.performance && window.performance.now;\n    return (now && now.call(performance) || new Date().getTime()) - this._startTime;\n  }\n  static on(type, listener, scope, once, data, useCapture) {\n    return _instance.on(type, listener, scope, once, data, useCapture);\n  }\n  static removeEventListener(type, listener, useCapture) {\n    _instance.removeEventListener(type, listener, useCapture);\n  }\n  static off(type, listener, useCapture) {\n    _instance.off(type, listener, useCapture);\n  }\n  static removeAllEventListeners(type) {\n    _instance.removeAllEventListeners(type);\n  }\n  static dispatchEvent(eventObj, bubbles, cancelable) {\n    return _instance.dispatchEvent(eventObj, bubbles, cancelable);\n  }\n  static hasEventListener(type) {\n    return _instance.hasEventListener(type);\n  }\n  static willTrigger(type) {\n    return _instance.willTrigger(type);\n  }\n  static toString() {\n    return _instance.toString();\n  }\n  static init() {\n    _instance.init();\n  }\n  static reset() {\n    _instance.reset();\n  }\n  static addEventListener(type, listener, useCapture) {\n    _instance.addEventListener(type, listener, useCapture);\n  }\n  static getMeasuredTickTime(ticks) {\n    return _instance.getMeasuredTickTime(ticks);\n  }\n  static getMeasuredFPS(ticks) {\n    return _instance.getMeasuredFPS(ticks);\n  }\n  static getTime(runTime) {\n    return _instance.getTime(runTime);\n  }\n  static getEventTime(runTime) {\n    return _instance.getEventTime(runTime);\n  }\n  static getTicks(pauseable) {\n    return _instance.getTicks(pauseable);\n  }\n  static get interval() {\n    return _instance.interval;\n  }\n  static set interval(interval) {\n    _instance.interval = interval;\n  }\n  static get framerate() {\n    return _instance.framerate;\n  }\n  static set framerate(framerate) {\n    _instance.framerate = framerate;\n  }\n  static get name() {\n    return _instance.name;\n  }\n  static set name(name) {\n    _instance.name = name;\n  }\n  static get timingMode() {\n    return _instance.timingMode;\n  }\n  static set timingMode(timingMode) {\n    _instance.timingMode = timingMode;\n  }\n  static get maxDelta() {\n    return _instance.maxDelta;\n  }\n  static set maxDelta(maxDelta) {\n    _instance.maxDelta = maxDelta;\n  }\n  static get paused() {\n    return _instance.paused;\n  }\n  static set paused(paused) {\n    _instance.paused = paused;\n  }\n}\n\nconst _instance = new Ticker(\"createjs.global\");\n\nclass Tween extends AbstractTween {\n  constructor(target, props) {\n    super(props);\n    this.pluginData = null;\n    this.target = target;\n    this.passive = false;\n    this._stepHead = new TweenStep(null, 0, 0, {}, null, true);\n    this._stepTail = this._stepHead;\n    this._stepPosition = 0;\n    this._actionHead = null;\n    this._actionTail = null;\n    this._plugins = null;\n    this._pluginIds = null;\n    this._injected = null;\n    if (props) {\n      this.pluginData = props.pluginData;\n      if (props.override) {\n        Tween.removeTweens(target);\n      }\n    }\n    if (!this.pluginData) {\n      this.pluginData = {};\n    }\n    this._init(props);\n  }\n  static get(target, props) {\n    return new Tween(target, props);\n  }\n  static tick(delta, paused) {\n    let tween = Tween._tweenHead;\n    while (tween) {\n      let next = tween._next;\n      if (paused && !tween.ignoreGlobalPause || tween._paused) {} else {\n        tween.advance(tween.useTicks ? 1 : delta);\n      }\n      tween = next;\n    }\n  }\n  static handleEvent(event) {\n    if (event.type === \"tick\") {\n      this.tick(event.delta, event.paused);\n    }\n  }\n  static removeTweens(target) {\n    if (!target.tweenjs_count) {\n      return;\n    }\n    let tween = Tween._tweenHead;\n    while (tween) {\n      let next = tween._next;\n      if (tween.target === target) {\n        tween.paused = true;\n      }\n      tween = next;\n    }\n    target.tweenjs_count = 0;\n  }\n  static removeAllTweens() {\n    let tween = Tween._tweenHead;\n    while (tween) {\n      let next = tween._next;\n      tween._paused = true;\n      tween.target && (tween.target.tweenjs_count = 0);\n      tween._next = tween._prev = null;\n      tween = next;\n    }\n    Tween._tweenHead = Tween._tweenTail = null;\n  }\n  static hasActiveTweens(target) {\n    if (target) {\n      return !!target.tweenjs_count;\n    }\n    return !!Tween._tweenHead;\n  }\n  static installPlugin(plugin, props) {\n    plugin.install(props);\n    const priority = plugin.priority = plugin.priority || 0, arr = Tween._plugins = Tween._plugins || [];\n    for (let i = 0, l = arr.length; i < l; i++) {\n      if (priority < arr[i].priority) {\n        break;\n      }\n    }\n    arr.splice(i, 0, plugin);\n  }\n  static _register(tween, paused) {\n    const target = tween.target;\n    if (!paused && tween._paused) {\n      if (target) {\n        target.tweenjs_count = target.tweenjs_count ? target.tweenjs_count + 1 : 1;\n      }\n      let tail = Tween._tweenTail;\n      if (!tail) {\n        Tween._tweenHead = Tween._tweenTail = tween;\n      } else {\n        Tween._tweenTail = tail._next = tween;\n        tween._prev = tail;\n      }\n      if (!Tween._inited) {\n        Ticker.addEventListener(\"tick\", Tween);\n        Tween._inited = true;\n      }\n    } else if (paused && !tween._paused) {\n      if (target) {\n        target.tweenjs_count--;\n      }\n      let next = tween._next, prev = tween._prev;\n      if (next) {\n        next._prev = prev;\n      } else {\n        Tween._tweenTail = prev;\n      }\n      if (prev) {\n        prev._next = next;\n      } else {\n        Tween._tweenHead = next;\n      }\n      tween._next = tween._prev = null;\n    }\n  }\n  wait(duration, passive = false) {\n    if (duration > 0) {\n      this._addStep(+duration, this._stepTail.props, null, passive);\n    }\n    return this;\n  }\n  to(props, duration = 0, ease = linear) {\n    if (duration < 0) {\n      duration = 0;\n    }\n    const step = this._addStep(+duration, null, ease);\n    this._appendProps(props, step);\n    return this;\n  }\n  label(name) {\n    this.addLabel(name, this.duration);\n    return this;\n  }\n  call(callback, params, scope) {\n    return this._addAction(scope || this.target, callback, params || [ this ]);\n  }\n  set(props, target) {\n    return this._addAction(target || this.target, this._set, [ props ]);\n  }\n  play(tween) {\n    return this._addAction(tween || this, this._set, [ {\n      paused: false\n    } ]);\n  }\n  pause(tween) {\n    return this._addAction(tween || this, this._set, [ {\n      paused: false\n    } ]);\n  }\n  clone() {\n    throw \"Tween can not be cloned.\";\n  }\n  _addPlugin(plugin) {\n    let ids = this._pluginIds || (this._pluginIds = {}), id = plugin.id;\n    if (!id || ids[id]) {\n      return;\n    }\n    ids[id] = true;\n    let plugins = this._plugins || (this._plugins = []), priority = plugin.priority || 0;\n    for (let i = 0, l = plugins.length; i < l; i++) {\n      if (priority < plugins[i].priority) {\n        plugins.splice(i, 0, plugin);\n        return;\n      }\n    }\n    plugins.push(plugin);\n  }\n  _updatePosition(jump, end) {\n    let step = this._stepHead.next, t = this.position, d = this.duration;\n    if (this.target && step) {\n      let stepNext = step.next;\n      while (stepNext && stepNext.t <= t) {\n        step = step.next;\n        stepNext = step.next;\n      }\n      let ratio = end ? d === 0 ? 1 : t / d : (t - step.t) / step.d;\n      this._updateTargetProps(step, ratio, end);\n    }\n    this._stepPosition = step ? t - step.t : 0;\n  }\n  _updateTargetProps(step, ratio, end) {\n    if (this.passive = !!step.passive) {\n      return;\n    }\n    let v, v0, v1, ease;\n    let p0 = step.prev.props;\n    let p1 = step.props;\n    if (ease = step.ease) {\n      ratio = ease(ratio, 0, 1, 1);\n    }\n    let plugins = this._plugins;\n    proploop: for (let n in p0) {\n      v0 = p0[n];\n      v1 = p1[n];\n      if (v0 !== v1 && typeof v0 === \"number\") {\n        v = v0 + (v1 - v0) * ratio;\n      } else {\n        v = ratio >= 1 ? v1 : v0;\n      }\n      if (plugins) {\n        for (let i = 0, l = plugins.length; i < l; i++) {\n          let value = plugins[i].change(this, step, n, v, ratio, end);\n          if (value === Tween.IGNORE) {\n            continue proploop;\n          }\n          if (value !== undefined) {\n            v = value;\n          }\n        }\n      }\n      this.target[n] = v;\n    }\n  }\n  _runActionsRange(startPos, endPos, jump, includeStart) {\n    let rev = startPos > endPos;\n    let action = rev ? this._actionTail : this._actionHead;\n    let ePos = endPos, sPos = startPos;\n    if (rev) {\n      ePos = startPos;\n      sPos = endPos;\n    }\n    let t = this.position;\n    while (action) {\n      let pos = action.t;\n      if (pos === endPos || pos > sPos && pos < ePos || includeStart && pos === startPos) {\n        action.funct.apply(action.scope, action.params);\n        if (t !== this.position) {\n          return true;\n        }\n      }\n      action = rev ? action.prev : action.next;\n    }\n  }\n  _appendProps(props, step, stepPlugins) {\n    let initProps = this._stepHead.props, target = this.target, plugins = Tween._plugins;\n    let n, i, l, value, initValue, inject;\n    let oldStep = step.prev, oldProps = oldStep.props;\n    let stepProps = step.props || (step.props = this._cloneProps(oldProps));\n    let cleanProps = {};\n    for (n in props) {\n      if (!props.hasOwnProperty(n)) {\n        continue;\n      }\n      cleanProps[n] = stepProps[n] = props[n];\n      if (initProps[n] !== undefined) {\n        continue;\n      }\n      initValue = undefined;\n      if (plugins) {\n        for (i = plugins.length - 1; i >= 0; i--) {\n          value = plugins[i].init(this, n, initValue);\n          if (value !== undefined) {\n            initValue = value;\n          }\n          if (initValue === Tween.IGNORE) {\n            (ignored = ignored || {})[n] = true;\n            delete stepProps[n];\n            delete cleanProps[n];\n            break;\n          }\n        }\n      }\n      if (initValue !== Tween.IGNORE) {\n        if (initValue === undefined) {\n          initValue = target[n];\n        }\n        oldProps[n] = initValue === undefined ? null : initValue;\n      }\n    }\n    for (n in cleanProps) {\n      value = props[n];\n      let o, prev = oldStep;\n      while ((o = prev) && (prev = o.prev)) {\n        if (prev.props === o.props) {\n          continue;\n        }\n        if (prev.props[n] !== undefined) {\n          break;\n        }\n        prev.props[n] = oldProps[n];\n      }\n    }\n    if (stepPlugins && (plugins = this._plugins)) {\n      for (i = plugins.length - 1; i >= 0; i--) {\n        plugins[i].step(this, step, cleanProps);\n      }\n    }\n    if (inject = this._injected) {\n      this._injected = null;\n      this._appendProps(inject, step, false);\n    }\n  }\n  _injectProp(name, value) {\n    let o = this._injected || (this._injected = {});\n    o[name] = value;\n  }\n  _addStep(duration, props, ease, passive = false) {\n    let step = new TweenStep(this._stepTail, this.duration, duration, props, ease, passive);\n    this.duration += duration;\n    return this._stepTail = this._stepTail.next = step;\n  }\n  _addAction(scope, funct, params) {\n    let action = new TweenAction(this._actionTail, this.duration, scope, funct, params);\n    if (this._actionTail) {\n      this._actionTail.next = action;\n    } else {\n      this._actionHead = action;\n    }\n    this._actionTail = action;\n    return this;\n  }\n  _set(props) {\n    for (let n in props) {\n      this[n] = props[n];\n    }\n  }\n  _cloneProps(props) {\n    let o = {};\n    for (let n in props) {\n      o[n] = props[n];\n    }\n    return o;\n  }\n}\n\n{\n  let p = Tween.prototype;\n  p.w = p.wait;\n  p.t = p.to;\n  p.c = p.call;\n  p.s = p.set;\n}\n\nTween.IGNORE = {};\n\nTween._tweens = [];\n\nTween._plugins = null;\n\nTween._tweenHead = null;\n\nTween._tweenTail = null;\n\nclass TweenStep {\n  constructor(prev, t, d, props, ease, passive) {\n    this.next = null;\n    this.prev = prev;\n    this.t = t;\n    this.d = d;\n    this.props = props;\n    this.ease = ease;\n    this.passive = passive;\n    this.index = prev ? prev.index + 1 : 0;\n  }\n}\n\nclass TweenAction {\n  constructor(prev, t, scope, funct, params) {\n    this.next = null;\n    this.d = 0;\n    this.prev = prev;\n    this.t = t;\n    this.scope = scope;\n    this.funct = funct;\n    this.params = params;\n  }\n}\n\nclass Timeline extends AbstractTween {\n  constructor(props = {}) {\n    super(props);\n    this.tweens = [];\n    if (props.tweens) {\n      this.addTween(...props.tweens);\n    }\n    if (props.labels) {\n      this.labels = props.labels;\n    }\n    this._init(props);\n  }\n  addTween(...tweens) {\n    const l = tweens.length;\n    if (l === 1) {\n      const tween = tweens[0];\n      this.tweens.push(tween);\n      tween._parent = this;\n      tween.paused = true;\n      let d = tween.duration;\n      if (tween.loop > 0) {\n        d *= tween.loop + 1;\n      }\n      if (d > this.duration) {\n        this.duration = d;\n      }\n      if (this.rawPosition >= 0) {\n        tween.setPosition(this.rawPosition);\n      }\n      return tween;\n    }\n    if (l > 1) {\n      for (let i = 0; i < l; i++) {\n        this.addTween(tweens[i]);\n      }\n      return tweens[l - 1];\n    }\n    return null;\n  }\n  removeTween(...tweens) {\n    const l = tweens.length;\n    if (l === 1) {\n      const tw = this.tweens;\n      const tween = tweens[0];\n      let i = tw.length;\n      while (i--) {\n        if (tw[i] === tween) {\n          tw.splice(i, 1);\n          tween._parent = null;\n          if (tween.duration >= this.duration) {\n            this.updateDuration();\n          }\n          return true;\n        }\n      }\n      return false;\n    }\n    if (l > 1) {\n      let good = true;\n      for (let i = 0; i < l; i++) {\n        good = good && this.removeTween(tweens[i]);\n      }\n      return good;\n    }\n    return true;\n  }\n  updateDuration() {\n    this.duration = 0;\n    for (let i = 0, l = this.tweens.length; i < l; i++) {\n      let tween = this.tweens[i];\n      let d = tween.duration;\n      if (tween.loop > 0) {\n        d *= tween.loop + 1;\n      }\n      if (d > this.duration) {\n        this.duration = d;\n      }\n    }\n  }\n  clone() {\n    throw \"Timeline can not be cloned.\";\n  }\n  _updatePosition(jump, end) {\n    const t = this.position;\n    for (let i = 0, l = this.tweens.length; i < l; i++) {\n      this.tweens[i].setPosition(t, true, jump);\n    }\n  }\n  _runActionsRange(startPos, endPos, jump, includeStart) {\n    const t = this.position;\n    for (let i = 0, l = this.tweens.length; i < l; i++) {\n      this.tweens[i]._runActions(startPos, endPos, jump, includeStart);\n      if (t !== this.position) {\n        return true;\n      }\n    }\n  }\n}\n\n\n\n\n\nvar cjs = window.createjs = window.createjs || {};\n\nvar v = cjs.v = cjs.v || {};\n\nv.tweenjs = \"2.0.0\";\n//# sourceMappingURL=maps/tweenjs.module.js.map\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/tweenjs/dist/tweenjs.module.js?");

/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/AbstractTween.js":
/*!*************************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/AbstractTween.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _createjs_core_src_events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core/src/events/EventDispatcher */ \"./node_modules/@createjs/core/src/events/EventDispatcher.js\");\n/* harmony import */ var _Tween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Tween */ \"./node_modules/@createjs/tweenjs/src/Tween.js\");\n/**\n * @license AbstractTween\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n\n\n/**\n * Base class that both {@link tweenjs.Tween} and {@link tweenjs.Timeline} extend. Should not be instantiated directly.\n *\n * @memberof tweenjs\n * @extends EventDispatcher\n *\n * @param {Object} [props] The configuration properties to apply to this instance (ex. `{loop:-1, paused:true}`).\n * @param {boolean} [props.useTicks=false] See the {@link tweenjs.AbstractTween#useTicks} property for more information.\n * @param {boolean} [props.ignoreGlobalPause=false] See the {@link tweenjs.AbstractTween#ignoreGlobalPause} for more information.\n * @param {number|boolean} [props.loop=0] See the {@link tweenjs.AbstractTween#loop} for more information.\n * @param {boolean} [props.reversed=false] See the {@link tweenjs.AbstractTween#reversed} for more information.\n * @param {boolean} [props.bounce=false] See the {@link tweenjs.AbstractTween#bounce} for more information.\n * @param {number} [props.timeScale=1] See the {@link tweenjs.AbstractTween#timeScale} for more information.\n * @param {Function} [props.onChange] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:change} event.\n * @param {Function} [props.onComplete] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:complete} event.\n */\nclass AbstractTween extends _createjs_core_src_events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n  constructor (props) {\n    super();\n\n\t\t/**\n\t\t * Causes this tween to continue playing when a global pause is active. For example, if TweenJS is using {@link core.Ticker},\n\t\t * then setting this to false (the default) will cause this tween to be paused when `Ticker.setPaused(true)`\n\t\t * is called. See the {@link tweenjs.Tween#tick} method for more info. Can be set via the `props` parameter.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.ignoreGlobalPause = false;\n\n\t\t/**\n\t\t * Indicates the number of times to loop. If set to -1, the tween will loop continuously.\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.loop = 0;\n\n\t\t/**\n\t\t * Uses ticks for all durations instead of milliseconds. This also changes the behaviour of some actions (such as `call`).\n\t\t * Changing this value on a running tween could have unexpected results.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.useTicks = false;\n\n\t\t/**\n\t\t * Causes the tween to play in reverse.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.reversed = false;\n\n\t\t/**\n\t\t * Causes the tween to reverse direction at the end of each loop.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.bounce = false;\n\n\t\t/**\n\t\t * Changes the rate at which the tween advances. For example, a `timeScale` value of `2` will double the\n\t\t * playback speed, a value of `0.5` would halve it.\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.timeScale = 1;\n\n\t\t/**\n\t\t * Indicates the duration of this tween in milliseconds (or ticks if `useTicks` is true), irrespective of `loops`.\n\t\t * This value is automatically updated as you modify the tween. Changing it directly could result in unexpected\n\t\t * behaviour.\n\t\t * @type {number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.duration = 0;\n\n\t\t/**\n\t\t * The current normalized position of the tween. This will always be a value between 0 and `duration`.\n\t\t * Changing this property directly will have unexpected results, use {@link tweenjs.Tween#setPosition}.\n\t\t * @type {Object}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.position = 0;\n\n\t\t/**\n\t\t * The raw tween position. This value will be between `0` and `loops * duration` while the tween is active, or -1 before it activates.\n\t\t * @type {number}\n\t\t * @default -1\n\t\t * @readonly\n\t\t */\n\t\tthis.rawPosition = -1;\n\n\t\t/**\n\t\t * @private\n\t\t * @default false\n\t\t */\n\t\tthis._paused = true;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Tween}\n\t\t * @default null\n\t\t */\n\t\tthis._next = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Tween}\n\t\t * @default null\n\t\t */\n\t\tthis._prev = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis._parent = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t\tthis._labels = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {Object[]}\n\t\t */\n\t\tthis._labelList = null;\n\n\t\tif (props) {\n\t\t\tthis.useTicks = !!props.useTicks;\n\t\t\tthis.ignoreGlobalPause = !!props.ignoreGlobalPause;\n\t\t\tthis.loop = props.loop === true ? -1 : (props.loop||0);\n\t\t\tthis.reversed = !!props.reversed;\n\t\t\tthis.bounce = !!props.bounce;\n\t\t\tthis.timeScale = props.timeScale||1;\n\t\t\tprops.onChange && this.addEventListener(\"change\", props.onChange);\n\t\t\tprops.onComplete && this.addEventListener(\"complete\", props.onComplete);\n\t\t}\n\n\t\t// while `position` is shared, it needs to happen after ALL props are set, so it's handled in _init()\n  }\n\n\t/**\n\t * Returns a list of the labels defined on this tween sorted by position.\n\t * @type {Object[]}\n\t */\n\tget labels () {\n\t\tlet list = this._labelList;\n\t\tif (!list) {\n\t\t\tlist = this._labelList = [];\n\t\t\tlet labels = this._labels;\n\t\t\tfor (let label in labels) {\n\t\t\t\tlist.push({ label, position: labels[label] });\n\t\t\t}\n\t\t\tlist.sort((a, b) => a.position - b.position);\n\t\t}\n\t\treturn list;\n\t}\n\n\tset labels (labels) {\n\t\tthis._labels = labels;\n\t\tthis._labelList = null;\n\t}\n\n  /**\n   * Returns the name of the label on or immediately before the current position. For example, given a tween with\n   * two labels, \"first\" on frame index 4, and \"second\" on frame 8, currentLabel would return:\n   * <ul>\n   *   <li>null if the current position is 2.</li>\n   *   <li>\"first\" if the current position is 4.</li>\n   *   <li>\"first\" if the current position is 7.</li>\n   *   <li>\"second\" if the current position is 15.</li>\n   * </ul>\n   * @type {string}\n   * @readonly\n   */\n  get currentLabel () {\n    let labels = this.labels;\n    let pos = this.position;\n    for (let i = 0, l = labels.length; i < l; i++) { if (pos < labels[i].position) { break; } }\n    return (i === 0) ? null : labels[i-1].label;\n  }\n\n  /**\n   * Pauses or unpauses the tween. A paused tween is removed from the global registry and is eligible for garbage collection\n   * if no other references to it exist.\n   * @type {boolean}\n\t */\n\tget paused () {\n\t\treturn this._paused;\n\t}\n\n  set paused (paused) {\n    _Tween__WEBPACK_IMPORTED_MODULE_1__[\"default\"]._register(this, paused);\n\t\tthis._paused = paused;\n  }\n\n\t/**\n\t * Advances the tween by a specified amount.\n\t *\n\t * @example\n\t * `var a = 2 + 2;`\n\t * Some words\n\t * `var b = 5;`\n\t *\n\t * @param {number} delta The amount to advance in milliseconds (or ticks if useTicks is true). Negative values are supported.\n\t * @param {boolean} [ignoreActions=false] If true, actions will not be executed due to this change in position.\n\t */\n\tadvance (delta, ignoreActions = false) {\n\t\tthis.setPosition(this.rawPosition + delta * this.timeScale, ignoreActions);\n\t}\n\n\t/**\n\t * Advances the tween to a specified position.\n\t *\n\t * @emits tweenjs.AbstractTween#event:change\n\t * @emits tweenjs.AbstractTween#event:complete\n\t *\n\t * @param {number} rawPosition The raw position to seek to in milliseconds (or ticks if useTicks is true).\n\t * @param {boolean} [ignoreActions=false] If true, do not run any actions that would be triggered by this operation.\n\t * @param {boolean} [jump=false] If true, only actions at the new position will be run. If false, actions between the old and new position are run.\n\t * @param {Function} [callback] Primarily for use with MovieClip, this callback is called after properties are updated, but before actions are run.\n\t */\n\tsetPosition (rawPosition, ignoreActions = false, jump = false, callback) {\n\t\tconst d = this.duration, loopCount = this.loop, prevRawPos = this.rawPosition;\n    let loop = 0, t = 0, end = false;\n\n\t\t// normalize position:\n\t\tif (rawPosition < 0) { rawPosition = 0; }\n\n\t\tif (d === 0) {\n\t\t\t// deal with 0 length tweens.\n\t\t\tend = true;\n\t\t\tif (prevRawPos !== -1) { return end; } // we can avoid doing anything else if we're already at 0.\n\t\t} else {\n\t\t\tloop = rawPosition / d | 0;\n\t\t\tt = rawPosition - loop * d;\n\n\t\t\tend = (loopCount !== -1 && rawPosition >= loopCount * d + d);\n\t\t\tif (end) { rawPosition = (t = d) * (loop = loopCount) + d; }\n\t\t\tif (rawPosition === prevRawPos) { return end; } // no need to update\n\n\t\t\t// current loop is reversed\n\t\t\tif (!this.reversed !== !(this.bounce && loop % 2)) { t = d - t; }\n\t\t}\n\n\t\t// set this in advance in case an action modifies position:\n\t\tthis.position = t;\n\t\tthis.rawPosition = rawPosition;\n\n\t\tthis._updatePosition(jump, end);\n\t\tif (end) { this.paused = true; }\n\n\t\tcallback && callback(this);\n\n\t\tif (!ignoreActions) { this._runActions(prevRawPos, rawPosition, jump, !jump && prevRawPos === -1); }\n\n\t\tthis.dispatchEvent(\"change\");\n\t\tif (end) { this.dispatchEvent(\"complete\"); }\n\t}\n\n\t/**\n\t * Calculates a normalized position based on a raw position.\n\t *\n\t * @example\n\t * // given a tween with a duration of 3000ms set to loop:\n\t * console.log(myTween.calculatePosition(3700); // 700\n\t *\n\t * @param {number} rawPosition A raw position.\n\t */\n\tcalculatePosition (rawPosition) {\n\t\t// largely duplicated from setPosition, but necessary to avoid having to instantiate generic objects to pass values (end, loop, position) back.\n\t\tconst d = this.duration, loopCount = this.loop;\n    let loop = 0, t = 0;\n\n\t\tif (d === 0) { return 0; }\n\t\tif (loopCount !== -1 && rawPosition >= loopCount * d + d) {\n      t = d;\n      loop = loopCount\n    } else if (rawPosition < 0) {\n      t = 0;\n    } else {\n      loop = rawPosition / d | 0;\n      t = rawPosition - loop * d;\n    }\n\n\t\treturn (!this.reversed !== !(this.bounce && loop % 2)) ? d - t : t;\n\t}\n\n\t/**\n\t * Adds a label that can be used with {@link tweenjs.Timeline#gotoAndPlay}/{@link tweenjs.Timeline#gotoAndStop}.\n\t *\n\t * @param {string} label The label name.\n\t * @param {number} position The position this label represents.\n\t */\n\taddLabel (label, position) {\n\t\tif (!this._labels) { this._labels = {}; }\n\t\tthis._labels[label] = position;\n\t\tconst list = this._labelList;\n\t\tif (list) {\n\t\t\tfor (let i = 0, l = list.length; i < l; i++) { if (position < list[i].position) { break; } }\n\t\t\tlist.splice(i, 0, { label, position });\n\t\t}\n\t}\n\n\t/**\n\t * Unpauses this timeline and jumps to the specified position or label.\n\t *\n\t * @param {string|number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`)\n\t * or label to jump to.\n\t */\n\tgotoAndPlay (positionOrLabel) {\n\t\tthis.paused = false;\n\t\tthis._goto(positionOrLabel);\n\t}\n\n\t/**\n\t * Pauses this timeline and jumps to the specified position or label.\n\t *\n\t * @param {string|number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`) or label\n\t * to jump to.\n\t */\n\tgotoAndStop (positionOrLabel) {\n\t\tthis.paused = true;\n\t\tthis._goto(positionOrLabel);\n\t}\n\n\t/**\n\t * If a numeric position is passed, it is returned unchanged. If a string is passed, the position of the\n\t * corresponding frame label will be returned, or `null` if a matching label is not defined.\n\t *\n\t * @param {string|number} positionOrLabel A numeric position value or label string.\n\t */\n\tresolve (positionOrLabel) {\n\t\tconst pos = Number(positionOrLabel);\n    return isNaN(pos) ? this._labels && this._labels[positionOrLabel] : pos;\n\t}\n\n\t/**\n\t * Returns a string representation of this object.\n\t *\n\t * @return {string} a string representation of the instance.\n\t */\n\ttoString () {\n\t\treturn `[${this.constructor.name}${this.name ? ` (name=${this.name})` : \"\"}]`;\n\t}\n\n\t/**\n\t * @throws AbstractTween cannot be cloned.\n\t */\n\tclone () {\n\t\tthrow \"AbstractTween cannot be cloned.\";\n\t}\n\n\t/**\n\t * Shared logic that executes at the end of the subclass constructor.\n\t *\n\t * @private\n\t *\n\t * @param {Object} [props]\n\t */\n\t_init (props) {\n\t\tif (!props || !props.paused) { this.paused = false; }\n\t\tif (props && props.position != null) { this.setPosition(props.position); }\n\t}\n\n\t/**\n\t * @private\n\t * @param {string|number} positionOrLabel\n\t */\n\t_goto (positionOrLabel) {\n\t\tconst pos = this.resolve(positionOrLabel);\n\t\tif (pos != null) { this.setPosition(pos, false, true); }\n\t}\n\n\t/**\n   * Runs actions between startPos & endPos. Separated to support action deferral.\n   *\n\t * @private\n\t *\n\t * @param {number} startRawPos\n\t * @param {number} endRawPos\n\t * @param {boolean} jump\n\t * @param {boolean} includeStart\n\t */\n\t_runActions (startRawPos, endRawPos, jump, includeStart) {\n\t  // console.log(this.passive === false ? \" > Tween\" : \"Timeline\", \"run\", startRawPos, endRawPos, jump, includeStart);\n\t\t// if we don't have any actions, and we're not a Timeline, then return:\n\t\t// TODO: a cleaner way to handle this would be to override this method in Tween, but I'm not sure it's worth the overhead.\n\t\tif (!this._actionHead && !this.tweens) { return; }\n\n\t\tconst d = this.duration, loopCount = this.loop;\n    let reversed = this.reversed, bounce = this.bounce;\n\t\tlet loop0, loop1, t0, t1;\n\n\t\tif (d === 0) {\n\t\t\t// deal with 0 length tweens:\n\t\t\tloop0 = loop1 = t0 = t1 = 0;\n\t\t\treversed = bounce = false;\n\t\t} else {\n\t\t\tloop0 = startRawPos / d | 0;\n\t\t\tloop1 = endRawPos / d | 0;\n\t\t\tt0 = startRawPos - loop0 * d;\n\t\t\tt1 = endRawPos - loop1 * d;\n\t\t}\n\n\t\t// catch positions that are past the end:\n\t\tif (loopCount !== -1) {\n\t\t\tif (loop1 > loopCount) { t1 = d; loop1 = loopCount; }\n\t\t\tif (loop0 > loopCount) { t0 = d; loop0 = loopCount; }\n\t\t}\n\n\t\t// special cases:\n\t\tif (jump) { return this._runActionsRange(t1, t1, jump, includeStart); } // jump.\n    else if (loop0 === loop1 && t0 === t1 && !jump && !includeStart) { return; } // no actions if the position is identical and we aren't including the start\n\t\telse if (loop0 === -1) { loop0 = t0 = 0; } // correct the -1 value for first advance, important with useTicks.\n\n\t\tconst dir = (startRawPos <= endRawPos);\n\t\tlet loop = loop0;\n\t\tdo {\n\t\t\tlet rev = !reversed !== !(bounce && loop % 2);\n\t\t\tlet start = (loop === loop0) ? t0 : dir ? 0 : d;\n\t\t\tlet end = (loop === loop1) ? t1 : dir ? d : 0;\n\n\t\t\tif (rev) {\n\t\t\t\tstart = d - start;\n\t\t\t\tend = d - end;\n\t\t\t}\n\n\t\t\tif (bounce && loop !== loop0 && start === end) { /* bounced onto the same time/frame, don't re-execute end actions */ }\n\t\t\telse if (this._runActionsRange(start, end, jump, includeStart || (loop !== loop0 && !bounce))) { return true; }\n\n\t\t\tincludeStart = false;\n\t\t} while ((dir && ++loop <= loop1) || (!dir && --loop >= loop1));\n\t}\n\n  /**\n   * @private\n   * @abstract\n   * @throws Must be overridden by a subclass.\n\t */\n\t_runActionsRange (startPos, endPos, jump, includeStart) {\n\t\tthrow \"_runActionsRange is abstract and must be overridden by a subclass.\";\n\t}\n\n  /**\n\t * @private\n   * @abstract\n   * @throws Must be overridden by a subclass.\n\t */\n\t_updatePosition (jump, end) {\n    throw \"_updatePosition is abstract and must be overridden by a subclass.\";\n\t}\n\n}\n\n/**\n * Dispatched whenever the tween's position changes. It occurs after all tweened properties are updated and actions\n * are executed.\n * @event tweenjs.AbstractTween#change\n */\n/**\n * Dispatched when the tween reaches its end and has paused itself. This does not fire until all loops are complete;\n * tweens that loop continuously will never fire a complete event.\n * @event tweenjs.AbstractTween#complete\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AbstractTween);\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/tweenjs/src/AbstractTween.js?");

/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/Ease.js":
/*!****************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/Ease.js ***!
  \****************************************************/
/*! exports provided: linear, get, getPowIn, getPowOut, getPowInOut, sineIn, sineOut, sineInOut, getBackIn, getBackOut, getBackInOut, circIn, circOut, circInOut, bounceIn, bounceOut, bounceInOut, getElasticIn, getElasticOut, getElasticInOut, none, quadIn, quadOut, quadInOut, cubicIn, cubicOut, cubicInOut, quartIn, quartOut, quartInOut, quintIn, quintOut, quintInOut, backIn, backOut, backInOut, elasticIn, elasticOut, elasticInOut */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"linear\", function() { return linear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPowIn\", function() { return getPowIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPowOut\", function() { return getPowOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPowInOut\", function() { return getPowInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sineIn\", function() { return sineIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sineOut\", function() { return sineOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sineInOut\", function() { return sineInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBackIn\", function() { return getBackIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBackOut\", function() { return getBackOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBackInOut\", function() { return getBackInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"circIn\", function() { return circIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"circOut\", function() { return circOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"circInOut\", function() { return circInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bounceIn\", function() { return bounceIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bounceOut\", function() { return bounceOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"bounceInOut\", function() { return bounceInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getElasticIn\", function() { return getElasticIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getElasticOut\", function() { return getElasticOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getElasticInOut\", function() { return getElasticInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"none\", function() { return none; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quadIn\", function() { return quadIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quadOut\", function() { return quadOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quadInOut\", function() { return quadInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cubicIn\", function() { return cubicIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cubicOut\", function() { return cubicOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cubicInOut\", function() { return cubicInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quartIn\", function() { return quartIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quartOut\", function() { return quartOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quartInOut\", function() { return quartInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quintIn\", function() { return quintIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quintOut\", function() { return quintOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"quintInOut\", function() { return quintInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"backIn\", function() { return backIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"backOut\", function() { return backOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"backInOut\", function() { return backInOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"elasticIn\", function() { return elasticIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"elasticOut\", function() { return elasticOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"elasticInOut\", function() { return elasticInOut; });\n/**\n * @license Ease\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * The Ease class provides a collection of easing functions for use with TweenJS. It does not use the standard 4 param\n * easing signature. Instead it uses a single param which indicates the current linear ratio (0 to 1) of the tween.\n *\n * Most methods on Ease can be passed directly as easing functions:\n *\n *      Tween.get(target).to({x:100}, 500, Ease.linear);\n *\n * However, methods beginning with \"get\" will return an easing function based on parameter values:\n *\n *      Tween.get(target).to({y:200}, 500, Ease.getPowIn(2.2));\n *\n * Please see the <a href=\"http://www.createjs.com/Demos/TweenJS/Tween_SparkTable\">spark table demo</a> for an\n * overview of the different ease types on <a href=\"http://tweenjs.com\">TweenJS.com</a>.\n *\n * <em>Equations derived from work by Robert Penner.</em>\n *\n * @memberof tweenjs\n * @module Ease\n */\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction linear (t) {\n\treturn t;\n}\n\n/**\n * Mimics the simple -100 to 100 easing in Flash Pro.\n * @param {number} amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.\n * @return {Function}\n */\nfunction get (amount) {\n\tif (amount < -1) { amount = -1; } else if (amount > 1) { amount = 1; }\n\treturn function (t) {\n\t\tif (amount == 0) { return t; }\n\t\tif (amount < 0) { return t * (t * -amount + 1 + amount); }\n\t\treturn t * ((2 - t) * amount + (1 - amount));\n\t};\n}\n\n/**\n * Configurable exponential ease.\n * @param {number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @return {Function}\n */\nfunction getPowIn (pow) {\n\treturn function (t) {\n\t\treturn Math.pow(t, pow);\n\t};\n}\n\n/**\n * Configurable exponential ease.\n * @param {number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @return {Function}\n */\nfunction getPowOut (pow) {\n\treturn function (t) {\n\t\treturn 1 - Math.pow(1 - t, pow);\n\t};\n}\n\n/**\n * Configurable exponential ease.\n * @param {number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @return {Function}\n */\nfunction getPowInOut (pow) {\n\treturn function (t) {\n\t\tif ((t *= 2) < 1) return 0.5 * Math.pow(t, pow);\n\t\treturn 1 - 0.5 * Math.abs(Math.pow(2 - t, pow));\n\t};\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction sineIn (t) {\n\treturn 1 - Math.cos(t * Math.PI / 2);\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction sineOut (t) {\n\treturn Math.sin(t * Math.PI / 2);\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction sineInOut (t) {\n\treturn -0.5 * (Math.cos(Math.PI * t) - 1);\n}\n\n/**\n * Configurable \"back in\" ease.\n * @param {number} amount The strength of the ease.\n * @return {Function}\n */\nfunction getBackIn (amount) {\n\treturn function (t) {\n\t\treturn t * t * ((amount + 1) * t - amount);\n\t};\n}\n\n/**\n * Configurable \"back out\" ease.\n * @param {number} amount The strength of the ease.\n * @return {Function}\n */\nfunction getBackOut (amount) {\n\treturn function (t) {\n\t\treturn (--t * t * ((amount + 1) * t + amount) + 1);\n\t};\n}\n\n/**\n * Configurable \"back in out\" ease.\n * @param {number} amount The strength of the ease.\n * @return {Function}\n */\nfunction getBackInOut (amount) {\n\tamount *= 1.525;\n\treturn function (t) {\n\t\tif ((t *= 2) < 1) return 0.5 * (t * t * ((amount + 1) * t - amount));\n\t\treturn 0.5 * ((t -= 2) * t * ((amount + 1) * t + amount) + 2);\n\t};\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction circIn (t) {\n\treturn -(Math.sqrt(1 - t * t) - 1);\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction circOut (t) {\n\treturn Math.sqrt(1 - --t * t);\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction circInOut (t) {\n\tif ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1);\n\treturn 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction bounceIn (t) {\n\treturn 1 - Ease.bounceOut(1 - t);\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction bounceOut (t) {\n\tif (t < 1 / 2.75) {\n\t\treturn 7.5625 * t * t;\n\t} else if (t < 2 / 2.75) {\n\t\treturn 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n\t} else if (t < 2.5 / 2.75) {\n\t\treturn 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n\t} else {\n\t\treturn 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n\t}\n}\n\n/**\n * @param {number} t\n * @return {number}\n */\nfunction bounceInOut (t) {\n\tif (t < 0.5) return Ease.bounceIn(t * 2) * 0.5;\n\treturn Ease.bounceOut(t * 2 - 1) * 0.5 + 0.5;\n}\n\n/**\n * Configurable elastic ease.\n * @param {number} amplitude\n * @param {number} period\n * @return {Function}\n */\nfunction getElasticIn (amplitude, period) {\n\tlet pi2 = Math.PI * 2;\n\treturn function (t) {\n\t\tif (t === 0 || t === 1) return t;\n\t\tlet s = period / pi2 * Math.asin(1 / amplitude);\n\t\treturn -(amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));\n\t};\n}\n\n/**\n * Configurable elastic ease.\n * @param {number} amplitude\n * @param {number} period\n * @return {Function}\n */\nfunction getElasticOut (amplitude, period) {\n\tlet pi2 = Math.PI * 2;\n\treturn function (t) {\n\t\tif (t === 0 || t === 1) return t;\n\t\tlet s = period / pi2 * Math.asin(1 / amplitude);\n\t\treturn amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * pi2 / period) + 1;\n\t};\n}\n\n/**\n * Configurable elastic ease.\n * @param {number} amplitude\n * @param {number} period\n * @return {Function}\n */\nfunction getElasticInOut (amplitude, period) {\n\tlet pi2 = Math.PI * 2;\n\treturn function (t) {\n\t\tlet s = period / pi2 * Math.asin(1 / amplitude);\n\t\tif ((t *= 2) < 1) return -0.5 * (amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));\n\t\treturn amplitude * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * pi2 / period) * 0.5 + 1;\n\t};\n}\n\n/**\n * Identical to linear.\n * @param {number} t\n * @return {number}\n */\nconst none = linear;\n/**\n * @param {number} t\n * @return {number}\n */\nconst quadIn = getPowIn(2);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quadOut = getPowOut(2);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quadInOut = getPowInOut(2);\n/**\n * @param {number} t\n * @return {number}\n */\nconst cubicIn = getPowIn(3);\n/**\n * @param {number} t\n * @return {number}\n */\nconst cubicOut = getPowOut(3);\n/**\n * @param {number} t\n * @return {number}\n */\nconst cubicInOut = getPowInOut(3);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quartIn = getPowIn(4);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quartOut = getPowOut(4);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quartInOut = getPowInOut(4);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quintIn = getPowIn(5);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quintOut = getPowOut(5);\n/**\n * @param {number} t\n * @return {number}\n */\nconst quintInOut = getPowInOut(5);\n/**\n * @param {number} t\n * @return {number}\n */\nconst backIn = getBackIn(1.7);\n/**\n * @param {number} t\n * @return {number}\n */\nconst backOut = getBackOut(1.7);\n/**\n * @param {number} t\n * @return {number}\n */\nconst backInOut = getBackInOut(1.7);\n/**\n * @param {number} t\n * @return {number}\n */\nconst elasticIn = getElasticIn(1, 0.3);\n/**\n * @param {number} t\n * @return {number}\n */\nconst elasticOut = getElasticOut(1, 0.3);\n/**\n * @param {number} t\n * @return {number}\n */\nconst elasticInOut = getElasticInOut(1, 0.3 * 1.5);\n\n\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/tweenjs/src/Ease.js?");

/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/Timeline.js":
/*!********************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/Timeline.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _AbstractTween__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractTween */ \"./node_modules/@createjs/tweenjs/src/AbstractTween.js\");\n/*\n* Timeline\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n\n/**\n * The Timeline class synchronizes multiple tweens and allows them to be controlled as a group. Please note that if a\n * timeline is looping, the tweens on it may appear to loop even if the \"loop\" property of the tween is false.\n *\n * NOTE: Timeline currently also accepts a param list in the form: `tweens, labels, props`. This is for backwards\n * compatibility only and will be removed in the future. Include tweens and labels as properties on the props object.\n *\n * @memberof tweenjs\n * @extends AbstractTween\n *\n * @param {Object} [props] The configuration properties to apply to this instance (ex. `{loop:-1, paused:true}`).\n * @param {boolean} [props.useTicks=false] See the {@link tweenjs.AbstractTween#useTicks} property for more information.\n * @param {boolean} [props.ignoreGlobalPause=false] See the {@link tweenjs.AbstractTween#ignoreGlobalPause} for more information.\n * @param {number|boolean} [props.loop=0] See the {@link tweenjs.AbstractTween#loop} for more information.\n * @param {boolean} [props.reversed=false] See the {@link tweenjs.AbstractTween#reversed} for more information.\n * @param {boolean} [props.bounce=false] See the {@link tweenjs.AbstractTween#bounce} for more information.\n * @param {number} [props.timeScale=1] See the {@link tweenjs.AbstractTween#timeScale} for more information.\n * @param {boolean} [props.paused=false] See the {@link tweenjs.AbstractTween#paused} for more information.\n * @param {number} [props.position] See the {@link tweenjs.AbstractTween#position} for more information.\n * @param {boolean} [props.tweens]\n * @param {number} [props.labels]\n * @param {Function} [props.onChange] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:change} event.\n * @param {Function} [props.onComplete] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:complete} event.\n * Supported props are listed below. These props are set on the corresponding instance properties except where\n * specified.<UL>\n *    <LI> `useTicks`</LI>\n *    <LI> `ignoreGlobalPause`</LI>\n *    <LI> `loop`</LI>\n *    <LI> `reversed`</LI>\n *    <LI> `bounce`</LI>\n *    <LI> `timeScale`</LI>\n *    <LI> `paused`</LI>\n *    <LI> `position`: indicates the initial position for this tween.</LI>\n *    <LI> `onChange`: adds the specified function as a listener to the `change` event</LI>\n *    <LI> `onComplete`: adds the specified function as a listener to the `complete` event</LI>\n * </UL>\n */\nclass Timeline extends _AbstractTween__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n\tconstructor (props = {}) {\n\t\tsuper(props);\n\n\t\t/**\n\t\t * The array of tweens in the timeline. It is *strongly* recommended that you use\n\t\t * {@link tweenjs.Tween#addTween} and {@link tweenjs.Tween#removeTween},\n\t\t * rather than accessing this directly, but it is included for advanced uses.\n\t\t * @type {Tween[]}\n\t\t */\n\t\tthis.tweens = [];\n\n\t\tif (props.tweens) { this.addTween(...props.tweens); }\n\t\tif (props.labels) { this.labels = props.labels; }\n\n\t\tthis._init(props);\n\t}\n\n\t/**\n\t * Adds one or more tweens (or timelines) to this timeline. The tweens will be paused (to remove them from the\n\t * normal ticking system) and managed by this timeline. Adding a tween to multiple timelines will result in\n\t * unexpected behaviour.\n\t *\n\t * @param {Tween} ...tweens The tween(s) to add. Accepts multiple arguments.\n\t * @return {Tween} The first tween that was passed in.\n\t */\n\taddTween (...tweens) {\n\t\tconst l = tweens.length;\n\t\tif (l === 1) {\n\t\t\tconst tween = tweens[0];\n\t\t\tthis.tweens.push(tween);\n\t\t\ttween._parent = this;\n\t\t\ttween.paused = true;\n\t\t\tlet d = tween.duration;\n\t\t\tif (tween.loop > 0) { d *= tween.loop + 1; }\n\t\t\tif (d > this.duration) { this.duration = d; }\n\t\t\tif (this.rawPosition >= 0) { tween.setPosition(this.rawPosition); }\n\t\t\treturn tween;\n\t\t}\n\t\tif (l > 1) {\n\t\t\tfor (let i = 0; i < l; i++) { this.addTween(tweens[i]); }\n\t\t\treturn tweens[l - 1];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes one or more tweens from this timeline.\n\t *\n\t * @param {Tween} ...tweens The tween(s) to remove. Accepts multiple arguments.\n\t * @return {boolean} Returns `true` if all of the tweens were successfully removed.\n\t */\n\tremoveTween (...tweens) {\n\t\tconst l = tweens.length;\n\t\tif (l === 1) {\n\t\t\tconst tw = this.tweens;\n\t\t\tconst tween = tweens[0];\n\t\t\tlet i = tw.length;\n\t\t\twhile (i--) {\n\t\t\t\tif (tw[i] === tween) {\n\t\t\t\t\ttw.splice(i, 1);\n\t\t\t\t\ttween._parent = null;\n\t\t\t\t\tif (tween.duration >= this.duration) { this.updateDuration(); }\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tif (l > 1) {\n\t\t\tlet good = true;\n\t\t\tfor (let i = 0; i < l; i++) { good = good && this.removeTween(tweens[i]); }\n\t\t\treturn good;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Recalculates the duration of the timeline. The duration is automatically updated when tweens are added or removed,\n\t * but this method is useful if you modify a tween after it was added to the timeline.\n\t */\n\tupdateDuration () {\n\t\tthis.duration = 0;\n\t\tfor (let i = 0, l = this.tweens.length; i < l; i++) {\n\t\t\tlet tween = this.tweens[i];\n\t\t\tlet d = tween.duration;\n\t\t\tif (tween.loop > 0) { d *= tween.loop + 1; }\n\t\t\tif (d > this.duration) { this.duration = d; }\n\t\t}\n\t}\n\n\t/**\n\t * @throws Timeline cannot be cloned.\n\t */\n\tclone () {\n\t\tthrow \"Timeline can not be cloned.\";\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_updatePosition (jump, end) {\n\t\tconst t = this.position;\n\t\tfor (let i = 0, l = this.tweens.length; i < l; i++) {\n\t\t\tthis.tweens[i].setPosition(t, true, jump); // actions will run after all the tweens update.\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_runActionsRange (startPos, endPos, jump, includeStart) {\n\t\t//console.log(\"\trange\", startPos, endPos, jump, includeStart);\n\t\tconst t = this.position;\n\t\tfor (let i = 0, l = this.tweens.length; i < l; i++) {\n\t\t\tthis.tweens[i]._runActions(startPos, endPos, jump, includeStart);\n\t\t\tif (t !== this.position) { return true; } // an action changed this timeline's position.\n\t\t}\n\t}\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Timeline);\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/tweenjs/src/Timeline.js?");

/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/Tween.js":
/*!*****************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/Tween.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _AbstractTween__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractTween */ \"./node_modules/@createjs/tweenjs/src/AbstractTween.js\");\n/* harmony import */ var _Ease__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Ease */ \"./node_modules/@createjs/tweenjs/src/Ease.js\");\n/* harmony import */ var _createjs_core_src_utils_Ticker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @createjs/core/src/utils/Ticker */ \"./node_modules/@createjs/core/src/utils/Ticker.js\");\n/**\n * @license Tween\n * Visit http://createjs.com/ for documentation, updates and examples.\n *\n * Copyright (c) 2017 gskinner.com, inc.\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n\n\n\n/**\n * Tweens properties for a single target. Methods can be chained to create complex animation sequences:\n *\n * @example\n * Tween.get(target)\n *   .wait(500)\n *   .to({ alpha: 0, visible: false }, 1000)\n *   .call(handleComplete);\n *\n * Multiple tweens can share a target, however if they affect the same properties there could be unexpected\n * behaviour. To stop all tweens on an object, use {@link tweenjs.Tween#removeTweens} or pass `override:true`\n * in the props argument.\n *\n * \tcreatejs.Tween.get(target, {override:true}).to({x:100});\n *\n * Subscribe to the {@link tweenjs.Tween#event:change} event to be notified when the tween position changes.\n *\n * \tcreatejs.Tween.get(target, {override:true}).to({x:100}).addEventListener(\"change\", handleChange);\n * \tfunction handleChange(event) {\n * \t\t// The tween changed.\n * \t}\n *\n * @see tweenjs.Tween.get\n *\n * @memberof tweenjs\n * @extends AbstractTween\n *\n * @param {Object} target The target object that will have its properties tweened.\n * @param {Object} [props] The configuration properties to apply to this instance (ex. `{loop:-1, paused:true}`).\n * @param {boolean} [props.useTicks]\n * @param {boolean} [props.ignoreGlobalPause]\n * @param {number|boolean} [props.loop]\n * @param {boolean} [props.reversed]\n * @param {boolean} [props.bounce]\n * @param {number} [props.timeScale]\n * @param {Object} [props.pluginData]\n * @param {boolean} [props.paused]\n * @param {*} [props.position] indicates the initial position for this tween\n * @param {*} [props.onChange] adds the specified function as a listener to the `change` event\n * @param {*} [props.onComplete] adds the specified function as a listener to the `complete` event\n * @param {*} [props.override] if true, removes all existing tweens for the target\n */\nclass Tween extends _AbstractTween__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n\tconstructor (target, props) {\n\t\tsuper(props);\n\n\t\t/**\n\t\t * Allows you to specify data that will be used by installed plugins. Each plugin uses this differently, but in general\n\t\t * you specify data by assigning it to a property of `pluginData` with the same name as the plugin.\n\t\t * Note that in many cases, this data is used as soon as the plugin initializes itself for the tween.\n\t\t * As such, this data should be set before the first `to` call in most cases.\n\t\t *\n\t\t * Some plugins also store working data in this object, usually in a property named `_PluginClassName`.\n\t\t * See the documentation for individual plugins for more details.\n\t\t *\n\t\t * @example\n\t\t * myTween.pluginData.SmartRotation = data;\n\t\t * myTween.pluginData.SmartRotation_disabled = true;\n\t\t *\n\t\t *\n\t\t * @default null\n\t\t * @type {Object}\n\t\t */\n\t\tthis.pluginData = null;\n\n\t\t/**\n\t\t * The target of this tween. This is the object on which the tweened properties will be changed.\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t */\n\t\tthis.target = target;\n\n\t\t/**\n\t\t * Indicates the tween's current position is within a passive wait.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.passive = false;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {TweenStep}\n\t\t */\n\t\tthis._stepHead = new TweenStep(null, 0, 0, {}, null, true);\n\n\t\t/**\n\t\t * @private\n\t\t * @type {TweenStep}\n\t\t */\n\t\tthis._stepTail = this._stepHead;\n\n\t\t/**\n\t\t * The position within the current step. Used by MovieClip.\n\t\t * @private\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis._stepPosition = 0;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {TweenAction}\n\t\t * @default null\n\t\t */\n\t\tthis._actionHead = null;\n\n\t\t/**\n\t\t * @private\n\t\t * @type {TweenAction}\n\t\t * @default null\n\t\t */\n\t\tthis._actionTail = null;\n\n\t\t/**\n\t\t * Plugins added to this tween instance.\n\t\t * @private\n\t\t * @type {Object[]}\n\t\t * @default null\n\t\t */\n\t\tthis._plugins = null;\n\n\t\t/**\n\t\t * Hash for quickly looking up added plugins. Null until a plugin is added.\n\t\t * @private\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis._pluginIds = null;\n\n\n\t\t/**\n\t\t * Used by plugins to inject new properties.\n\t\t * @private\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis._injected = null;\n\n\t\tif (props) {\n\t\t\tthis.pluginData = props.pluginData;\n\t\t\tif (props.override) { Tween.removeTweens(target); }\n\t\t}\n\t\tif (!this.pluginData) { this.pluginData = {}; }\n\n\t\tthis._init(props);\n\t}\n\n\t/**\n\t * Returns a new tween instance. This is functionally identical to using `new Tween(...)`, but may look cleaner\n\t * with the chained syntax of TweenJS.\n\t *\n\t * @static\n\t * @example\n\t * let tween = Tween.get(target).to({ x: 100 }, 500);\n\t * // equivalent to:\n\t * let tween = new Tween(target).to({ x: 100 }, 500);\n\t *\n\t * @param {Object} target The target object that will have its properties tweened.\n\t * @param {Object} [props] The configuration properties to apply to this instance (ex. `{loop:-1, paused:true}`).\n\t * @param {boolean} [props.useTicks]\n\t * @param {boolean} [props.ignoreGlobalPause]\n\t * @param {number|boolean} [props.loop]\n\t * @param {boolean} [props.reversed]\n\t * @param {boolean} [props.bounce]\n\t * @param {number} [props.timeScale]\n\t * @param {Object} [props.pluginData]\n\t * @param {boolean} [props.paused]\n\t * @param {*} [props.position] indicates the initial position for this tween\n\t * @param {*} [props.onChange] adds the specified function as a listener to the `change` event\n\t * @param {*} [props.onComplete] adds the specified function as a listener to the `complete` event\n\t * @param {*} [props.override] if true, removes all existing tweens for the target\n\t * @return {Tween} A reference to the created tween.\n\t */\n\tstatic get (target, props) {\n\t\treturn new Tween(target, props);\n\t}\n\n\t/**\n\t * Advances all tweens. This typically uses the {{#crossLink \"Ticker\"}}{{/crossLink}} class, but you can call it\n\t * manually if you prefer to use your own \"heartbeat\" implementation.\n\t *\n\t * @static\n\t *\n\t * @param {number} delta The change in time in milliseconds since the last tick. Required unless all tweens have\n\t * `useTicks` set to true.\n\t * @param {boolean} paused Indicates whether a global pause is in effect. Tweens with {@link tweenjs.Tween#ignoreGlobalPause}\n\t * will ignore this, but all others will pause if this is `true`.\n\t */\n\tstatic tick (delta, paused) {\n\t\tlet tween = Tween._tweenHead;\n\t\twhile (tween) {\n\t\t\tlet next = tween._next; // in case it completes and wipes its _next property\n\t\t\tif ((paused && !tween.ignoreGlobalPause) || tween._paused) { /* paused */ }\n\t\t\telse { tween.advance(tween.useTicks ? 1: delta); }\n\t\t\ttween = next;\n\t\t}\n\t}\n\n\t/**\n\t * Handle events that result from Tween being used as an event handler. This is included to allow Tween to handle\n\t * {@link tweenjs.Ticker#event:tick} events from the {@link tweenjs.Ticker}.\n\t * No other events are handled in Tween.\n\t *\n\t * @static\n\t * @since 0.4.2\n\t *\n\t * @param {Object} event An event object passed in by the {@link core.EventDispatcher}. Will\n\t * usually be of type \"tick\".\n\t */\n\tstatic handleEvent (event) {\n\t\tif (event.type === \"tick\") {\n\t\t\tthis.tick(event.delta, event.paused);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all existing tweens for a target. This is called automatically by new tweens if the `override`\n\t * property is `true`.\n\t *\n\t * @static\n\t *\n\t * @param {Object} target The target object to remove existing tweens from.=\n\t */\n\tstatic removeTweens (target) {\n\t\tif (!target.tweenjs_count) { return; }\n\t\tlet tween = Tween._tweenHead;\n\t\twhile (tween) {\n\t\t\tlet next = tween._next;\n\t\t\tif (tween.target === target) { tween.paused = true; }\n\t\t\ttween = next;\n\t\t}\n\t\ttarget.tweenjs_count = 0;\n\t}\n\n\t/**\n\t * Stop and remove all existing tweens.\n\t *\n\t * @static\n\t * @since 0.4.1\n\t */\n\tstatic removeAllTweens () {\n\t\tlet tween = Tween._tweenHead;\n\t\twhile (tween) {\n\t\t\tlet next = tween._next;\n\t\t\ttween._paused = true;\n\t\t\ttween.target && (tween.target.tweenjs_count = 0);\n\t\t\ttween._next = tween._prev = null;\n\t\t\ttween = next;\n\t\t}\n\t\tTween._tweenHead = Tween._tweenTail = null;\n\t}\n\n\t/**\n\t * Indicates whether there are any active tweens on the target object (if specified) or in general.\n\t *\n\t * @static\n\t *\n\t * @param {Object} [target] The target to check for active tweens. If not specified, the return value will indicate\n\t * if there are any active tweens on any target.\n\t * @return {boolean} Indicates if there are active tweens.\n\t */\n\tstatic hasActiveTweens (target) {\n\t\tif (target) { return !!target.tweenjs_count; }\n\t\treturn !!Tween._tweenHead;\n\t}\n\n\t/**\n\t * Installs a plugin, which can modify how certain properties are handled when tweened. See the {{#crossLink \"SamplePlugin\"}}{{/crossLink}}\n\t * for an example of how to write TweenJS plugins. Plugins should generally be installed via their own `install` method, in order to provide\n\t * the plugin with an opportunity to configure itself.\n\t *\n\t * @static\n\t *\n\t * @param {Object} plugin The plugin to install\n\t * @param {Object} props The props to pass to the plugin\n\t */\n\tstatic installPlugin (plugin, props) {\n\t\tplugin.install(props);\n\t\tconst priority = (plugin.priority = plugin.priority || 0), arr = (Tween._plugins = Tween._plugins || []);\n\t\tfor (let i = 0, l = arr.length; i < l; i++) {\n\t\t\tif (priority < arr[i].priority) { break; }\n\t\t}\n\t\tarr.splice(i, 0, plugin);\n\t}\n\n\t/**\n\t * Registers or unregisters a tween with the ticking system.\n\t *\n\t * @private\n\t * @static\n\t *\n\t * @param {Tween} tween The tween instance to register or unregister.\n\t * @param {boolean} paused If `false`, the tween is registered. If `true` the tween is unregistered.\n\t */\n\tstatic _register (tween, paused) {\n\t\tconst target = tween.target;\n\t\tif (!paused && tween._paused) {\n\t\t\t// TODO: this approach might fail if a dev is using sealed objects\n\t\t\tif (target) { target.tweenjs_count = target.tweenjs_count ? target.tweenjs_count + 1 : 1; }\n\t\t\tlet tail = Tween._tweenTail;\n\t\t\tif (!tail) { Tween._tweenHead = Tween._tweenTail = tween; }\n\t\t\telse {\n\t\t\t\tTween._tweenTail = tail._next = tween;\n\t\t\t\ttween._prev = tail;\n\t\t\t}\n\t\t\tif (!Tween._inited) { _createjs_core_src_utils_Ticker__WEBPACK_IMPORTED_MODULE_2__[\"default\"].addEventListener(\"tick\", Tween); Tween._inited = true; }\n\t\t} else if (paused && !tween._paused) {\n\t\t\tif (target) { target.tweenjs_count--; }\n\t\t\tlet next = tween._next, prev = tween._prev;\n\n\t\t\tif (next) { next._prev = prev; }\n\t\t\telse { Tween._tweenTail = prev; } // was tail\n\t\t\tif (prev) { prev._next = next; }\n\t\t\telse { Tween._tweenHead = next; } // was head.\n\n\t\t\ttween._next = tween._prev = null;\n\t\t}\n\t}\n\n\t/**\n\t * Adds a wait (essentially an empty tween).\n\t *\n\t * @example\n\t * // This tween will wait 1s before alpha is faded to 0.\n\t * Tween.get(target)\n\t *   .wait(1000)\n\t *   .to({ alpha: 0 }, 1000);\n\t *\n\t * @param {number} duration The duration of the wait in milliseconds (or in ticks if `useTicks` is true).\n\t * @param {boolean} [passive=false] Tween properties will not be updated during a passive wait. This\n\t * is mostly useful for use with {@link tweenjs.Timeline} instances that contain multiple tweens\n\t * affecting the same target at different times.\n\t * @chainable\n\t */\n\twait (duration, passive = false) {\n\t\tif (duration > 0) { this._addStep(+duration, this._stepTail.props, null, passive); }\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a tween from the current values to the specified properties. Set duration to 0 to jump to these value.\n\t * Numeric properties will be tweened from their current value in the tween to the target value. Non-numeric\n\t * properties will be set at the end of the specified duration.\n\t *\n\t * @example\n\t * Tween.get(target)\n\t *   .to({ alpha: 0, visible: false }, 1000);\n\t *\n\t * @param {Object} props An object specifying property target values for this tween (Ex. `{x:300}` would tween the x\n\t * property of the target to 300).\n\t * @param {number} [duration=0] The duration of the tween in milliseconds (or in ticks if `useTicks` is true).\n\t * @param {Function} [ease=Ease.linear] The easing function to use for this tween. See the {@link tweenjs.Ease}\n\t * class for a list of built-in ease functions.\n\t * @chainable\n\t */\n\tto (props, duration = 0, ease = _Ease__WEBPACK_IMPORTED_MODULE_1__[\"linear\"]) {\n\t\tif (duration < 0) { duration = 0; }\n\t\tconst step = this._addStep(+duration, null, ease);\n\t\tthis._appendProps(props, step);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a label that can be used with {@link tweenjs.Tween#gotoAndPlay}/{@link tweenjs.Tween#gotoAndStop}\n\t * at the current point in the tween.\n\t *\n\t * @example\n\t * let tween = Tween.get(foo)\n\t *   .to({ x: 100 }, 1000)\n\t *   .label(\"myLabel\")\n\t *   .to({ x: 200 }, 1000);\n\t * // ...\n\t * tween.gotoAndPlay(\"myLabel\"); // would play from 1000ms in.\n\t *\n\t * @param {string} label The label name.\n\t * @chainable\n\t */\n\tlabel (name) {\n\t\tthis.addLabel(name, this.duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an action to call the specified function.\n\t *\n\t * @example\n\t * // would call myFunction() after 1 second.\n\t * Tween.get()\n\t *   .wait(1000)\n\t *   .call(myFunction);\n\t *\n\t * @param {Function} callback The function to call.\n\t * @param {Array} [params]. The parameters to call the function with. If this is omitted, then the function\n\t * will be called with a single param pointing to this tween.\n\t * @param {Object} [scope]. The scope to call the function in. If omitted, it will be called in the target's scope.\n\t * @chainable\n\t */\n\tcall (callback, params, scope) {\n\t\treturn this._addAction(scope || this.target, callback, params || [this]);\n\t}\n\n\t/**\n\t * Adds an action to set the specified props on the specified target. If `target` is null, it will use this tween's\n\t * target. Note that for properties on the target object, you should consider using a zero duration {@link tweenjs.Tween#to}\n\t * operation instead so the values are registered as tweened props.\n\t *\n\t * @example\n\t * tween.wait(1000)\n\t *   .set({ visible: false }, foo);\n\t *\n\t * @param {Object} props The properties to set (ex. `{ visible: false }`).\n\t * @param {Object} [target] The target to set the properties on. If omitted, they will be set on the tween's target.\n\t * @chainable\n\t */\n\tset (props, target) {\n\t\treturn this._addAction(target || this.target, this._set, [ props ]);\n\t}\n\n\t/**\n\t * Adds an action to play (unpause) the specified tween. This enables you to sequence multiple tweens.\n\t *\n\t * @example\n\t * tween.to({ x: 100 }, 500)\n\t *   .play(otherTween);\n\t *\n\t * @param {Tween} [tween] The tween to play. Defaults to this tween.\n\t * @chainable\n\t */\n\tplay (tween) {\n    return this._addAction(tween || this, this._set, [{ paused: false }]);\n\t}\n\n\t/**\n\t * Adds an action to pause the specified tween.\n\t * At 60fps the tween will advance by ~16ms per tick, if the tween above was at 999ms prior to the current tick, it\n   * will advance to 1015ms (15ms into the second \"step\") and then pause.\n\t *\n\t * @example\n\t * tween.pause(otherTween)\n\t *   .to({ alpha: 1 }, 1000)\n\t *   .play(otherTween);\n\t *\n\t * // Note that this executes at the end of a tween update,\n\t * // so the tween may advance beyond the time the pause action was inserted at.\n   *\n   * tween.to({ foo: 0 }, 1000)\n   *   .pause()\n   *   .to({ foo: 1 }, 1000);\n\t *\n\t * @param {Tween} [tween] The tween to pause. Defaults to this tween.\n\t * @chainable\n\t */\n\tpause (tween) {\n\t\treturn this._addAction(tween || this, this._set, [{ paused: false }]);\n\t}\n\n\t/**\n\t * @throws Tween cannot be cloned.\n\t */\n\tclone () {\n\t\tthrow \"Tween can not be cloned.\";\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} plugin\n\t */\n\t_addPlugin (plugin) {\n\t\tlet ids = this._pluginIds || (this._pluginIds = {}), id = plugin.id;\n\t\tif (!id || ids[id]) { return; } // already added\n\n\t\tids[id] = true;\n\t\tlet plugins = this._plugins || (this._plugins = []), priority = plugin.priority || 0;\n\t\tfor (let i = 0, l = plugins.length; i < l; i++) {\n\t\t\tif (priority < plugins[i].priority) {\n\t\t\t\tplugins.splice(i, 0, plugin);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tplugins.push(plugin);\n\t}\n\n\t/**\n\t * @private\n\t * @param {} jump\n\t * @param {boolean} end\n   */\n\t_updatePosition (jump, end) {\n\t\tlet step = this._stepHead.next, t = this.position, d = this.duration;\n\t\tif (this.target && step) {\n\t\t\t// find our new step index:\n\t\t\tlet stepNext = step.next;\n\t\t\twhile (stepNext && stepNext.t <= t) { step = step.next; stepNext = step.next; }\n\t\t\tlet ratio = end ? d === 0 ? 1 : t/d : (t-step.t)/step.d; // TODO: revisit this.\n\t\t\tthis._updateTargetProps(step, ratio, end);\n\t\t}\n\t\tthis._stepPosition = step ? t - step.t : 0;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} step\n\t * @param {Number} ratio\n\t * @param {boolean} end Indicates to plugins that the full tween has ended.\n\t */\n\t_updateTargetProps (step, ratio, end) {\n\t\tif (this.passive = !!step.passive) { return; } // don't update props.\n\n\t\tlet v, v0, v1, ease;\n\t\tlet p0 = step.prev.props;\n\t\tlet p1 = step.props;\n\t\tif (ease = step.ease) { ratio = ease(ratio, 0, 1, 1); }\n\n\t\tlet plugins = this._plugins;\n\t\tproploop : for (let n in p0) {\n\t\t\tv0 = p0[n];\n\t\t\tv1 = p1[n];\n\n\t\t\t// values are different & it is numeric then interpolate:\n\t\t\tif (v0 !== v1 && (typeof(v0) === \"number\")) {\n\t\t\t\tv = v0 + (v1 - v0) * ratio;\n\t\t\t} else {\n\t\t\t\tv = ratio >= 1 ? v1 : v0;\n\t\t\t}\n\n\t\t\tif (plugins) {\n\t\t\t\tfor (let i = 0, l = plugins.length; i < l; i++) {\n\t\t\t\t\tlet value = plugins[i].change(this, step, n, v, ratio, end);\n\t\t\t\t\tif (value === Tween.IGNORE) { continue proploop; }\n\t\t\t\t\tif (value !== undefined) { v = value; }\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.target[n] = v;\n\t\t}\n\n\t}\n\n\t/**\n\t * @private\n\t * @param {number} startPos\n\t * @param {number} endPos\n\t * @param {boolean} includeStart\n\t */\n\t_runActionsRange (startPos, endPos, jump, includeStart) {\n\t\tlet rev = startPos > endPos;\n\t\tlet action = rev ? this._actionTail : this._actionHead;\n\t\tlet ePos = endPos, sPos = startPos;\n\t\tif (rev) { ePos = startPos; sPos = endPos; }\n\t\tlet t = this.position;\n\t\twhile (action) {\n\t\t\tlet pos = action.t;\n\t\t\tif (pos === endPos || (pos > sPos && pos < ePos) || (includeStart && pos === startPos)) {\n\t\t\t\taction.funct.apply(action.scope, action.params);\n\t\t\t\tif (t !== this.position) { return true; }\n\t\t\t}\n\t\t\taction = rev ? action.prev : action.next;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} props\n\t */\n\t_appendProps (props, step, stepPlugins) {\n\t\tlet initProps = this._stepHead.props, target = this.target, plugins = Tween._plugins;\n\t\tlet n, i, l, value, initValue, inject;\n\n\t\tlet oldStep = step.prev, oldProps = oldStep.props;\n\t\tlet stepProps = step.props || (step.props = this._cloneProps(oldProps));\n\t\tlet cleanProps = {};\n\n\t\tfor (n in props) {\n\t\t\tif (!props.hasOwnProperty(n)) { continue; }\n\t\t\tcleanProps[n] = stepProps[n] = props[n];\n\n\t\t\tif (initProps[n] !== undefined) { continue; }\n\n\t\t\tinitValue = undefined; // accessing missing properties on DOMElements when using CSSPlugin is INSANELY expensive, so we let the plugin take a first swing at it.\n\t\t\tif (plugins) {\n        for (i = plugins.length - 1; i >= 0; i--) {\n\t\t\t\t\tvalue = plugins[i].init(this, n, initValue);\n\t\t\t\t\tif (value !== undefined) { initValue = value; }\n\t\t\t\t\tif (initValue === Tween.IGNORE) {\n\t\t\t\t\t\t(ignored = ignored || {})[n] = true;\n\t\t\t\t\t\tdelete(stepProps[n]);\n\t\t\t\t\t\tdelete(cleanProps[n]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (initValue !== Tween.IGNORE) {\n\t\t\t\tif (initValue === undefined) { initValue = target[n]; }\n\t\t\t\toldProps[n] = (initValue === undefined) ? null : initValue;\n\t\t\t}\n\t\t}\n\n\t\tfor (n in cleanProps) {\n\t\t\tvalue = props[n];\n\n\t\t\t// propagate old value to previous steps:\n\t\t\tlet o, prev = oldStep;\n\t\t\twhile ((o = prev) && (prev = o.prev)) {\n\t\t\t\tif (prev.props === o.props) { continue; } // wait step\n\t\t\t\tif (prev.props[n] !== undefined) { break; } // already has a value, we're done.\n\t\t\t\tprev.props[n] = oldProps[n];\n\t\t\t}\n\t\t}\n\n\t\tif (stepPlugins && (plugins = this._plugins)) {\n      for (i = plugins.length - 1; i >= 0; i--) {\n\t\t\t\tplugins[i].step(this, step, cleanProps);\n\t\t\t}\n\t\t}\n\n\t\tif (inject = this._injected) {\n\t\t\tthis._injected = null;\n\t\t\tthis._appendProps(inject, step, false);\n\t\t}\n\t}\n\n\t/**\n\t * Used by plugins to inject properties onto the current step. Called from within `Plugin.step` calls.\n\t * For example, a plugin dealing with color, could read a hex color, and inject red, green, and blue props into the tween.\n\t * See the SamplePlugin for more info.\n\t * @see tweenjs.SamplePlugin\n\t * @private\n\t * @param {string} name\n\t * @param {Object} value\n\t */\n\t_injectProp (name, value) {\n\t\tlet o = this._injected || (this._injected = {});\n\t\to[name] = value;\n\t}\n\n\t/**\n\t * @private\n\t * @param {number} duration\n\t * @param {Object} props\n\t * @param {Function} ease\n\t * @param {boolean} [passive=false]\n\t */\n\t_addStep (duration, props, ease, passive = false) {\n\t\tlet step = new TweenStep(this._stepTail, this.duration, duration, props, ease, passive);\n\t\tthis.duration += duration;\n\t\treturn this._stepTail = (this._stepTail.next = step);\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} scope\n\t * @param {Function} funct\n\t * @param {Array} params\n\t */\n\t_addAction (scope, funct, params) {\n\t\tlet action = new TweenAction(this._actionTail, this.duration, scope, funct, params);\n\t\tif (this._actionTail) { this._actionTail.next = action; }\n\t\telse { this._actionHead = action; }\n\t\tthis._actionTail = action;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} props\n\t */\n\t_set (props) {\n\t\tfor (let n in props) {\n\t\t\tthis[n] = props[n];\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} props\n\t */\n\t_cloneProps (props) {\n\t\tlet o = {};\n\t\tfor (let n in props) { o[n] = props[n]; }\n\t\treturn o;\n\t}\n\n}\n\n// tiny api (primarily for tool output):\n{\n\tlet p = Tween.prototype;\n\tp.w = p.wait;\n\tp.t = p.to;\n\tp.c = p.call;\n\tp.s = p.set;\n}\n\n// static properties\n/**\n * Constant returned by plugins to tell the tween not to use default assignment.\n * @property IGNORE\n * @type {Object}\n * @static\n */\nTween.IGNORE = {};\n\n/**\n * @property _listeners\n * @type {Tween[]}\n * @static\n * @private\n */\nTween._tweens = [];\n\n/**\n * @property _plugins\n * @type {Object}\n * @static\n * @private\n */\nTween._plugins = null;\n\n/**\n * @property _tweenHead\n * @type {Tween}\n * @static\n * @private\n */\nTween._tweenHead = null;\n\n/**\n * @property _tweenTail\n * @type {Tween}\n * @static\n * @private\n */\nTween._tweenTail = null;\n\n// helpers:\n\n/**\n * @private\n * @param {*} prev\n * @param {*} t\n * @param {*} d\n * @param {*} props\n * @param {*} ease\n * @param {*} passive\n */\nclass TweenStep {\n\n\tconstructor (prev, t, d, props, ease, passive) {\n\t\tthis.next = null;\n\t\tthis.prev = prev;\n\t\tthis.t = t;\n\t\tthis.d = d;\n\t\tthis.props = props;\n\t\tthis.ease = ease;\n\t\tthis.passive = passive;\n\t\tthis.index = prev ? prev.index + 1 : 0;\n\t}\n\n}\n\n/**\n * @private\n * @param {*} prev\n * @param {*} t\n * @param {*} scope\n * @param {*} funct\n * @param {*} params\n */\nclass TweenAction {\n\n\tconstructor (prev, t, scope, funct, params) {\n\t\tthis.next = null;\n\t\tthis.d = 0;\n\t\tthis.prev = prev;\n\t\tthis.t = t;\n\t\tthis.scope = scope;\n\t\tthis.funct = funct;\n\t\tthis.params = params;\n\t}\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tween);\n\n\n//# sourceURL=webpack:///./node_modules/@createjs/tweenjs/src/Tween.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _createjs_easeljs_dist_easeljs_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/easeljs/dist/easeljs.module */ \"./node_modules/@createjs/easeljs/dist/easeljs.module.js\");\n/* harmony import */ var _createjs_tweenjs_dist_tweenjs_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @createjs/tweenjs/dist/tweenjs.module */ \"./node_modules/@createjs/tweenjs/dist/tweenjs.module.js\");\n// EaselJS系の読み込み\n\n// TweenJS系の読み込み\n\n\nconst stage = new _createjs_easeljs_dist_easeljs_module__WEBPACK_IMPORTED_MODULE_0__[\"Stage\"]('myCanvas');\n\nconst circle = new _createjs_easeljs_dist_easeljs_module__WEBPACK_IMPORTED_MODULE_0__[\"Shape\"]();\ncircle.graphics.beginFill('DarkRed').drawCircle(0, 0, 50);\nstage.addChild(circle);\n\ncircle.x = 300;\ncircle.y = 200;\n\n_createjs_tweenjs_dist_tweenjs_module__WEBPACK_IMPORTED_MODULE_1__[\"Tween\"].get(circle, {loop: true})\n  .wait(300)\n  .to({x: 740, y: 400, scale: 2}, 700)\n  .to({x: 400, y: 0, scale: 1.4}, 1200)\n  .to({x: 500, y: 300, scale: 3}, 1200)\n  .to({x: 300, y: 200, scale: 1}, 700);\n\nupdate();\n\n// 毎フレームステージを自動更新する\nfunction update() {\n  stage.update();\n  requestAnimationFrame(() => update());\n\n}\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });